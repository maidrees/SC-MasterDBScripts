-- FUNCTION: public.usp_dbservgetkpidetails_newjson

-- DROP FUNCTION public.usp_dbservgetkpidetails_newjson;

CREATE OR REPLACE FUNCTION public.usp_dbservgetkpidetails_new(
	input json DEFAULT NULL::json)
RETURNS json
    LANGUAGE 'plpgsql'
    COST 100.0
    VOLATILE 
AS $function$

DECLARE 
	VTRAN		VARCHAR(30);
	VCreated_By	int;
	VEntityid	int;
	VID		int;
	VSOURCEID	int;
	VExpressions	json;
	VKpisList	json;
	VAlerts		json;
	VProblems	json;
	Vmetricdetails	json;
	VActiondate	timestamp default(current_timestamp at time zone 'utc')	;
	
Begin

drop table if exists temps;
drop table if exists Createdbylist;
drop table if exists KPIs;

create temp table temps(id serial,ivalue json);
create temp table Createdbylist(recordid serial,createdby int);

create temp table KPIs (KPIID Bigint,MEASURE Varchar(100),KPIName Varchar(100),KPIDescription Varchar(1000),KPIAction Varchar(100),KPIActionID int,
RuleOperator Varchar(50),RULEVALUE1 Varchar(50),RuleValue2 Varchar(50),ruleBoolOperator Varchar(50)
,KPIRuleId bigint,MeasureId  Bigint,Measurename varchar(512),lastkpistatus varchar(100),KPITypeID int,KPIType varchar(100),FORMULAMEASURE varchar(1000)
,FORMULA_CHK bit,TEMPLATE_ID int,SourceId int,EXPRESSION_SERVICE text,CustomerID bigint, LocationId bigint,GroupName varchar(255),Correlationid bigint);

                       
insert into temps(ivalue)
select input;

select ivalue->'INPUT'->> 'TRANSTYPE' 
,ivalue->'INPUT'->> 'LoginId'
,ivalue->'INPUT'->> 'ENTITYID'
,ivalue->'INPUT'->> 'SOURCEID'
,ivalue->'INPUT'->> 'VID'
into VTRAN,VCreated_By,VEntityid,VSOURCEID,VID
from temps 
limit 1;

if VSOURCEID=0 then
VSOURCEID:=NULL;
end if;

--if VEntityid >0 and VEntityid is not null then
-- Begin
-- 
-- 	Select licenses.VID into VID
-- 	from
-- 	(Select CREATEDBY from KBEntities where ENTITY_ID=VEntityid) users
-- 	Join (select UserID,CustomerID from KBUserCustomerMapping) cust on users.CREATEDBY=cust.UserID
-- 	Join ( Select CustomerId, LicenseKeyId VID from KBLicenseDetails) licenses on cust.CustomerID=licenses.CustomerId
-- ;
-- End;
-- -- Else
-- Begin
-- 
-- 	Select  licenses.VID into VID
-- 	from
-- 	(Select CREATEDBY from KBSourceTypeMst where SOURCETYPE_ID=@SourceID) users
-- 	Join (select UserID,CustomerID from KBUserCustomerMapping) cust on users.CREATEDBY=cust.UserID
-- 	Join ( Select CustomerId, LicenseKeyId VID from KBLicenseDetails) licenses on cust.CustomerID=licenses.CustomerId
-- 	
-- 
-- End;
--end if;

if vid is not null and coalesce(vid,0)!=0 then
Begin

	Insert into Createdbylist(createdby)
	Select UserID 
	from KBUserCustomerMapping users
	Join
	(Select distinct CustomerId from KBSpokeLicenseDetails where LicenseKeyId=VId and CustomerId!=1) customers on users.CustomerID=customers.CustomerId
	where users.UserID!=1;
End;
Else
Begin 
	Insert into Createdbylist(createdby)
	Select UserID 
	from KBUserCustomerMapping users
	Join
	(Select distinct CustomerId from KBSpokeLicenseDetails where CustomerId!=1) customers on users.CustomerID=customers.CustomerId
	where users.UserID!=1;
end;

end if;

begin 

 INSERT INTO KPIS(
		KPIID,MEASURE, KPINAME,KPIDESCRIPTION,KPIACTION,KPIACTIONID,RULEOPERATOR,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR,KPIRULEID,MEASUREID
 		,MEASURENAME,LASTKPISTATUS,KPITYPEID,KPITYPE,FORMULAMEASURE,FORMULA_CHK,TEMPLATE_ID,SOURCEID,EXPRESSION_SERVICE,CUSTOMERID,GROUPNAME,Correlationid
		)
 
 		SELECT DISTINCT  --TOP 2
 		VKM.KPIID AS "KPIID"
 		,VKM.MEASURE AS "MEASURE"
 		,VKM.KPINAME AS "KPINAME"
 		,NULL AS "KPIDESC"
 		,VKM.ACTION AS "KPIACTION",VKM.ACTIONID AS "KPIACTIONID",
 		VKM.RULEOPERATOR AS "RULEOPERATOR"
 		,VKM.RULEVALUE1 AS "VALUE1"
 		,VKM.RULEVALUE2 AS "VALUE2"
 		,VKM.RULEBOOLOPERATOR AS "RULEBOOL"
 		,VKM.KPIRULEID "KPIRULEID"
 		,VAM.MEASUREID  "MEASUREID"
 		,VAM.MEASURE "MEASURENAME"
 		,'2' AS "LASTKPISTATUS"
 		,KPITYPEID "KPITYPEID"
 		,KPITYPE "KPITYPE"
 		,FORMULAMEASURE
 		,CAST(FORMULA_CHK AS BIT)
 		,VKM.TEMPLATE_ID "TEMPLATE_ID"
 		,VKM.SOURCEID "SOURCEID"
 		, EXPRESSION_SERVICE
 		,VUC.CUSTOMERID ENTITYID
 		,GROUPNAME AS GROUPINGNAME
 		,vkm.Correlationid
 		FROM 
 		( 
 
 			SELECT   KPIID,MEASURE,MEASURE_ID, KPINAME,KPIRULEID,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR,RULEOPERATOR,ACTION,ACTIONID,TEMPLATE_ID 
 			,KPITYPEID,KPITYPE,FORMULAMEASURE,FORMULA_CHK,SOURCE_ID SOURCEID,COALESCE(EXPRESSION_SERVICE,'') EXPRESSION_SERVICE,GROUPNAME,CorrelationID
 			FROM 
 			(
 				SELECT DISTINCT 
 				COALESCE(ORIGINALID,AG.KPI_ID) AS KPIID,GM.SOURCE_ID ,AG.RULEMEASURE AS MEASURE, MEASUREMST.MEASURE_ID, GM.KPI_NAME AS KPINAME
 					  , GM.KPI_DESCRIPTION AS KPIDESCRIPTION
 					, AG.RULEACTION AS ACTION
 				      , KSTATUS.STATUSID AS ACTIONID
 				      , COALESCE(TGROUP.ACTION_CUSTOMIZE_NAME,'NONE') GROUPNAME
 				      , AG.RULEOPERATOR, AG.RULEVALUE1, AG.RULEVALUE2, AG.ROOLBOOLOPERATOR AS RULEBOOLOPERATOR, AG.KPIRULE_ID AS KPIRULEID,
 				       TM.TEMPLATE_ID, TM.TEMPLATE_NAME,GM.KPITYPE KPITYPEID,KPITYPES.KPITYPENAME KPITYPE, MEASUREMST.FORMULAMEASURE, MEASUREMST.FORMULA_CHK, MEASUREMST.FORMULATITLE
 				       ,AG.EXPRESSION_SERVICE  EXPRESSION_SERVICE
 				   ,GM.CORRELATIONID, GM.ISMULTIDATASOURCE
 					   ,GM.CREATEDBY
 					   ,KSTATUS.CREATEDBY KPISTATUSCREATEDBY
 					FROM         
 					KBKPIMST AS GM 
 					LEFT JOIN KBKPIRULE AS AG  ON AG.KPI_ID = GM.KPI_ID 
 					LEFT JOIN KBTEMPLATEGROUPINGMST TGROUP ON AG.ACTION_GROUPID=TGROUP.GROUPDETAILID
 					LEFT JOIN KBTEMPLATEMST AS TM  ON TM.TEMPLATE_ID = GM.TEMPLATE_ID 
 					LEFT JOIN (
 								SELECT MEASURE_ID,KPI_ID ,TEMPLATE_ID
 								FROM   KBKPIMEASURE 
 							) AS KME  ON KME.KPI_ID = GM.KPI_ID AND GM.TEMPLATE_ID=KME.TEMPLATE_ID
 					
 					  LEFT JOIN KBMEASUREMST AS MEASUREMST  ON CAST(AG.RULEMEASURE AS INT) = MEASUREMST.MEASURE_ID
 					  LEFT OUTER JOIN KBKPITYPEMST KPITYPES   ON GM.KPITYPE=KPITYPES.KPITYPEID
 					  LEFT OUTER JOIN KBKPISTATUS KSTATUS 	 ON AG.RULEACTION=KSTATUS.STATUS
 					  WHERE AG.ISACTIVE='1' AND GM.ISACTIVE='1'  and coalesce(IsMultiDataSource,'0')='1'
 					  --AND GM.SOURCE_ID=VSOURCEID
 
 
 			)   VWKPI
 			WHERE EXISTS 
 					( 
 							SELECT 1 
 							FROM 
 							(
 								SELECT USERID
								FROM 
								(
								 
									SELECT createdby userid 
									from createdbylist
								) AA
 							) A
 							WHERE USERID= CREATEDBY
 					)
 		) VKM
 		INNER JOIN  (
 			SELECT DISTINCT 
                       KM.KPI_ID AS KPIID, NULL AS AUDIENCEID, NULL AS LOGINID,  CM.ENTITY_ID AS CUSTOMERID,'' LATITUDE,'' LONGITUDE, CP.PHONENO AS PHONENUMBER
                       , KM.KPI_NAME AS KPINAME, KM.SOURCE_ID, KM.TEMPLATE_ID AS TEMPLATEID, TM.TEMPLATE_NAME AS TEMPLATENAME ,LM.LOCATION_ID AS LOCATIONID, LM.LOCATION_NAME AS LOCATIONNAME
                       , CM.ENTITY_NAME CUSTOMER_NAME,CT.TEMPLATE_ID
 			FROM    KBENTITIES AS CM 
 			INNER JOIN KBENTITYLOCATIONS AS LM  ON CM.ENTITY_ID = LM.ENTITY_ID 
 			LEFT OUTER JOIN	KBENTITYPHONE AS CP ON LM.LOCATION_ID = CP.LOCATION_ID AND LM.ENTITY_ID = CP.ENTITY_ID 
 			LEFT OUTER JOIN	 KBENTITYTEMPLATES AS CT ON LM.LOCATION_ID = CT.LOCATION_ID AND LM.ENTITY_ID = CT.ENTITY_ID 
 			INNER JOIN  KBKPIMST AS KM ON CT.TEMPLATE_ID = KM.TEMPLATE_ID 
 			INNER JOIN (SELECT     TEMPLATE_ID, TEMPLATE_NAME FROM KBTEMPLATEMST ) AS TM ON CT.TEMPLATE_ID = TM.TEMPLATE_ID ) VUC ON VKM.KPIID=VUC.KPIID 
			INNER JOIN ( 
					SELECT MEASUREID,MEASURE,TEMPLATEID,KPIID,CUSTOMER_ID,LOCATIONID 
					FROM  
						(
						SELECT KM.KPI_ID KPIID, KM.KPI_NAME AS KPINAME, MM.MEASURE_ID AS MEASUREID, MM.MEASURE_NAME AS MEASURE
						, TM.TEMPLATE_ID AS TEMPLATEID, TM.TEMPLATE_NAME AS TEMPLATENAME, LM.LOCATION_ID AS LOCATIONID, LM.LOCATION_NAME AS LOCATIONNAME
						, CM.ENTITY_ID CUSTOMER_ID, CM.ENTITY_NAME AS CUSTOMERNAME,CORRELATIONID,ISMULTIDATASOURCE			
						FROM        
							(
							SELECT ENTITY_ID,ENTITY_NAME FROM   KBENTITIES   WHERE ISACTIVE='1' OR ENTITY_ID=1) AS CM
							INNER JOIN (SELECT ENTITY_ID, LOCATION_ID, LOCATION_NAME FROM KBENTITYLOCATIONS ) AS LM  ON CM.ENTITY_ID = LM.ENTITY_ID 
							INNER JOIN KBENTITYTEMPLATES AS KCT  ON LM.LOCATION_ID = KCT.LOCATION_ID AND LM.ENTITY_ID=KCT.ENTITY_ID
							INNER JOIN (SELECT TEMPLATE_ID, TEMPLATE_NAME FROM  KBTEMPLATEMST  )AS TM  ON TM.TEMPLATE_ID = KCT.TEMPLATE_ID 
							LEFT JOIN (
											SELECT COALESCE(ORIGINALID,KPI_ID) KPI_ID,KPI_ID LATESTKPIID, KPI_NAME,TEMPLATE_ID,CORRELATIONID,ISMULTIDATASOURCE
											FROM  KBKPIMST  
											WHERE ISACTIVE='1'
									  ) AS KM  ON KM.TEMPLATE_ID = TM.TEMPLATE_ID 
											
							LEFT JOIN (
  								SELECT MEASURE_ID,KPI_ID , TEMPLATE_ID
 								FROM   KBKPIMEASURE 
 								WHERE ISACTIVE='1'
								) AS KME  ON KME.KPI_ID = KM.LATESTKPIID AND KM.TEMPLATE_ID=KME.TEMPLATE_ID
 							LEFT JOIN KBMEASUREMST AS MM  ON MM.MEASURE_ID = KME.MEASURE_ID
						) VWUSERCUSTOMER  
						where coalesce(IsMultiDataSource,'0')='1'
				) VAM ON VAM.TEMPLATEID=VKM.TEMPLATE_ID --AND VAM.MEASUREID=VKM.MEASURE_ID
 			AND VKM.KPIID = VAM.KPIID
 				AND VUC.CUSTOMERID = VAM.CUSTOMER_ID AND VUC.LOCATIONID=VAM.LOCATIONID 
 		WHERE VUC.CUSTOMERID=coalesce(VENTITYID,VUC.CUSTOMERID)
 		ORDER BY VKM.KPIID;
 
-- 
--  VEXPRESSIONS:=(
--  
--  		SELECT ROW_TO_JSON(OUTPUT) AS "Expressions"
--  		FROM
--  		(
--  		SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A)))  AS "Expression"
--  		FROM
--  		(
--  		 SELECT KPIID 			"KPIID"
--  		 ,KPINAME			"KPIName"
--  		 ,COALESCE(KPIACTION,'')	"kpiaction"
--  		 ,COALESCE(KPIACTIONID,0)	"kpiactionid"
--  		 ,A.CUSTOMERID			"EntityID"
--  		 ,A.LOCATIONID			"LocationID"
--  		 , 'KPIID,KPIName,kpiaction,kpiactionid,EntityID,LocationID' "Attribute_list"	
--   		 ,	( 
--  			SELECT DISTINCT B.EXPRESSION_SERVICE
--  			FROM KPIS B 
--  			WHERE A.KPIID=B.KPIID AND A.KPIACTIONID=B.KPIACTIONID
--  			)"Expression"
--  		 FROM KPIS A
--  		 GROUP BY KPIID,KPIACTIONID,KPIACTION,KPINAME ,CUSTOMERID,LOCATIONID
--  		)A
--  		)OUTPUT
--  		 --FOR XML PATH(''),ROOT('EXPRESSIONS')
--   );
--   
 
 VKPISLIST:=( 
 
		Select Array_to_json(Array_agg(row_to_json(corr))) as "Correlation"
		From
		(
		select Main.correlationid "ID"
		,'ID,SOURCEID' "Attribute_list"
		,( 
		select String_agg(sourceid,';')
		from(
			Select cast(CDetails.SourceID as varchar(30)) sourceid
			--+';' 
			From
			CBCorrelationDetails CDetails 
			Join KBSourceTypeMst Sources on CDetails.SourceID=Sources.SOURCETYPE_ID
			where Main.CorrelationID=CDetails.CorrelationID  
			Group by CDetails.SourceID
		)sources	
		) "SOURCEID"
 		,

		(
			select  ROW_TO_JSON(rules) "ruledetails"
			from
			(
			
				Select '' EntityId,'' LocationId,

				(
					SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "rule"
					FROM
					(
					SELECT  
					KPIID AS "kpiid"
					,MST.SOURCE_ID AS "sourceid"
					,SOURCES.ALIAS AS "sourcename"
					,MEASURE	"measure"
					,KPINAME	"kpiname"	
					,MST.KPI_DESCRIPTION AS "kpidesc"
					,KPIACTION	"kpiaction"
					,KPIACTIONID  "kpiactionid"
					,RULEOPERATOR	"ruleoperator"
					,RULEVALUE1 AS "value1"
					,RULEVALUE2 AS "value2"
					,COALESCE(RULEBOOLOPERATOR,'') AS "rulebool"
					,KPIRULEID	"kpiruleid"
					,MEASUREID	"measureid"
					,LASTKPISTATUS	"lastkpistatus"
					,COALESCE(KPIS.KPITYPE,'NORMAL')  AS "kpitype"
					, COALESCE(KPITYPEID,1) AS "kpitypeid"
					,EXPRESSION_SERVICE	"EXPRESSION_SERVICE"
					,MST.TEMPLATE_ID "TEMPLATE_ID"
					,CUSTOMERID "entityid"
					,LOCATIONID "locationid"
					 ,CASE WHEN GROUPNAME='' OR GROUPNAME IS NULL THEN 'NONE' ELSE GROUPNAME END AS "groupingname"
					 ,USERS.USER_NAME "CreatedBy"
					 ,ORIGMST.CREATEDDATE "CreatedDate"
					,(
					SELECT LICENSEKEYID "licensekeyid"
					FROM KBLICENSEDETAILS MAPS 
					WHERE CUSTOMERID= (SELECT CUSTOMERID FROM KBUSERCUSTOMERMAPPING WHERE USERID= MST.CREATEDBY)
					LIMIT 1
					) "VID"
					,'kpiid,sourceid,sourcename,measure,kpiname,kpidesc,kpiaction,kpiactionid,ruleoperator,value1,value2,rulebool,kpiruleid,measureid,lastkpistatus,kpitypeid,'
					||'EXPRESSION_SERVICE,TEMPLATE_ID,entityid,locationid,groupingname,CreatedBy,CreatedDate,VID' "Attribute_list"
					FROM (
							SELECT DISTINCT KPIID,MEASUREID,SOURCEID, TEMPLATE_ID,MEASURE,KPINAME,KPIACTION, RULEOPERATOR, RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR
							,KPIRULEID,LASTKPISTATUS,KPITYPE,KPITYPEID,KPIACTIONID,EXPRESSION_SERVICE,CUSTOMERID,LOCATIONID,GROUPNAME
							 FROM KPIS kpitemp
							 where kpitemp.correlationid=main.correlationid
						) KPIS   
					INNER JOIN KBKPIMST MST ON KPIS.KPIID=COALESCE(MST.ORIGINALID,MST.KPI_ID)
					INNER JOIN KBKPIMST ORIGMST ON COALESCE(MST.ORIGINALID,MST.KPI_ID)=ORIGMST.KPI_ID
					INNER JOIN KBKPIMEASURE A ON A.KPI_ID=MST.KPI_ID
					INNER JOIN KBMEASUREMST B ON B.MEASURE_ID=A.MEASURE_ID AND KPIS.MEASUREID=B.MEASURE_ID
					LEFT OUTER JOIN KBSOURCETYPEMST SOURCES ON MST.SOURCE_ID=SOURCES.SOURCETYPE_ID
					LEFT OUTER JOIN KBUSERMST USERS ON ORIGMST.CREATEDBY=USERS.USER_ID
					WHERE 
					--(B.ISACTIVE=2 OR B.ISACTIVE=1) AND MST.ISACTIVE='1' AND 
					MST.source_id=coalesce(VSOURCEID,MST.source_id) and ORIGMST.source_id=coalesce(VSOURCEID,ORIGMST.source_id)
					 GROUP BY SOURCEID,KPIS.TEMPLATE_ID, KPIID,MST.SOURCE_ID,SOURCES.ALIAS,MEASURE,KPINAME,MST.KPI_DESCRIPTION,KPIACTION,RULEOPERATOR,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR
							,KPIRULEID,MEASUREID,LASTKPISTATUS,KPIS.KPITYPE,KPITYPEID,B.FORMULAMEASURE,KPIACTIONID
							,EXPRESSION_SERVICE,KPIS.CUSTOMERID,KPIS.LOCATIONID, MST.TEMPLATE_ID,GROUPNAME,USERS.USER_NAME,ORIGMST.CREATEDDATE,MST.CREATEDBY
					) A --FOR XML RAW('RULE')
				)
				,
				(
	 
					SELECT ROW_TO_JSON(OUTPUT) AS "Expressions"
					FROM
					(
					SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A)))  AS "Expression"
					FROM
					(
					 SELECT KPIID 			"KPIID"
					 ,KPINAME			"KPIName"
					 ,COALESCE(KPIACTION,'')	"kpiaction"
					 ,COALESCE(KPIACTIONID,0)	"kpiactionid"
					 ,A.CUSTOMERID			"EntityID"
					 ,A.LOCATIONID			"LocationID"
					 , 'KPIID,KPIName,kpiaction,kpiactionid,EntityID,LocationID' "Attribute_list"	
					 ,	( 
						SELECT DISTINCT B.EXPRESSION_SERVICE
						FROM KPIS B 
						WHERE A.KPIID=B.KPIID AND A.KPIACTIONID=B.KPIACTIONID
						)"Expression"
					 FROM KPIS A
					 GROUP BY KPIID,KPIACTIONID,KPIACTION,KPINAME ,CUSTOMERID,LOCATIONID
					)A
					)OUTPUT
					 --FOR XML PATH(''),ROOT('EXPRESSIONS')
				)
				From 
				KPIs AA
				where AA.Correlationid=Main.correlationid
				Group by AA.Correlationid 
			)rules	

		)
 		
		,
			
		( 
			select Row_to_json(alrts) "ALERTS"
			from
			(
				SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "ALERT"
				FROM
				(
				SELECT DISTINCT ALERTSMST.alert_KPI AS "KPI_ID",ALERTSMST.ALERT_ID AS "ALERTID"
				,ALERTSMST.ALERT_DESCRIPTION "ALERTNAME"
				,ALERTACTION AS "ALERTSTATUS"
				, ASTATUS.STATUS "ALERTACTION" 
				,CASE WHEN ALERTSMST.ISMAILCONFIGURED='1' THEN 'EMAIL' ELSE '' END  "ALERTTYPE"
				,EMAILTO AS "MAILTO",EMAILCC AS "MAILCC",EMAILBCC AS "MAILBCC",EMAILSUBJECT AS "MAILSUBJECT",'' AS "MAILBODY"
				,ALERTSMST.CREATEDDATE	"CREATEDDATE"
				,VKM.SOURCEID "SOURCEID"
				,'KPI_ID,ALERTID,ALERTNAME,ALERTSTATUS,ALERTACTION,ALERTTYPE,MAILTO,MAILCC,MAILBCC,MAILSUBJECT,MAILBODY,CREATEDDATE,SOURCEID' "Attribute_list"
				FROM 
				KPIS VKM 
				JOIN 
				KBALERTMST ALERTSMST ON VKM.KPIID=ALERTSMST.ALERT_KPI
				Left outer Join kbeventemaildetails ALERTS on ALERTS.Eventid=alertsmst.alert_id	
				Left outer JOIN KBEventemailmst mails ON  ALERTS.templateid = mails.templateid and lower(mails.type)='alert'
				JOIN KBALERTACTION  ACTIONS ON ALERTSMST.ALERT_ID=ACTIONS.ALERT_ID
				JOIN KBKPISTATUS ASTATUS ON CAST(ACTIONS.ALERTACTION AS INT)=ASTATUS.STATUSID
				WHERE ACTIONS.ISACTIVE='1'
				)A
				--FOR XML RAW('ALERT'),ROOT('ALERTS')
			) alrts	
		)
		,

		(	 
			SELECT ROW_TO_JSON(METRICDETAILS) AS "metricdetails"
			FROM
			(
				SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(METRIC))) AS "metric"
				FROM
				(
					SELECT METRICS.KPIID "KPIID"
					, CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRIC_ID ELSE ESCREEN.SCREENID END "METRIC_ID"
					, COALESCE(MMST.METRICALIAS,'') "metricaliasname" 
					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRICNAME ELSE ESCREEN.CONTROLTITLE END "METRICNAME"
					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRICDATATYPE ELSE CONTROLDATATYPE END "METRICDATATYPE"
					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.SOURCE_ID ELSE ESCREEN.ENTITYDEFID END "SOURCE_ID"
					,CASE WHEN Upper(TYPE)='MEASURE' THEN 'DS' ELSE 'ENTITY' END "MetricType"
					,CASE WHEN Upper(TYPE)='MEASURE' THEN 0 ELSE ESCREEN.ENTITYDEFID END "ENTITYDEFID"
					,'KPIID,METRIC_ID,metricaliasname,METRICNAME,METRICDATATYPE,SOURCE_ID,MetricType,ENTITYDEFID' "Attribute_list"
					,
						(	
							SELECT ROW_TO_JSON(ACTIONS) AS "ACTIONS"
							FROM
							(
								SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "ACTION"
								FROM
								(
									SELECT MEASURES.KPI_ID "KPIID",STATS.STATUSID "ACTIONID"
									,'KPI_ID,ACTIONID' "Attribute_list"
									FROM
									(
										SELECT DISTINCT COALESCE(KPI.ORIGINALID,KPI.KPI_ID) KPI_ID,A.KPI_ID LKPI_ID
										,CASE WHEN Upper(TYPE)='MEASURE' THEN  C.MEASURE_NAME 
											ELSE ESCREEN1.CONTROLTITLE END  MEASURE_NAME
										,B.RULEACTION,A.ISACTIVE
										FROM KBKPIMEASURE A
										JOIN KBKPIMST KPI ON A.KPI_ID=KPI.KPI_ID and  KPI.source_id=coalesce(VSOURCEID,KPI.source_id)
										JOIN (SELECT KPI_ID,RULEACTION FROM  KBKPIRULE )B ON A.KPI_ID=B.KPI_ID
										LEFT OUTER JOIN KBMEASUREMST C ON A.MEASURE_ID=C.MEASURE_ID AND (A.TEMPLATE_ID=C.TEMPLATE_ID or C.TEMPLATE_ID=1) 
												AND upper(A.TYPE)='MEASURE'
										LEFT OUTER JOIN KBENTITYSCREENCONFIGURATIONMST ESCREEN1 ON A.MEASURE_ID=ESCREEN.SCREENID AND upper(A.TYPE)='ENTITY'
										WHERE  A.ISACTIVE='1'
									) MEASURES
								JOIN 
								KBKPISTATUS STATS ON MEASURES.RULEACTION=STATS.STATUS
								WHERE  Upper(MEASURES.MEASURE_NAME)= CASE WHEN Upper(TYPE)='MEASURE' THEN Upper(MMST.METRICNAME||'_MEASURE') ELSE Upper(ESCREEN.CONTROLTITLE)  END
								AND KPIS.KPI_ID=MEASURES.LKPI_ID
					--AND EXISTS(SELECT 1 FROM @CREATEDBYLIST B WHERE STATS.CREATEDBY=B.CREATEDBY)
							)A
						)ACTIONS
					)
			FROM 
			KPIS METRICS
			JOIN KBMEASUREMST MEASURES ON METRICS.MEASUREID=MEASURES.MEASURE_ID
			JOIN KBKPIMST KPIS ON METRICS.KPIID=COALESCE(ORIGINALID,KPIS.KPI_ID)
			JOIN KBKPIMEASURE MEAS ON METRICS.MEASUREID=MEAS.MEASURE_ID AND KPIS.KPI_ID=MEAS.KPI_ID
			LEFT OUTER JOIN (

					SELECT A. * 
					FROM KBMETRICMST A
					JOIN 
					KBSOURCETYPEMST B ON A.SOURCE_ID=B.SOURCETYPE_ID
					WHERE TEMPLATE_ID=1 AND B.SPOKETYPE='0' 
					AND B.SPOKETYPE='0'
					UNION ALL
					SELECT A.* 
					FROM KBMETRICMST A
					JOIN 
					KBSOURCETYPEMST B ON A.SOURCE_ID=B.SOURCETYPE_ID
					WHERE TEMPLATE_ID=1 AND B.SPOKETYPE='1'
					)MMST 
					ON REPLACE(Upper(METRICS.MEASURENAME),'_MEASURE','')=Upper(MMST.METRICNAME) AND MEASURES.SOURCE_ID=MMST.SOURCE_ID 
					AND Upper(MEAS.TYPE)='MEASURE'
			LEFT OUTER JOIN KBENTITYSCREENCONFIGURATIONMST ESCREEN ON MEAS.MEASURE_ID=ESCREEN.SCREENID AND Upper(MEAS.TYPE)='ENTITY'
			WHERE   MEAS.ISACTIVE='1' 
			GROUP BY METRICS.KPIID,MMST.METRIC_ID, MMST.METRICNAME,MMST.METRICDATATYPE,MMST.SOURCE_ID,KPIS.KPI_ID,MMST.METRICALIAS,ORIGINALID
			,TYPE,SCREENID,ESCREEN.ENTITYDEFID,ESCREEN.CONTROLTITLE,CONTROLDATATYPE
			--FOR XML RAW('METRIC'),ROOT('METRICDETAILS')
			)METRIC

			) AS METRICDETAILS
 			)

			
			,
			(
				SELECT (ROW_TO_JSON(A)) AS "PROBLEM"
				FROM
				(
				SELECT DISTINCT  KPIS.KPIID "KPIID", PROBLEMS.PROBLEM_ID "PROBLEMID", PROBMST.EVENT_SD "PROBLEMDESCRIPTION" ,PROBLEMS.RULEACTION AS "RULEACTION"
				,'KPIID,PROBLEMID,PROBLEMDESCRIPTION,RULEACTION' "Attribute_list"
				FROM 
				KPIS KPIS 
				INNER JOIN KBKPIEVENT PROBLEMS ON KPIS.KPIID=PROBLEMS.KPI_ID AND KPIS.KPIACTION=PROBLEMS.RULEACTION
				LEFT JOIN KBEVENTSMST PROBMST ON PROBLEMS.PROBLEM_ID=PROBMST.EVENT_ID
				)A
			)
 	From kpis Main
	Group by main.Correlationid
	)Corr
 
 )
   ;
 -- 
--  VALERTS := ( 
--  
--  		SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "ALERT"
--  		FROM
--  		(
--  		SELECT DISTINCT ALERTS.KPI_ID AS "KPI_ID",ALERTID AS "ALERTID"
--  		,ALERTSMST.ALERT_DESCRIPTION "ALERTNAME"
--  		,ALERTSTATUS AS "ALERTSTATUS"
--  		, ASTATUS.STATUS "ALERTACTION" 
--  		,CASE WHEN ALERTSMST.ISMAILCONFIGURED='1' THEN 'EMAIL' ELSE '' END  "ALERTTYPE"
--  		,MAILTO AS "MAILTO",MAILCC AS "MAILCC",MAILBCC AS "MAILBCC",MAILSUBJECT AS "MAILSUBJECT",MAILBODY AS "MAILBODY"
--  		,ALERTSMST.CREATEDDATE	"CREATEDDATE"
--  		,VKM.SOURCEID "SOURCEID"
--  		,'KPI_ID,ALERTID,ALERTNAME,ALERTSTATUS,ALERTACTION,ALERTTYPE,MAILTO,MAILCC,MAILBCC,MAILSUBJECT,MAILBODY,CREATEDDATE,SOURCEID' "Attribute_list"
--  		FROM KPIS VKM 
--  		INNER JOIN DBALERTKPIDETAILS ALERTS ON  VKM.KPIID = ALERTS.KPI_ID 
--  		JOIN KBALERTMST ALERTSMST ON ALERTS.ALERTID=ALERTSMST.ALERT_ID
--  		JOIN KBALERTACTION  ACTIONS ON ALERTSMST.ALERT_ID=ACTIONS.ALERT_ID
--  		JOIN KBKPISTATUS ASTATUS ON CAST(ACTIONS.ALERTACTION AS INT)=ASTATUS.STATUSID
--  		LEFT OUTER JOIN KBALERTDETAIL AD ON ALERTS.ALERTID = AD.ALERT_ID 
--  		WHERE ACTIONS.ISACTIVE='1'
--  		)A
--  --FOR XML RAW('ALERT'),ROOT('ALERTS')
--  )
--  
--  ;
--  
--  
--  VMETRICDETAILS:=(	 
-- 			SELECT ROW_TO_JSON(METRICDETAILS) AS "metricdetails"
-- 			FROM
-- 			(
-- 				SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(METRIC))) AS "metric"
-- 				FROM
-- 				(
-- 					SELECT METRICS.KPIID "KPIID"
-- 					, CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRIC_ID ELSE ESCREEN.SCREENID END "METRIC_ID"
-- 					, COALESCE(MMST.METRICALIAS,'') "metricaliasname" 
-- 					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRICNAME ELSE ESCREEN.CONTROLTITLE END "METRICNAME"
-- 					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRICDATATYPE ELSE CONTROLDATATYPE END "METRICDATATYPE"
-- 					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.SOURCE_ID ELSE ESCREEN.ENTITYDEFID END "SOURCE_ID"
-- 					,CASE WHEN Upper(TYPE)='MEASURE' THEN 'DS' ELSE 'ENTITY' END "MetricType"
-- 					,CASE WHEN Upper(TYPE)='MEASURE' THEN 0 ELSE ESCREEN.ENTITYDEFID END "ENTITYDEFID"
-- 					,'KPIID,METRIC_ID,metricaliasname,METRICNAME,METRICDATATYPE,SOURCE_ID,MetricType,ENTITYDEFID' "Attribute_list"
-- 					,
-- 						(	
-- 							SELECT ROW_TO_JSON(ACTIONS) AS "ACTIONS"
-- 							FROM
-- 							(
-- 								SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "ACTION"
-- 								FROM
-- 								(
-- 									SELECT MEASURES.KPI_ID "KPIID",STATS.STATUSID "ACTIONID"
-- 									,'KPI_ID,ACTIONID' "Attribute_list"
-- 									FROM
-- 									(
-- 										SELECT DISTINCT COALESCE(KPI.ORIGINALID,KPI.KPI_ID) KPI_ID,A.KPI_ID LKPI_ID
-- 										,CASE WHEN Upper(TYPE)='MEASURE' THEN  C.MEASURE_NAME 
-- 											ELSE ESCREEN1.CONTROLTITLE END  MEASURE_NAME
-- 										,B.RULEACTION,A.ISACTIVE
-- 										FROM KBKPIMEASURE A
-- 										JOIN KBKPIMST KPI ON A.KPI_ID=KPI.KPI_ID and  KPI.source_id=coalesce(VSOURCEID,KPI.source_id)
-- 										JOIN (SELECT KPI_ID,RULEACTION FROM  KBKPIRULE )B ON A.KPI_ID=B.KPI_ID
-- 										LEFT OUTER JOIN KBMEASUREMST C ON A.MEASURE_ID=C.MEASURE_ID AND (A.TEMPLATE_ID=C.TEMPLATE_ID or C.TEMPLATE_ID=1) 
-- 												AND upper(A.TYPE)='MEASURE'
-- 										LEFT OUTER JOIN KBENTITYSCREENCONFIGURATIONMST ESCREEN1 ON A.MEASURE_ID=ESCREEN.SCREENID AND upper(A.TYPE)='ENTITY'
-- 										WHERE  A.ISACTIVE='1'
-- 									) MEASURES
-- 								JOIN 
-- 								KBKPISTATUS STATS ON MEASURES.RULEACTION=STATS.STATUS
-- 								WHERE  Upper(MEASURES.MEASURE_NAME)= CASE WHEN Upper(TYPE)='MEASURE' THEN Upper(MMST.METRICNAME||'_MEASURE') ELSE Upper(ESCREEN.CONTROLTITLE)  END
-- 								AND KPIS.KPI_ID=MEASURES.LKPI_ID
-- 					--AND EXISTS(SELECT 1 FROM @CREATEDBYLIST B WHERE STATS.CREATEDBY=B.CREATEDBY)
-- 							)A
-- 						)ACTIONS
-- 					)
-- 			FROM 
-- 			KPIS METRICS
-- 			JOIN KBMEASUREMST MEASURES ON METRICS.MEASUREID=MEASURES.MEASURE_ID
-- 			JOIN KBKPIMST KPIS ON METRICS.KPIID=COALESCE(ORIGINALID,KPIS.KPI_ID)
-- 			JOIN KBKPIMEASURE MEAS ON METRICS.MEASUREID=MEAS.MEASURE_ID AND KPIS.KPI_ID=MEAS.KPI_ID
-- 			LEFT OUTER JOIN (
-- 
-- 					SELECT A. * 
-- 					FROM KBMETRICMST A
-- 					JOIN 
-- 					KBSOURCETYPEMST B ON A.SOURCE_ID=B.SOURCETYPE_ID
-- 					WHERE TEMPLATE_ID=1 AND B.SPOKETYPE='0' 
-- 					AND B.SPOKETYPE='0'
-- 					UNION ALL
-- 					SELECT A.* 
-- 					FROM KBMETRICMST A
-- 					JOIN 
-- 					KBSOURCETYPEMST B ON A.SOURCE_ID=B.SOURCETYPE_ID
-- 					WHERE TEMPLATE_ID=1 AND B.SPOKETYPE='1'
-- 					)MMST 
-- 					ON REPLACE(Upper(METRICS.MEASURENAME),'_MEASURE','')=Upper(MMST.METRICNAME) AND MEASURES.SOURCE_ID=MMST.SOURCE_ID 
-- 					AND Upper(MEAS.TYPE)='MEASURE'
-- 			LEFT OUTER JOIN KBENTITYSCREENCONFIGURATIONMST ESCREEN ON MEAS.MEASURE_ID=ESCREEN.SCREENID AND Upper(MEAS.TYPE)='ENTITY'
-- 			WHERE   MEAS.ISACTIVE='1' 
-- 			GROUP BY METRICS.KPIID,MMST.METRIC_ID, MMST.METRICNAME,MMST.METRICDATATYPE,MMST.SOURCE_ID,KPIS.KPI_ID,MMST.METRICALIAS,ORIGINALID
-- 			,TYPE,SCREENID,ESCREEN.ENTITYDEFID,ESCREEN.CONTROLTITLE,CONTROLDATATYPE
-- 			--FOR XML RAW('METRIC'),ROOT('METRICDETAILS')
-- 			)METRIC
-- 
-- 			) AS METRICDETAILS
--  			);
--  
 -- VPROBLEMS:=(
--  		SELECT (ROW_TO_JSON(A)) AS "PROBLEM"
-- 		FROM
-- 		(
-- 		SELECT DISTINCT  KPIS.KPIID "KPIID", PROBLEMS.PROBLEM_ID "PROBLEMID", PROBMST.EVENT_SD "PROBLEMDESCRIPTION" ,PROBLEMS.RULEACTION AS "RULEACTION"
-- 		,'KPIID,PROBLEMID,PROBLEMDESCRIPTION,RULEACTION' "Attribute_list"
-- 		FROM 
-- 		KPIS KPIS 
-- 		INNER JOIN KBKPIEVENT PROBLEMS ON KPIS.KPIID=PROBLEMS.KPI_ID AND KPIS.KPIACTION=PROBLEMS.RULEACTION
-- 		LEFT JOIN KBEVENTSMST PROBMST ON PROBLEMS.PROBLEM_ID=PROBMST.EVENT_ID
-- 		)A
--  
-- 	  );
 
 RETURN(	
	SELECT ROW_TO_JSON(OUTPUT)
 	FROM
 	(
 	SELECT ROW_TO_JSON(A) AS "Correlations"
 	FROM
 	(
 	SELECT   VKPISLIST AS "Correlation"
 	--VEXPRESSIONS AS "EXPRESSIONS",VALERTS AS "ALERTS",VPROBLEMS "PROBLEMS",VMETRICDETAILS  AS "METRICDETAILS"	
 	)A
 	)OUTPUT
 );

end;

End

$function$;

ALTER FUNCTION public.usp_dbservgetkpidetails_new(json)
    OWNER TO postgres;

