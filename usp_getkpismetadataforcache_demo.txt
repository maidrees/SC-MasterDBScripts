-- Function: usp_getkpismetadataforcache(json)

-- DROP FUNCTION usp_getkpismetadataforcache(json);

CREATE OR REPLACE FUNCTION usp_getkpismetadataforcache(input json)
  RETURNS json AS
$BODY$

DECLARE 
	VTRAN		VARCHAR(30);
	VCreated_By	int;
	VEntityid	int;
	VID		int;
	VSOURCEID	int;
	VExpressions	json;
	VKpisList	json;
	VAlerts		json;
	VProblems	json;
	Vmetricdetails	json;
	VKpi_id		int;
	VActiondate	timestamp default(current_timestamp at time zone 'utc')	;
	
Begin

drop table if exists temps;
drop table if exists Createdbylist;
drop table if exists KPIs;

create temp table temps(id serial,ivalue json);
create temp table Createdbylist(recordid serial,createdby int);

create temp table KPIs (KPIID Bigint,MEASURE Varchar(500),KPIName Varchar(500),KPIDescription Varchar(1000),KPIAction Varchar(100),KPIActionID int,
RuleOperator Varchar(500),RULEVALUE1 Varchar(500),RuleValue2 Varchar(500),ruleBoolOperator Varchar(500)
,KPIRuleId bigint,MeasureId  Bigint,Measurename varchar(512),lastkpistatus varchar(100),KPITypeID int,KPIType varchar(100),FORMULAMEASURE varchar(1000)
,FORMULA_CHK bit,TEMPLATE_ID int,SourceId int,EXPRESSION_SERVICE text,CustomerID bigint, LocationId bigint,GroupName varchar(255));


                       
insert into temps(ivalue)
select input;

select ivalue->'KPI'->> 'TRANSTYPE' 
,ivalue->'KPI'->> 'LoginId'
,ivalue->'KPI'->> 'ENTITYID'
,ivalue->'KPI'->> 'SOURCEID'
,ivalue->'KPI'->> 'VID'
,ivalue->'KPI'->> 'KPIID'
into VTRAN,VCreated_By,VEntityid,VSOURCEID, VID,VKpi_id
from temps 
limit 1;


--if VEntityid >0 and VEntityid is not null then
-- Begin
-- 
-- 	Select licenses.VID into VID
-- 	from
-- 	(Select CREATEDBY from KBEntities where ENTITY_ID=VEntityid) users
-- 	Join (select UserID,CustomerID from KBUserCustomerMapping) cust on users.CREATEDBY=cust.UserID
-- 	Join ( Select CustomerId, LicenseKeyId VID from KBLicenseDetails) licenses on cust.CustomerID=licenses.CustomerId
-- ;
-- End;
-- Else
-- Begin
-- 
-- 	Select  licenses.VID into VID
-- 	from
-- 	(Select CREATEDBY from KBSourceTypeMst where SOURCETYPE_ID=@SourceID) users
-- 	Join (select UserID,CustomerID from KBUserCustomerMapping) cust on users.CREATEDBY=cust.UserID
-- 	Join ( Select CustomerId, LicenseKeyId VID from KBLicenseDetails) licenses on cust.CustomerID=licenses.CustomerId
-- 	
-- 
-- End;
--end if;

if vid is not null and coalesce(vid,0)!=0 then
Begin

	Insert into Createdbylist(createdby)
	Select UserID 
	from KBUserCustomerMapping users
	Join
	(Select distinct CustomerId from KBSpokeLicenseDetails where LicenseKeyId=VId and CustomerId!=1) customers on users.CustomerID=customers.CustomerId
	where users.UserID!=1;
End;
Else
Begin 
	Insert into Createdbylist(createdby)
	Select UserID 
	from KBUserCustomerMapping users
	Join
	(Select distinct CustomerId from KBSpokeLicenseDetails where CustomerId!=1) customers on users.CustomerID=customers.CustomerId
	where users.UserID!=1;
end;

end if;


If Lower(VTran)='getentitykpis' then
begin 


 INSERT INTO KPIS(
		KPIID,MEASURE, KPINAME,KPIDESCRIPTION,KPIACTION,KPIACTIONID,RULEOPERATOR,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR,KPIRULEID,MEASUREID
 		,MEASURENAME,LASTKPISTATUS,KPITYPEID,KPITYPE,FORMULAMEASURE,FORMULA_CHK,TEMPLATE_ID,SOURCEID,EXPRESSION_SERVICE,CUSTOMERID,GROUPNAME,LOCATIONID
		)
 
 		SELECT DISTINCT  --TOP 2
 		VKM.KPIID AS "KPIID"
 		,VKM.MEASURE AS "MEASURE"
 		,VKM.KPINAME AS "KPINAME"
 		,NULL AS "KPIDESC"
 		,VKM.ACTION AS "KPIACTION",VKM.ACTIONID AS "KPIACTIONID",
 		VKM.RULEOPERATOR AS "RULEOPERATOR"
 		,VKM.RULEVALUE1 AS "VALUE1"
 		,VKM.RULEVALUE2 AS "VALUE2"
 		,VKM.RULEBOOLOPERATOR AS "RULEBOOL"
 		,VKM.KPIRULEID "KPIRULEID"
 		,VAM.MEASUREID  "MEASUREID"
 		,VAM.MEASURE "MEASURENAME"
 		,'2' AS "LASTKPISTATUS"
 		,KPITYPEID "KPITYPEID"
 		,KPITYPE "KPITYPE"
 		,FORMULAMEASURE
 		,CAST(FORMULA_CHK AS BIT)
 		,VKM.TEMPLATE_ID "TEMPLATE_ID"
 		,VKM.SOURCEID "SOURCEID"
 		, EXPRESSION_SERVICE
 		,VUC.CUSTOMERID ENTITYID
 		,GROUPNAME AS GROUPINGNAME
 		,VUC.LOCATIONID LOCATIONID
 		FROM 
 		( 
 
 			SELECT   KPIID,MEASURE,MEASURE_ID, KPINAME,KPIRULEID,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR,RULEOPERATOR,ACTION,ACTIONID,TEMPLATE_ID 
 			,KPITYPEID,KPITYPE,FORMULAMEASURE,FORMULA_CHK,SOURCE_ID SOURCEID,COALESCE(EXPRESSION_SERVICE,'') EXPRESSION_SERVICE,GROUPNAME
 			FROM 
 			(
 				SELECT DISTINCT 
 				COALESCE(ORIGINALID,AG.KPI_ID) AS KPIID,GM.SOURCE_ID ,AG.RULEMEASURE AS MEASURE, MEASUREMST.MEASURE_ID, GM.KPI_NAME AS KPINAME
 					  , GM.KPI_DESCRIPTION AS KPIDESCRIPTION
 					, AG.RULEACTION AS ACTION
 				      , KSTATUS.STATUSID AS ACTIONID
 				      , COALESCE(TGROUP.ACTION_CUSTOMIZE_NAME,'NONE') GROUPNAME
 				      , AG.RULEOPERATOR, AG.RULEVALUE1, AG.RULEVALUE2, AG.ROOLBOOLOPERATOR AS RULEBOOLOPERATOR, AG.KPIRULE_ID AS KPIRULEID,
 				       TM.TEMPLATE_ID, TM.TEMPLATE_NAME,GM.KPITYPE KPITYPEID,KPITYPES.KPITYPENAME KPITYPE, MEASUREMST.FORMULAMEASURE, MEASUREMST.FORMULA_CHK, MEASUREMST.FORMULATITLE
 				       ,AG.EXPRESSION_SERVICE  EXPRESSION_SERVICE
 				   ,GM.CORRELATIONID, GM.ISMULTIDATASOURCE
 					   ,GM.CREATEDBY
 					   ,KSTATUS.CREATEDBY KPISTATUSCREATEDBY
 					FROM         
 					KBKPIMST AS GM 
 					LEFT JOIN KBKPIRULE AS AG  ON AG.KPI_ID = GM.KPI_ID 
 					LEFT JOIN KBTEMPLATEGROUPINGMST TGROUP ON AG.ACTION_GROUPID=TGROUP.GROUPDETAILID
 					LEFT JOIN KBTEMPLATEMST AS TM  ON TM.TEMPLATE_ID = GM.TEMPLATE_ID 
 					LEFT JOIN (
 								SELECT MEASURE_ID,KPI_ID ,TEMPLATE_ID
 								FROM   KBKPIMEASURE 
 							) AS KME  ON KME.KPI_ID = GM.KPI_ID AND GM.TEMPLATE_ID=KME.TEMPLATE_ID
 					
 					  LEFT JOIN KBMEASUREMST AS MEASUREMST  ON CAST(AG.RULEMEASURE AS INT) = MEASUREMST.MEASURE_ID
 					  LEFT OUTER JOIN KBKPITYPEMST KPITYPES   ON GM.KPITYPE=KPITYPES.KPITYPEID
 					  LEFT OUTER JOIN KBKPISTATUS KSTATUS 	 ON AG.RULEACTION=KSTATUS.STATUS
 					  WHERE AG.ISACTIVE='1' AND GM.ISACTIVE='1'   and coalesce(originalid,gm.kpi_id)=coalesce(VKpi_id,originalid,gm.kpi_id) 

						
 
 			)   VWKPI
 			WHERE EXISTS 
 					( 
 							SELECT 1 
 							FROM 
 							(
 								SELECT USERID
 								FROM 
 								(
 									SELECT createdby USERID
 									from createdbylist b  
 									
 								) AA
 							) A
 							WHERE USERID= createdby
 					)
 		) VKM
 		INNER JOIN  (
				SELECT DISTINCT 
			       KM.KPI_ID AS KPIID, NULL AS AUDIENCEID, NULL AS LOGINID,  CM.ENTITY_ID AS CUSTOMERID,'' LATITUDE,'' LONGITUDE, CP.PHONENO AS PHONENUMBER
			       , KM.KPI_NAME AS KPINAME, KM.SOURCE_ID, KM.TEMPLATE_ID AS TEMPLATEID, TM.TEMPLATE_NAME AS TEMPLATENAME ,LM.LOCATION_ID AS LOCATIONID, LM.LOCATION_NAME AS LOCATIONNAME
			       , CM.ENTITY_NAME CUSTOMER_NAME,km.TEMPLATE_ID
				FROM    KBENTITIES AS CM 
				INNER JOIN KBENTITYLOCATIONS AS LM  ON CM.ENTITY_ID = LM.ENTITY_ID 
				LEFT OUTER JOIN	KBENTITYPHONE AS CP ON LM.LOCATION_ID = CP.LOCATION_ID AND LM.ENTITY_ID = CP.ENTITY_ID 
				LEFT OUTER JOIN	 kbentitykpis AS CT ON LM.ENTITY_ID = CT.ENTITY_ID 
				INNER JOIN  KBKPIMST AS KM ON CT.kpi_ID = coalesce(originalid,KM.kpi_ID) --and KM.source_id=VSOURCEID
				INNER JOIN (SELECT     TEMPLATE_ID, TEMPLATE_NAME FROM KBTEMPLATEMST ) AS TM ON km.TEMPLATE_ID = TM.TEMPLATE_ID 
				where coalesce(CT.isidentifiermatched,'0')='1'
 			) VUC ON VKM.KPIID=VUC.KPIID 
		INNER JOIN ( 
				SELECT MEASUREID,MEASURE,TEMPLATEID,KPIID,CUSTOMER_ID,LOCATIONID 
				FROM  
					(
					SELECT KM.KPI_ID KPIID, KM.KPI_NAME AS KPINAME, MM.MEASURE_ID AS MEASUREID, MM.MEASURE_NAME AS MEASURE
					, TM.TEMPLATE_ID AS TEMPLATEID, TM.TEMPLATE_NAME AS TEMPLATENAME, LM.LOCATION_ID AS LOCATIONID, LM.LOCATION_NAME AS LOCATIONNAME
					, CM.ENTITY_ID CUSTOMER_ID, CM.ENTITY_NAME AS CUSTOMERNAME,CORRELATIONID,ISMULTIDATASOURCE			
					FROM        
						(SELECT ENTITY_ID,ENTITY_NAME FROM   KBENTITIES   WHERE ISACTIVE='1' OR ENTITY_ID=1) AS CM
						INNER JOIN (SELECT ENTITY_ID, LOCATION_ID, LOCATION_NAME FROM KBENTITYLOCATIONS ) AS LM  ON CM.ENTITY_ID = LM.ENTITY_ID 
						INNER JOIN kbentitykpis AS KCT  ON LM.ENTITY_ID=KCT.ENTITY_ID
						LEFT JOIN (
							SELECT COALESCE(ORIGINALID,KPI_ID) KPI_ID,KPI_ID LATESTKPIID, KPI_NAME,TEMPLATE_ID,CORRELATIONID,ISMULTIDATASOURCE
							FROM  KBKPIMST  
							WHERE ISACTIVE='1'
								  ) AS KM  ON KM.kpi_ID = KCT.kpi_id
										
						LEFT JOIN (

							SELECT MEASURE_ID,KPI_ID , TEMPLATE_ID
							FROM   KBKPIMEASURE 
							WHERE ISACTIVE='1'
							) AS KME  ON KME.KPI_ID = KM.LATESTKPIID AND KM.TEMPLATE_ID=KME.TEMPLATE_ID
						INNER JOIN (SELECT TEMPLATE_ID, TEMPLATE_NAME FROM  KBTEMPLATEMST  )AS TM  ON TM.TEMPLATE_ID = KM.TEMPLATE_ID 	

						LEFT JOIN KBMEASUREMST AS MM  ON MM.MEASURE_ID = KME.MEASURE_ID
						where coalesce(KCT.isidentifiermatched,'0')='1'
						) VWUSERCUSTOMER  
			) VAM ON VAM.TEMPLATEID=VKM.TEMPLATE_ID --AND VAM.MEASUREID=VKM.MEASURE_ID
 			AND VKM.KPIID = VAM.KPIID
 				AND VUC.CUSTOMERID = VAM.CUSTOMER_ID --AND VUC.LOCATIONID=VAM.LOCATIONID 
			where VUC.CustomerId=VEntityid
 		ORDER BY VKM.KPIID;
 
 -- return(Select  ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A)))from(SELECT  KPIID AS "kpiid"
--  		,MST.SOURCE_ID AS "sourceid"
--  		,SOURCES.ALIAS AS "sourcename"
--  		,MEASURE	"measure"
--  		,KPINAME	"kpiname"	
--  		,MST.KPI_DESCRIPTION AS "kpidesc"
--  		,KPIACTION	"kpiaction"
--  		,KPIACTIONID  "kpiactionid"
--  		,RULEOPERATOR	"ruleoperator"
--  		,RULEVALUE1 AS "value1"
--  		,RULEVALUE2 AS "value2"
--  		,COALESCE(RULEBOOLOPERATOR,'') AS "rulebool"
--  		,KPIRULEID	"kpiruleid"
--  		,MEASUREID	"measureid"
--  		,LASTKPISTATUS	"lastkpistatus"
--  		,COALESCE(KPIS.KPITYPE,'NORMAL')  AS "kpitype"
--  		, COALESCE(KPITYPEID,1) AS "kpitypeid"
--  		,EXPRESSION_SERVICE	"EXPRESSION_SERVICE"
--  		,MST.TEMPLATE_ID "TEMPLATE_ID"
--  		,CUSTOMERID "EntityID"
--  		,LOCATIONID "LocationID"
--  		 ,CASE WHEN GROUPNAME='' OR GROUPNAME IS NULL THEN 'NONE' ELSE GROUPNAME END AS "groupingname"
--  		 ,USERS.USER_NAME "CreatedBy"
--  		 ,ORIGMST.CREATEDDATE "CreatedDate"
-- 		,(
-- 		SELECT LICENSEKEYID "licensekeyid"
-- 		FROM KBLICENSEDETAILS MAPS 
-- 		WHERE CUSTOMERID= (SELECT CUSTOMERID FROM KBUSERCUSTOMERMAPPING WHERE USERID= MST.CREATEDBY)
-- 		LIMIT 1
-- 		) "VID"
-- 		,(
-- 			select 
-- 			Row_to_json(a) "schedule"
-- 			from
-- 			(
-- 				select kpi_id, fromdate,todate,uom 
-- 				from kbkpischedules schedule
-- 				where schedule.kpi_id=KPIS.KPIID and isactive='1'
-- 			) a	
-- 		)
-- 		,geofence "geofence", geo_logicaloperator "geo_logicaloperator"
-- 		,'kpiid,sourceid,sourcename,measure,kpiname,kpidesc,kpiaction,kpiactionid,ruleoperator,value1,value2,rulebool,kpiruleid,measureid,lastkpistatus,kpitypeid,kpitype,'
-- 		||'EXPRESSION_SERVICE,TEMPLATE_ID,EntityID,LocationID,groupingname,CreatedBy,CreatedDate,VID' "Attribute_list"
--  		FROM (
--  				SELECT DISTINCT KPIID,MEASUREID,SOURCEID, A.TEMPLATE_ID,MEASURE,KPINAME,KPIACTION, A.RULEOPERATOR, A.RULEVALUE1,A.RULEVALUE2,A.RULEBOOLOPERATOR
--  				,KPIRULEID,LASTKPISTATUS,KPITYPE,KPITYPEID,KPIACTIONID,A.EXPRESSION_SERVICE,CUSTOMERID,LOCATIONID,GROUPNAME, cast(B.geofence as text) geofence, B.geo_logicaloperator
--  				 FROM KPIS A
--  				 Join kbkpirule B on A.kpiid=B.kpi_id
--  				 where B.isactive='1'
--  			) KPIS   
--  		INNER JOIN KBKPIMST MST ON KPIS.KPIID=COALESCE(MST.ORIGINALID,MST.KPI_ID)
--  		INNER JOIN KBKPIMST ORIGMST ON COALESCE(MST.ORIGINALID,MST.KPI_ID)=ORIGMST.KPI_ID
--  		left JOIN KBKPIMEASURE A ON A.KPI_ID=MST.KPI_ID
--  		Left outer JOIN KBMEASUREMST B ON B.MEASURE_ID=A.MEASURE_ID AND KPIS.MEASUREID=B.MEASURE_ID
--  		LEFT OUTER JOIN KBSOURCETYPEMST SOURCES ON MST.SOURCE_ID=SOURCES.SOURCETYPE_ID
--  		LEFT OUTER JOIN KBUSERMST USERS ON ORIGMST.CREATEDBY=USERS.USER_ID
--  		WHERE  MST.ISACTIVE='1' AND MST.source_id=VSOURCEID and ORIGMST.source_id=VSOURCEID 
--  		--(B.ISACTIVE=2 OR B.ISACTIVE=1) AND
--  		and EXISTS(SELECT 1 FROM CREATEDBYLIST B WHERE MST.CREATEDBY=B.CREATEDBY)
--  		 GROUP BY SOURCEID,KPIS.TEMPLATE_ID, KPIID,MST.SOURCE_ID,SOURCES.ALIAS,MEASURE,KPINAME,MST.KPI_DESCRIPTION,KPIACTION,RULEOPERATOR,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR
--  				,KPIRULEID,MEASUREID,LASTKPISTATUS,KPIS.KPITYPE,KPITYPEID,B.FORMULAMEASURE,KPIACTIONID
--  				,EXPRESSION_SERVICE,KPIS.CUSTOMERID,KPIS.LOCATIONID, MST.TEMPLATE_ID,GROUPNAME,USERS.USER_NAME,ORIGMST.CREATEDDATE,MST.CREATEDBY
--  				,geofence,geo_logicaloperator)a);


 VEXPRESSIONS:=(
 
 		
 		SELECT ROW_TO_JSON(OUTPUT) AS "Expressions"
 		FROM
 		(
 		SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A)))  AS "Expression"
 		FROM
 		(
 		 SELECT KPIID 			"KPIID"
 		 ,KPINAME			"KPIName"
 		 ,COALESCE(KPIACTION,'')	"kpiaction"
 		 ,COALESCE(KPIACTIONID,0)	"kpiactionid"
 		 ,A.CUSTOMERID			"EntityID"
 		 ,A.LOCATIONID			"LocationID"
 		 , 'KPIID,KPIName,kpiaction,kpiactionid,EntityID,LocationID' "Attribute_list"	
  		 ,	( 
 			SELECT DISTINCT B.EXPRESSION_SERVICE
 			FROM KPIS B 
 			WHERE A.KPIID=B.KPIID AND A.KPIACTIONID=B.KPIACTIONID
 			)"Expression"
 		 FROM KPIS A
 		 GROUP BY KPIID,KPIACTIONID,KPIACTION,KPINAME ,CUSTOMERID,LOCATIONID
 		)A
 		)OUTPUT
 		 --FOR XML PATH(''),ROOT('EXPRESSIONS')
  );
  
 
 VKPISLIST:=( 
 		SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "rule"
 		FROM
 		(
 		SELECT  KPIID AS "kpiid"
 		,MST.SOURCE_ID AS "sourceid"
 		,SOURCES.ALIAS AS "sourcename"
 		,MEASURE	"measure"
 		,KPINAME	"kpiname"	
 		,MST.KPI_DESCRIPTION AS "kpidesc"
 		,KPIACTION	"kpiaction"
 		,KPIACTIONID  "kpiactionid"
 		,RULEOPERATOR	"ruleoperator"
 		,RULEVALUE1 AS "value1"
 		,RULEVALUE2 AS "value2"
 		,COALESCE(RULEBOOLOPERATOR,'') AS "rulebool"
 		,KPIRULEID	"kpiruleid"
 		,MEASUREID	"measureid"
 		,LASTKPISTATUS	"lastkpistatus"
 		,COALESCE(KPIS.KPITYPE,'NORMAL')  AS "kpitype"
 		, COALESCE(KPITYPEID,1) AS "kpitypeid"
 		,EXPRESSION_SERVICE	"EXPRESSION_SERVICE"
 		,MST.TEMPLATE_ID "TEMPLATE_ID"
 		,CUSTOMERID "EntityID"
 		,LOCATIONID "LocationID"
 		 ,CASE WHEN GROUPNAME='' OR GROUPNAME IS NULL THEN 'NONE' ELSE GROUPNAME END AS "groupingname"
 		 ,USERS.USER_NAME "CreatedBy"
 		 ,ORIGMST.CREATEDDATE "CreatedDate"
		,(
		SELECT LICENSEKEYID "licensekeyid"
		FROM KBLICENSEDETAILS MAPS 
		WHERE CUSTOMERID= (SELECT CUSTOMERID FROM KBUSERCUSTOMERMAPPING WHERE USERID= MST.CREATEDBY)
		LIMIT 1
		) "VID"
		,(
			select 
			Row_to_json(a) "schedule"
			from
			(
				select kpi_id, fromdate,todate,uom 
				from kbkpischedules schedule
				where schedule.kpi_id=KPIS.KPIID and isactive='1'
			) a	
		)
		,geofence "geofence", geo_logicaloperator "geo_logicaloperator"
		,'kpiid,sourceid,sourcename,measure,kpiname,kpidesc,kpiaction,kpiactionid,ruleoperator,value1,value2,rulebool,kpiruleid,measureid,lastkpistatus,kpitypeid,kpitype,'
		||'EXPRESSION_SERVICE,TEMPLATE_ID,EntityID,LocationID,groupingname,CreatedBy,CreatedDate,VID' "Attribute_list"
 		FROM (
 				SELECT DISTINCT KPIID,MEASUREID,SOURCEID, A.TEMPLATE_ID,MEASURE,KPINAME,KPIACTION, A.RULEOPERATOR, A.RULEVALUE1,A.RULEVALUE2,A.RULEBOOLOPERATOR
 				,KPIRULEID,LASTKPISTATUS,A.KPITYPE,KPITYPEID,KPIACTIONID,A.EXPRESSION_SERVICE,CUSTOMERID,LOCATIONID,GROUPNAME, cast(B.geofence as text) geofence, B.geo_logicaloperator
 				 FROM KPIS A
 				 join kbkpimst kp on A.kpiid=COALESCE(kp.ORIGINALID,kp.KPI_ID)
 				 Join kbkpirule B on kp.kpi_id=B.kpi_id
 				 where B.isactive='1'
 			) KPIS   
 		INNER JOIN KBKPIMST MST ON KPIS.KPIID=COALESCE(MST.ORIGINALID,MST.KPI_ID)
 		INNER JOIN KBKPIMST ORIGMST ON COALESCE(MST.ORIGINALID,MST.KPI_ID)=ORIGMST.KPI_ID
 		left JOIN KBKPIMEASURE A ON A.KPI_ID=MST.KPI_ID
 		Left outer JOIN KBMEASUREMST B ON B.MEASURE_ID=A.MEASURE_ID AND KPIS.MEASUREID=B.MEASURE_ID
 		LEFT OUTER JOIN KBSOURCETYPEMST SOURCES ON MST.SOURCE_ID=SOURCES.SOURCETYPE_ID
 		LEFT OUTER JOIN KBUSERMST USERS ON ORIGMST.CREATEDBY=USERS.USER_ID
 		WHERE  MST.ISACTIVE='1' 
 		--(B.ISACTIVE=2 OR B.ISACTIVE=1) AND
 		and EXISTS(SELECT 1 FROM CREATEDBYLIST B WHERE MST.CREATEDBY=B.CREATEDBY)
 		 GROUP BY SOURCEID,KPIS.TEMPLATE_ID, KPIID,MST.SOURCE_ID,SOURCES.ALIAS,MEASURE,KPINAME,MST.KPI_DESCRIPTION,KPIACTION,RULEOPERATOR,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR
 				,KPIRULEID,MEASUREID,LASTKPISTATUS,KPIS.KPITYPE,KPITYPEID,B.FORMULAMEASURE,KPIACTIONID
 				,EXPRESSION_SERVICE,KPIS.CUSTOMERID,KPIS.LOCATIONID, MST.TEMPLATE_ID,GROUPNAME,USERS.USER_NAME,ORIGMST.CREATEDDATE,MST.CREATEDBY
 				,geofence,geo_logicaloperator
 		) A --FOR XML RAW('RULE')
 
 )
   ;
  
 VALERTS := ( 
 
		select Row_to_json(alt)
		From
		(
 		SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "ALERT"
 		FROM
 		(
 		SELECT DISTINCT 
		ALERTSMST.ALERT_KPI AS "KPI_ID"
		,ALERTSMST.ALERT_ID AS "ALERTID"
		,ALERTSMST.ALERT_DESCRIPTION "ALERTNAME"
		,ACTIONS.ALERTACTION AS "ALERTSTATUS"
		,ASTATUS.STATUS "ALERTACTION" 
		,coalesce(CASE WHEN ALERTSMST.ISMAILCONFIGURED='1' THEN 'EMAIL' end,'') ||','|| coalesce(CASE when ALERTSMST.ISAPICONFIGURED='1' then 'API' END,'')
			||','|| Coalesce(CASE when ALERTSMST.ISSMSCONFIGURED='1' then 'SMS' END ,'') "ALERTTYPE"
		,EMAILTO AS "MAILTO",EMAILCC AS "MAILCC",EMAILBCC AS "MAILBCC",EMAILSUBJECT AS "MAILSUBJECT"
		,'' AS "MAILBODY"
		,ALERTSMST.CREATEDDATE	"CREATEDDATE"
		,VKM.SOURCEID "SOURCEID"
		,'KPI_ID,ALERTID,ALERTNAME,ALERTSTATUS,ALERTACTION,ALERTTYPE,MAILTO,MAILCC,MAILBCC,MAILSUBJECT,MAILBODY,CREATEDDATE,SOURCEID' "Attribute_list"
		FROM 
		KPIS VKM 
		JOIN 
		KBALERTMST ALERTSMST ON VKM.KPIID=ALERTSMST.ALERT_KPI
		Left outer Join kbeventemaildetails ALERTS on ALERTS.Eventid=alertsmst.alert_id	
		Left outer JOIN KBEventemailmst mails ON  ALERTS.templateid = mails.templateid and lower(mails.type)='alert'
		JOIN KBALERTACTION  ACTIONS ON ALERTSMST.ALERT_ID=ACTIONS.ALERT_ID
		JOIN KBKPISTATUS ASTATUS ON CAST(ACTIONS.ALERTACTION AS INT)=ASTATUS.STATUSID
		WHERE ACTIONS.ISACTIVE='1'

 		)A
 		)alt
 --FOR XML RAW('ALERT'),ROOT('ALERTS')
 )
 
 ;
 
 
 VMETRICDETAILS:=(	 
			SELECT ROW_TO_JSON(METRICDETAILS) AS "metricdetails"
			FROM
			(
				SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(METRIC))) AS "metric"
				FROM
				(
					SELECT METRICS.KPIID "KPIID"
					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRIC_ID ELSE ESCREEN.SCREENID END "METRIC_ID"
					,COALESCE(MMST.METRICALIAS,'') "metricaliasname" 
					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRICNAME ELSE ESCREEN.CONTROLTITLE END "METRICNAME"
					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRICDATATYPE ELSE CONTROLDATATYPE END "METRICDATATYPE"
					,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.SOURCE_ID ELSE ESCREEN.ENTITYDEFID END "SOURCE_ID"
					,CASE WHEN Upper(TYPE)='MEASURE' THEN 'DS' ELSE 'ENTITY' END "MetricType"
					,CASE WHEN Upper(TYPE)='MEASURE' THEN 0 ELSE ESCREEN.ENTITYDEFID END "ENTITYDEFID"
					,'KPIID,METRIC_ID,metricaliasname,METRICNAME,METRICDATATYPE,SOURCE_ID,MetricType,ENTITYDEFID' "Attribute_list"
					,
					(	
						SELECT ROW_TO_JSON(ACTIONS) AS "ACTIONS"
						FROM
						(
							SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "ACTION"
							FROM
							(
								SELECT MEASURES.KPI_ID "KPIID",STATS.STATUSID "ACTIONID"
								,'KPI_ID,ACTIONID' "Attribute_list"
								FROM
								(
									SELECT DISTINCT COALESCE(KPI.ORIGINALID,KPI.KPI_ID) KPI_ID,A.KPI_ID LKPI_ID
									,CASE WHEN upper(TYPE)='MEASURE' 
									THEN  C.MEASURE_NAME ELSE ESCREEN1.CONTROLTITLE END  MEASURE_NAME
									,B.RULEACTION,A.ISACTIVE
									FROM KBKPIMEASURE A
									JOIN KBKPIMST KPI ON A.KPI_ID=KPI.KPI_ID 
									JOIN (SELECT KPI_ID,RULEACTION FROM  KBKPIRULE )B ON A.KPI_ID=B.KPI_ID
									LEFT OUTER JOIN KBMEASUREMST C ON A.MEASURE_ID=C.MEASURE_ID 
										--AND A.TEMPLATE_ID=C.TEMPLATE_ID 
										AND upper(A.TYPE)='MEASURE'
									LEFT OUTER JOIN KBENTITYSCREENCONFIGURATIONMST ESCREEN1 ON A.MEASURE_ID=ESCREEN.SCREENID 
										AND upper(A.TYPE)='ENTITY'
									WHERE A.TEMPLATE_ID=2  AND A.ISACTIVE='1'
								) MEASURES
								JOIN 
								KBKPISTATUS STATS ON MEASURES.RULEACTION=STATS.STATUS
								WHERE  MEASURES.MEASURE_NAME= CASE WHEN upper(TYPE)='MEASURE' THEN MMST.METRICNAME||'_Measure' 
									ELSE ESCREEN.CONTROLTITLE  END
								AND KPIS.KPI_ID=MEASURES.LKPI_ID
								--AND EXISTS(SELECT 1 FROM CREATEDBYLIST B WHERE STATS.CREATEDBY=B.CREATEDBY)
							)A
						)ACTIONS
					)
			FROM 
			KPIS METRICS
			JOIN KBMEASUREMST MEASURES ON METRICS.MEASUREID=MEASURES.MEASURE_ID
			JOIN KBKPIMST KPIS ON METRICS.KPIID=COALESCE(ORIGINALID,KPIS.KPI_ID)
			JOIN KBKPIMEASURE MEAS ON METRICS.MEASUREID=MEAS.MEASURE_ID AND KPIS.KPI_ID=MEAS.KPI_ID
			LEFT OUTER JOIN (

					SELECT measure_id metric_id,Metricname,  metricalias, metricdatatype, metrics.source_id
					FROM 
					kbmetricmst metrics
					Join 
					kbmeasuremst A on metrics.metricname||'_Measure'=A.measure_name and metrics.source_id=A.source_id
					JOIN 
					KBSOURCETYPEMST B ON A.SOURCE_ID=B.SOURCETYPE_ID
					WHERE metrics.TEMPLATE_ID=1 AND B.SPOKETYPE='0' 
					AND B.SPOKETYPE='0'
					UNION ALL
					SELECT measure_id metric_id,Metricname,  metricalias, metricdatatype, metrics.source_id 
					FROM 
					kbmetricmst metrics
					Join 
					kbmeasuremst A on metrics.metricname||'_Measure'=A.measure_name and metrics.source_id=A.source_id
					JOIN 
					KBSOURCETYPEMST B ON A.SOURCE_ID=B.SOURCETYPE_ID
					WHERE metrics.TEMPLATE_ID=1 AND B.SPOKETYPE='1'
					)MMST 
					ON REPLACE(METRICS.MEASURENAME,'_Measure','')=MMST.METRICNAME AND MEASURES.SOURCE_ID=MMST.SOURCE_ID 
					AND Upper(MEAS.TYPE)='MEASURE'
			LEFT OUTER JOIN KBENTITYSCREENCONFIGURATIONMST ESCREEN ON MEAS.MEASURE_ID=ESCREEN.SCREENID AND upper(MEAS.TYPE)='ENTITY'
			where kpis.isactive=1
			GROUP BY METRICS.KPIID,MMST.METRIC_ID, MMST.METRICNAME,MMST.METRICDATATYPE,MMST.SOURCE_ID,KPIS.KPI_ID,MMST.METRICALIAS,ORIGINALID
			,TYPE,SCREENID,ESCREEN.ENTITYDEFID,ESCREEN.CONTROLTITLE,CONTROLDATATYPE
			--FOR XML RAW('METRIC'),ROOT('METRICDETAILS')
			)METRIC

			) AS METRICDETAILS
 			);

--return(SELECT ( ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A)))) from(select VMETRICDETAILS)a);
 
 VPROBLEMS:=(
 		SELECT (ROW_TO_JSON(A)) AS "PROBLEM"
			FROM
			(
			SELECT DISTINCT  KPIS.KPIID "KPIID", PROBLEMS.PROBLEM_ID "PROBLEMID", PROBMST.EVENT_SD "PROBLEMDESCRIPTION" ,PROBLEMS.RULEACTION AS "RULEACTION"
			,'KPIID,PROBLEMID,PROBLEMDESCRIPTION,RULEACTION' "Attribute_list"
			FROM 
			KPIS KPIS 
			INNER JOIN KBKPIEVENT PROBLEMS ON KPIS.KPIID=PROBLEMS.KPI_ID AND KPIS.KPIACTION=PROBLEMS.RULEACTION
			LEFT JOIN KBEVENTSMST PROBMST ON PROBLEMS.PROBLEM_ID=PROBMST.EVENT_ID
			)A
 
	  );
 
 RETURN(	SELECT ROW_TO_JSON(OUTPUT)
 	FROM
 	(
 	SELECT ROW_TO_JSON(A) AS "ruledetails"
 	FROM
 	(
 	SELECT   VKPISLIST AS "rule",VEXPRESSIONS AS "Expressions",VALERTS AS "ALERTS",VPROBLEMS "PROBLEMS",VMETRICDETAILS  AS "metricdetails"	
 	)A
 	)OUTPUT
 );

end;

ElseIf Lower(VTran)='getsourcekpis' then
begin 

 INSERT INTO KPIS(
		KPIID,MEASURE, KPINAME,KPIDESCRIPTION,KPIACTION,KPIACTIONID,RULEOPERATOR,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR,KPIRULEID,MEASUREID
 		,MEASURENAME,LASTKPISTATUS,KPITYPEID,KPITYPE,FORMULAMEASURE,FORMULA_CHK,TEMPLATE_ID,SOURCEID,EXPRESSION_SERVICE,CUSTOMERID,GROUPNAME,LOCATIONID
		)
 
 		SELECT DISTINCT  --TOP 2
		VKM.KPIID AS "KPIID"
		,VKM.MEASURE AS "MEASURE"
		,VKM.KPINAME AS "KPINAME"
		,NULL AS "KPIDESC"
		,VKM.ACTION AS "KPIACTION",VKM.ACTIONID AS "KPIACTIONID",
		VKM.RULEOPERATOR AS "RULEOPERATOR"
		,VKM.RULEVALUE1 AS "VALUE1"
		,VKM.RULEVALUE2 AS "VALUE2"
		,VKM.RULEBOOLOPERATOR AS "RULEBOOL"
		,VKM.KPIRULEID "KPIRULEID"
		,VKM.MEASURE_ID  "MEASUREID"
		,VKM.MEASURENAME "MEASURENAME"
		,'2' AS "LASTKPISTATUS"
		,KPITYPEID "KPITYPEID"
		,KPITYPE "KPITYPE"
		,FORMULAMEASURE
		,CAST(FORMULA_CHK AS BIT)
		,VKM.TEMPLATE_ID "TEMPLATE_ID"
		,VKM.SOURCEID "SOURCEID"
		, EXPRESSION_SERVICE
		,0 ENTITYID
		,GROUPNAME AS GROUPINGNAME
		,0 locationid
		FROM 
		( 

			SELECT   KPIID,MEASURENAME,MEASURE,MEASURE_ID, KPINAME,KPIRULEID,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR,RULEOPERATOR,ACTION,ACTIONID,TEMPLATE_ID 
			,KPITYPEID,KPITYPE,FORMULAMEASURE,FORMULA_CHK,SOURCE_ID SOURCEID,COALESCE(EXPRESSION_SERVICE,'') EXPRESSION_SERVICE,GROUPNAME,CorrelationID
			FROM 
			(
				SELECT DISTINCT 
				COALESCE(ORIGINALID,AG.KPI_ID) AS KPIID,GM.SOURCE_ID ,AG.RULEMEASURE AS MEASURE --, MEASUREMST.MEASURE_ID
				, GM.KPI_NAME AS KPINAME
					  , GM.KPI_DESCRIPTION AS KPIDESCRIPTION
					, AG.RULEACTION AS ACTION
				      , KSTATUS.STATUSID AS ACTIONID
				      , COALESCE(TGROUP.ACTION_CUSTOMIZE_NAME,'NONE') GROUPNAME
				      , AG.RULEOPERATOR, AG.RULEVALUE1, AG.RULEVALUE2, AG.ROOLBOOLOPERATOR AS RULEBOOLOPERATOR, AG.KPIRULE_ID AS KPIRULEID,
				       TM.TEMPLATE_ID, TM.TEMPLATE_NAME,GM.KPITYPE KPITYPEID,KPITYPES.KPITYPENAME KPITYPE,  MM.FORMULAMEASURE,  MM.FORMULA_CHK,  MM.FORMULATITLE
				       ,AG.EXPRESSION_SERVICE  EXPRESSION_SERVICE
					,GM.CORRELATIONID, GM.ISMULTIDATASOURCE
					   ,GM.CREATEDBY
					   ,KSTATUS.CREATEDBY KPISTATUSCREATEDBY
					   ,MM.MEASURE_ID, MM.MEASURE_NAME AS MEASURENAME
					FROM         
					KBKPIMST AS GM 
					LEFT JOIN KBKPIRULE AS AG  ON AG.KPI_ID = GM.KPI_ID 
					LEFT JOIN KBTEMPLATEGROUPINGMST TGROUP ON AG.ACTION_GROUPID=TGROUP.GROUPDETAILID
					LEFT JOIN KBTEMPLATEMST AS TM  ON TM.TEMPLATE_ID = GM.TEMPLATE_ID 
					JOIN (
						SELECT MEASURE_ID,coalesce(originalid,kpis.KPI_ID) KPI_ID, meas.TEMPLATE_ID
						FROM   KBKPIMEASURE meas
						Join kbkpimst kpis on meas.kpi_id=kpis.kpi_id
						WHERE meas.ISACTIVE='1' and kpis.isactive='1'
					) AS KME  ON KME.KPI_ID =  coalesce( GM.originalid, GM.kpi_id) AND GM.TEMPLATE_ID=KME.TEMPLATE_ID
					JOIN KBMEASUREMST AS MM  ON MM.MEASURE_ID = KME.MEASURE_ID
					  LEFT OUTER JOIN KBKPITYPEMST KPITYPES   ON GM.KPITYPE=KPITYPES.KPITYPEID
					  LEFT OUTER JOIN KBKPISTATUS KSTATUS 	 ON AG.RULEACTION=KSTATUS.STATUS
					  WHERE AG.ISACTIVE='1' AND GM.ISACTIVE='1'  and coalesce(IsMultiDataSource,'0')='0' 
						and not exists(select 1 from kbentitykpis AS CT where CT.kpi_ID = coalesce(GM.originalid,GM.kpi_id) )
						AND GM.SOURCE_ID=VSOURCEID and coalesce(gm.kpi_id,originalid)=coalesce(VKpi_id,originalid,gm.kpi_id) 
					  --AND GM.SOURCE_ID=VSOURCEID


			)   VWKPI
			WHERE EXISTS 
				( 
					SELECT 1 
					FROM 
					(
						SELECT USERID
						FROM 
						(
						 
							SELECT createdby userid 
							from createdbylist
						) AA
					) A
					WHERE USERID= CREATEDBY
				)
		 
		) VKM

 		ORDER BY VKM.KPIID;

 
--   return(Select  ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A)))from(SELECT  KPIID AS "kpiid"
--  		,MST.SOURCE_ID AS "sourceid"
--  		,SOURCES.ALIAS AS "sourcename"
--  		,MEASURE	"measure"
--  		,KPINAME	"kpiname"	
--  		,MST.KPI_DESCRIPTION AS "kpidesc"
--  		,KPIACTION	"kpiaction"
--  		,KPIACTIONID  "kpiactionid"
--  		,RULEOPERATOR	"ruleoperator"
--  		,RULEVALUE1 AS "value1"
--  		,RULEVALUE2 AS "value2"
--  		,COALESCE(RULEBOOLOPERATOR,'') AS "rulebool"
--  		,KPIRULEID	"kpiruleid"
--  		,MEASUREID	"measureid"
--  		,LASTKPISTATUS	"lastkpistatus"
--  		,COALESCE(KPIS.KPITYPE,'NORMAL')  AS "kpitype"
--  		, COALESCE(KPITYPEID,1) AS "kpitypeid"
--  		,EXPRESSION_SERVICE	"EXPRESSION_SERVICE"
--  		,MST.TEMPLATE_ID "TEMPLATE_ID"
--  		,CUSTOMERID "EntityID"
--  		,LOCATIONID "LocationID"
--  		 ,CASE WHEN GROUPNAME='' OR GROUPNAME IS NULL THEN 'NONE' ELSE GROUPNAME END AS "groupingname"
--  		 ,USERS.USER_NAME "CreatedBy"
--  		 ,ORIGMST.CREATEDDATE "CreatedDate"
-- 		,(
-- 		SELECT LICENSEKEYID "licensekeyid"
-- 		FROM KBLICENSEDETAILS MAPS 
-- 		WHERE CUSTOMERID= (SELECT CUSTOMERID FROM KBUSERCUSTOMERMAPPING WHERE USERID= MST.CREATEDBY)
-- 		LIMIT 1
-- 		) "VID"
-- 		,(
-- 			select 
-- 			Row_to_json(a) "schedule"
-- 			from
-- 			(
-- 				select kpi_id, fromdate,todate,uom 
-- 				from kbkpischedules schedule
-- 				where schedule.kpi_id=KPIS.KPIID and isactive='1'
-- 			) a	
-- 		)
-- 		,geofence "geofence", geo_logicaloperator "geo_logicaloperator"
-- 		,'kpiid,sourceid,sourcename,measure,kpiname,kpidesc,kpiaction,kpiactionid,ruleoperator,value1,value2,rulebool,kpiruleid,measureid,lastkpistatus,kpitypeid,kpitype,'
-- 		||'EXPRESSION_SERVICE,TEMPLATE_ID,EntityID,LocationID,groupingname,CreatedBy,CreatedDate,VID' "Attribute_list"
--  		FROM (
--  				SELECT DISTINCT KPIID,MEASUREID,SOURCEID, A.TEMPLATE_ID,MEASURE,KPINAME,KPIACTION, A.RULEOPERATOR, A.RULEVALUE1,A.RULEVALUE2,A.RULEBOOLOPERATOR
--  				,KPIRULEID,LASTKPISTATUS,KPITYPE,KPITYPEID,KPIACTIONID,A.EXPRESSION_SERVICE,CUSTOMERID,LOCATIONID,GROUPNAME, cast(B.geofence as text) geofence, B.geo_logicaloperator
--  				 FROM KPIS A
--  				 Join kbkpirule B on A.kpiid=B.kpi_id
--  				 where B.isactive='1'
--  			) KPIS   
--  		INNER JOIN KBKPIMST MST ON KPIS.KPIID=COALESCE(MST.ORIGINALID,MST.KPI_ID)
--  		INNER JOIN KBKPIMST ORIGMST ON COALESCE(MST.ORIGINALID,MST.KPI_ID)=ORIGMST.KPI_ID
--  		left JOIN KBKPIMEASURE A ON A.KPI_ID=MST.KPI_ID
--  		Left outer JOIN KBMEASUREMST B ON B.MEASURE_ID=A.MEASURE_ID AND KPIS.MEASUREID=B.MEASURE_ID
--  		LEFT OUTER JOIN KBSOURCETYPEMST SOURCES ON MST.SOURCE_ID=SOURCES.SOURCETYPE_ID
--  		LEFT OUTER JOIN KBUSERMST USERS ON ORIGMST.CREATEDBY=USERS.USER_ID
--  		WHERE  MST.ISACTIVE='1' AND MST.source_id=VSOURCEID and ORIGMST.source_id=VSOURCEID 
--  		--(B.ISACTIVE=2 OR B.ISACTIVE=1) AND
--  		and EXISTS(SELECT 1 FROM CREATEDBYLIST B WHERE MST.CREATEDBY=B.CREATEDBY)
--  		 GROUP BY SOURCEID,KPIS.TEMPLATE_ID, KPIID,MST.SOURCE_ID,SOURCES.ALIAS,MEASURE,KPINAME,MST.KPI_DESCRIPTION,KPIACTION,RULEOPERATOR,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR
--  				,KPIRULEID,MEASUREID,LASTKPISTATUS,KPIS.KPITYPE,KPITYPEID,B.FORMULAMEASURE,KPIACTIONID
--  				,EXPRESSION_SERVICE,KPIS.CUSTOMERID,KPIS.LOCATIONID, MST.TEMPLATE_ID,GROUPNAME,USERS.USER_NAME,ORIGMST.CREATEDDATE,MST.CREATEDBY
--  				,geofence,geo_logicaloperator)a);


 VEXPRESSIONS:=(
 
 		SELECT ROW_TO_JSON(OUTPUT) AS "Expressions"
 		FROM
 		(
 		SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A)))  AS "Expression"
 		FROM
 		(
 		 SELECT KPIID 			"KPIID"
 		 ,KPINAME			"KPIName"
 		 ,COALESCE(KPIACTION,'')	"kpiaction"
 		 ,COALESCE(KPIACTIONID,0)	"kpiactionid"
 		 ,A.CUSTOMERID			"ENTITYID"
 		 ,A.LOCATIONID			"LOCATIONID"
 		 , 'KPIID,KPINAME,KPIACTION,KPIACTIONID,ENTITYID,LOCATIONID' "Attribute_list"	
  		 ,	( 
 			SELECT DISTINCT B.EXPRESSION_SERVICE
 			FROM KPIS B 
 			WHERE A.KPIID=B.KPIID AND A.KPIACTIONID=B.KPIACTIONID
 			)"Expression"
 		 FROM KPIS A
 		 GROUP BY KPIID,KPIACTIONID,KPIACTION,KPINAME ,CUSTOMERID,LOCATIONID
 		)A
 		)OUTPUT
 		 --FOR XML PATH(''),ROOT('EXPRESSIONS')
  );
  
  
 VKPISLIST:=( 
 		SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "rule"
 		FROM
 		(
 		SELECT  KPIID AS "kpiid"
 		,MST.SOURCE_ID AS "sourceid"
 		,SOURCES.ALIAS AS "sourcename"
 		,MEASURE	"measure"
 		,KPINAME	"kpiname"	
 		,MST.KPI_DESCRIPTION AS "kpidesc"
 		,KPIACTION	"kpiaction"
 		,KPIACTIONID  "kpiactionid"
 		,RULEOPERATOR	"ruleoperator"
 		,RULEVALUE1 AS "value1"
 		,RULEVALUE2 AS "value2"
 		,COALESCE(RULEBOOLOPERATOR,'') AS "rulebool"
 		,KPIRULEID	"kpiruleid"
 		,MEASUREID	"measureid"
 		,LASTKPISTATUS	"lastkpistatus"
 		,COALESCE(KPIS.KPITYPE,'NORMAL')  AS "kpitype"
 		, COALESCE(KPITYPEID,1) AS "kpitypeid"
 		,EXPRESSION_SERVICE	"EXPRESSION_SERVICE"
 		,MST.TEMPLATE_ID "TEMPLATE_ID"
 		,CUSTOMERID "EntityID"
 		,LOCATIONID "LocationID"
 		 ,CASE WHEN GROUPNAME='' OR GROUPNAME IS NULL THEN 'NONE' ELSE GROUPNAME END AS "groupingname"
 		 ,USERS.USER_NAME "CreatedBy"
 		 ,ORIGMST.CREATEDDATE "CreatedDate"
		,(
		SELECT LICENSEKEYID "licensekeyid"
		FROM KBLICENSEDETAILS MAPS 
		WHERE CUSTOMERID= (SELECT CUSTOMERID FROM KBUSERCUSTOMERMAPPING WHERE USERID= MST.CREATEDBY)
		LIMIT 1
		) "VID"
		,(
			select 
			Row_to_json(a) "schedule"
			from
			(
				select kpi_id, fromdate,todate,uom 
				from kbkpischedules schedule
				where schedule.kpi_id=KPIS.KPIID and isactive='1'
			) a	
		)
		,geofence "geofence", geo_logicaloperator "geo_logicaloperator"
		,'kpiid,sourceid,sourcename,measure,kpiname,kpidesc,kpiaction,kpiactionid,ruleoperator,value1,value2,rulebool,kpiruleid,measureid,lastkpistatus,kpitypeid,kpitype,'
		||'EXPRESSION_SERVICE,TEMPLATE_ID,EntityID,LocationID,groupingname,CreatedBy,CreatedDate,VID' "Attribute_list"
 		FROM (
 				SELECT DISTINCT KPIID,MEASUREID,SOURCEID, A.TEMPLATE_ID,MEASURE,KPINAME,KPIACTION, A.RULEOPERATOR, A.RULEVALUE1,A.RULEVALUE2,A.RULEBOOLOPERATOR
 				,KPIRULEID,LASTKPISTATUS,A.KPITYPE,KPITYPEID,KPIACTIONID,A.EXPRESSION_SERVICE,CUSTOMERID,LOCATIONID,GROUPNAME, cast(B.geofence as text) geofence, B.geo_logicaloperator
 				 FROM KPIS A
 				 join kbkpimst kp on A.kpiid=COALESCE(kp.ORIGINALID,kp.KPI_ID)
 				 Join kbkpirule B on kp.kpi_id=B.kpi_id
 				 where B.isactive='1'
 			) KPIS   
 		INNER JOIN KBKPIMST MST ON KPIS.KPIID=COALESCE(MST.ORIGINALID,MST.KPI_ID)
 		INNER JOIN KBKPIMST ORIGMST ON COALESCE(MST.ORIGINALID,MST.KPI_ID)=ORIGMST.KPI_ID
 		left JOIN KBKPIMEASURE A ON A.KPI_ID=MST.KPI_ID
 		Left outer JOIN KBMEASUREMST B ON B.MEASURE_ID=A.MEASURE_ID AND KPIS.MEASUREID=B.MEASURE_ID
 		LEFT OUTER JOIN KBSOURCETYPEMST SOURCES ON MST.SOURCE_ID=SOURCES.SOURCETYPE_ID
 		LEFT OUTER JOIN KBUSERMST USERS ON ORIGMST.CREATEDBY=USERS.USER_ID
 		WHERE  MST.ISACTIVE='1' AND MST.source_id=VSOURCEID and ORIGMST.source_id=VSOURCEID 
 		--(B.ISACTIVE=2 OR B.ISACTIVE=1) AND
 		and EXISTS(SELECT 1 FROM CREATEDBYLIST B WHERE MST.CREATEDBY=B.CREATEDBY)
 		 GROUP BY SOURCEID,KPIS.TEMPLATE_ID, KPIID,MST.SOURCE_ID,SOURCES.ALIAS,MEASURE,KPINAME,MST.KPI_DESCRIPTION,KPIACTION,RULEOPERATOR,RULEVALUE1,RULEVALUE2,RULEBOOLOPERATOR
 				,KPIRULEID,MEASUREID,LASTKPISTATUS,KPIS.KPITYPE,KPITYPEID,B.FORMULAMEASURE,KPIACTIONID
 				,EXPRESSION_SERVICE,KPIS.CUSTOMERID,KPIS.LOCATIONID, MST.TEMPLATE_ID,GROUPNAME,USERS.USER_NAME,ORIGMST.CREATEDDATE,MST.CREATEDBY
 				,geofence,geo_logicaloperator
 		) A --FOR XML RAW('RULE')
 
 )
   ;
  
 VALERTS := ( 
 
		select Row_to_json(alt)
		From
		(
 		SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "ALERT"
 		FROM
 		(
 		SELECT DISTINCT 
		ALERTSMST.ALERT_KPI AS "KPI_ID"
		,ALERTSMST.ALERT_ID AS "ALERTID"
		,ALERTSMST.ALERT_DESCRIPTION "ALERTNAME"
		,ACTIONS.ALERTACTION AS "ALERTSTATUS"
		,ASTATUS.STATUS "ALERTACTION" 
		,coalesce(CASE WHEN ALERTSMST.ISMAILCONFIGURED='1' THEN 'EMAIL' end,'') ||','|| coalesce(CASE when ALERTSMST.ISAPICONFIGURED='1' then 'API' END,'')
			||','|| Coalesce(CASE when ALERTSMST.ISSMSCONFIGURED='1' then 'SMS' END ,'') "ALERTTYPE"
		,EMAILTO AS "MAILTO",EMAILCC AS "MAILCC",EMAILBCC AS "MAILBCC",EMAILSUBJECT AS "MAILSUBJECT"
		,'' AS "MAILBODY"
		,ALERTSMST.CREATEDDATE	"CREATEDDATE"
		,VKM.SOURCEID "SOURCEID"
		,'KPI_ID,ALERTID,ALERTNAME,ALERTSTATUS,ALERTACTION,ALERTTYPE,MAILTO,MAILCC,MAILBCC,MAILSUBJECT,MAILBODY,CREATEDDATE,SOURCEID' "Attribute_list"
		FROM 
		KPIS VKM 
		JOIN 
		KBALERTMST ALERTSMST ON VKM.KPIID=ALERTSMST.ALERT_KPI
		Left outer Join kbeventemaildetails ALERTS on ALERTS.Eventid=alertsmst.alert_id	
		Left outer JOIN KBEventemailmst mails ON  ALERTS.templateid = mails.templateid and lower(mails.type)='alert'
		JOIN KBALERTACTION  ACTIONS ON ALERTSMST.ALERT_ID=ACTIONS.ALERT_ID
		JOIN KBKPISTATUS ASTATUS ON CAST(ACTIONS.ALERTACTION AS INT)=ASTATUS.STATUSID
		WHERE ACTIONS.ISACTIVE='1'

 		)A
 		)alt
 --FOR XML RAW('ALERT'),ROOT('ALERTS')
 )
 
 ;
 
 
 VMETRICDETAILS:=(	 
 						SELECT ROW_TO_JSON(METRICDETAILS) AS "metricdetails"
 						FROM
 						(
  							SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(METRIC))) AS "metric"
 							FROM
 							(
								SELECT METRICS.KPIID "KPIID"
								,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRIC_ID ELSE ESCREEN.SCREENID END "METRIC_ID"
								,COALESCE(MMST.METRICALIAS,'') "metricaliasname" 
								,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRICNAME ELSE ESCREEN.CONTROLTITLE END "METRICNAME"
								,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.METRICDATATYPE ELSE CONTROLDATATYPE END "METRICDATATYPE"
								,CASE WHEN Upper(TYPE)='MEASURE' THEN MMST.SOURCE_ID ELSE ESCREEN.ENTITYDEFID END "SOURCE_ID"
								,CASE WHEN Upper(TYPE)='MEASURE' THEN 'DS' ELSE 'ENTITY' END "MetricType"
								,CASE WHEN Upper(TYPE)='MEASURE' THEN 0 ELSE ESCREEN.ENTITYDEFID END "ENTITYDEFID"
								,'KPIID,METRIC_ID,metricaliasname,METRICNAME,METRICDATATYPE,SOURCE_ID,MetricType,ENTITYDEFID' "Attribute_list"
								,
								(	
									SELECT ROW_TO_JSON(ACTIONS) AS "ACTIONS"
									FROM
									(
										SELECT ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A))) AS "ACTION"
										FROM
										(
											SELECT MEASURES.KPI_ID "KPIID",STATS.STATUSID "ACTIONID"
											,'KPI_ID,ACTIONID' "Attribute_list"
											FROM
											(
												SELECT DISTINCT COALESCE(KPI.ORIGINALID,KPI.KPI_ID) KPI_ID,A.KPI_ID LKPI_ID
												,CASE WHEN upper(TYPE)='MEASURE' 
												THEN  C.MEASURE_NAME ELSE ESCREEN1.CONTROLTITLE END  MEASURE_NAME
												,B.RULEACTION,A.ISACTIVE
												FROM KBKPIMEASURE A
												JOIN KBKPIMST KPI ON A.KPI_ID=KPI.KPI_ID and  KPI.source_id=Vsourceid
												JOIN (SELECT KPI_ID,RULEACTION FROM  KBKPIRULE )B ON A.KPI_ID=B.KPI_ID
												LEFT OUTER JOIN KBMEASUREMST C ON A.MEASURE_ID=C.MEASURE_ID 
													--AND A.TEMPLATE_ID=C.TEMPLATE_ID 
													AND upper(A.TYPE)='MEASURE'
												LEFT OUTER JOIN KBENTITYSCREENCONFIGURATIONMST ESCREEN1 ON A.MEASURE_ID=ESCREEN.SCREENID 
													AND upper(A.TYPE)='ENTITY'
												WHERE A.TEMPLATE_ID=2  AND A.ISACTIVE='1'
											) MEASURES
											JOIN 
											KBKPISTATUS STATS ON MEASURES.RULEACTION=STATS.STATUS
											WHERE  MEASURES.MEASURE_NAME= CASE WHEN upper(TYPE)='MEASURE' THEN MMST.METRICNAME||'_Measure' 
												ELSE ESCREEN.CONTROLTITLE  END
											AND KPIS.KPI_ID=MEASURES.LKPI_ID
											--AND EXISTS(SELECT 1 FROM CREATEDBYLIST B WHERE STATS.CREATEDBY=B.CREATEDBY)
										)A
									)ACTIONS
								)
 						FROM 
 						KPIS METRICS
 						JOIN KBMEASUREMST MEASURES ON METRICS.MEASUREID=MEASURES.MEASURE_ID
 						JOIN KBKPIMST KPIS ON METRICS.KPIID=COALESCE(ORIGINALID,KPIS.KPI_ID)
 						JOIN KBKPIMEASURE MEAS ON METRICS.MEASUREID=MEAS.MEASURE_ID AND KPIS.KPI_ID=MEAS.KPI_ID
 						LEFT OUTER JOIN (
 
 								SELECT measure_id metric_id,Metricname,  metricalias, metricdatatype, metrics.source_id
 								FROM 
								kbmetricmst metrics
								Join 
 								kbmeasuremst A on metrics.metricname||'_Measure'=A.measure_name and metrics.source_id=A.source_id
 								JOIN 
 								KBSOURCETYPEMST B ON A.SOURCE_ID=B.SOURCETYPE_ID
 								WHERE metrics.TEMPLATE_ID=1 AND B.SPOKETYPE='0' 
 								AND B.SPOKETYPE='0'
 								UNION ALL
 								SELECT measure_id metric_id,Metricname,  metricalias, metricdatatype, metrics.source_id 
 								FROM 
 								kbmetricmst metrics
								Join 
 								kbmeasuremst A on metrics.metricname||'_Measure'=A.measure_name and metrics.source_id=A.source_id
 								JOIN 
 								KBSOURCETYPEMST B ON A.SOURCE_ID=B.SOURCETYPE_ID
 								WHERE metrics.TEMPLATE_ID=1 AND B.SPOKETYPE='1'
 								)MMST 
 								ON REPLACE(METRICS.MEASURENAME,'_Measure','')=MMST.METRICNAME AND MEASURES.SOURCE_ID=MMST.SOURCE_ID 
 								AND Upper(MEAS.TYPE)='MEASURE'
 						LEFT OUTER JOIN KBENTITYSCREENCONFIGURATIONMST ESCREEN ON MEAS.MEASURE_ID=ESCREEN.SCREENID AND upper(MEAS.TYPE)='ENTITY'
 						WHERE   METRICS.SOURCEID=VSOURCEID and kpis.isactive=1
 						GROUP BY METRICS.KPIID,MMST.METRIC_ID, MMST.METRICNAME,MMST.METRICDATATYPE,MMST.SOURCE_ID,KPIS.KPI_ID,MMST.METRICALIAS,ORIGINALID
 						,TYPE,SCREENID,ESCREEN.ENTITYDEFID,ESCREEN.CONTROLTITLE,CONTROLDATATYPE
 						--FOR XML RAW('METRIC'),ROOT('METRICDETAILS')
 						)METRIC
 
 						) AS METRICDETAILS
 			);

--return(SELECT ( ARRAY_TO_JSON(ARRAY_AGG(ROW_TO_JSON(A)))) from(select VMETRICDETAILS)a);
 
 VPROBLEMS:=(
 		SELECT (ROW_TO_JSON(A)) AS "PROBLEM"
			FROM
			(
			SELECT DISTINCT  KPIS.KPIID "KPIID", PROBLEMS.PROBLEM_ID "PROBLEMID", PROBMST.EVENT_SD "PROBLEMDESCRIPTION" ,PROBLEMS.RULEACTION AS "RULEACTION"
			,'KPIID,PROBLEMID,PROBLEMDESCRIPTION,RULEACTION' "Attribute_list"
			FROM 
			KPIS KPIS 
			INNER JOIN KBKPIEVENT PROBLEMS ON KPIS.KPIID=PROBLEMS.KPI_ID AND KPIS.KPIACTION=PROBLEMS.RULEACTION
			LEFT JOIN KBEVENTSMST PROBMST ON PROBLEMS.PROBLEM_ID=PROBMST.EVENT_ID
			)A
 
	  );
 
 RETURN(	SELECT ROW_TO_JSON(OUTPUT)
 	FROM
 	(
 	SELECT ROW_TO_JSON(A) AS "ruledetails"
 	FROM
 	(
 	SELECT   VKPISLIST AS "rule",VEXPRESSIONS AS "Expressions",VALERTS AS "ALERTS",VPROBLEMS "PROBLEMS",VMETRICDETAILS  AS "metricdetails"	
 	)A
 	)OUTPUT
 );

end;
end if; 




End
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION usp_getkpismetadataforcache(json)
  OWNER TO postgres;
