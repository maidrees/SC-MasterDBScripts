-- FUNCTION: public.usp_kbgenericentityjson

-- DROP FUNCTION public.usp_kbgenericentityjson;

CREATE OR REPLACE FUNCTION public.usp_kbgenericentity(
	input json)
RETURNS json
    LANGUAGE 'plpgsql'
    COST 100.0
    VOLATILE 
AS $function$

DECLARE
	VTRAN			VARCHAR(30);
	Ventityscreen		json;
	VEntityDefId		bigint;
	VEntityName		varchar(255);
	VEntityType		smallint;
	VTypeOfEntity		varchar(50);
	VCreated_By		int;
	VCustomerName		varchar(255);
	VID			int;
	VEntdefTablename 	Varchar(255);
	VEntInstName		varchar(500);
	VEntInstId		int;
	VLegacy_system_id	varchar(50);
	VLabel			varchar(255);
	VEDMasterdata		json;
	VInput			json;
	VCols_data		varchar(500);	
	VDataExists		char(1);
	VActiondate		timestamp default(current_timestamp at time zone 'utc')	;
	q varchar;	
begin

drop table if exists temps;

create temp table temps(id serial,ivalue json);

insert into temps(ivalue)
select input;

select ivalue->'ENTITYDETAILS'->> 'TRANSTYPE' 
,cast(ivalue->'ENTITYDETAILS'->> 'LoginId' as int)
,ivalue->'ENTITYDETAILS'->> 'EntityName'
,ivalue->'ENTITYDETAILS'->> 'EntityType'
,ivalue->'ENTITYDETAILS'-> 'EntityScreen'
,cast(ivalue->'ENTITYDETAILS'->> 'VID' as int)
,cast(ivalue->'ENTITYDETAILS'->> 'EntityDefId' as int)
,ivalue->'ENTITYDETAILS'->> 'TypeOfEntity'
,ivalue->'ENTITYDETAILS'-> 'EntityScreen'->'Entity'->'Master'
,ivalue->'ENTITYDETAILS'->> 'EntityDefName'
into
VTRAN,VCreated_By,VEntInstName,VEntityType,Ventityscreen,VID,VEntityDefId,VTypeOfEntity,VEDMasterdata,VEntityName
from temps limit 1;

VTypeOfEntity:= (select entitytype from  kbentitymst where entitydef_id=VEntityDefId limit 1);

	If (VCreated_By=0 or VCreated_By is null) then
	Begin

	VCreated_By:= (select userid 
			From
			KBUserCustomerMapping users
			Join (select CustomerId from KBLicenseDetails where LicenseKeyId=VID limit 1) cust on users.CustomerID=cust.CustomerId
			where userid !=1
			limit 1
			);

			

	End;
	End if;

	IF VEntityDefId is NULL or VEntityDefId =0 
	then
	begin
		VEntityDefId:=(select entitydef_id from kbentitymst where entity_name=VEntityName limit 1);
	end;
	End if;

	IF VEntityName is NULL or VEntityName ='' 
	then
	begin
		VEntityName:=(select entity_name from kbentitymst where entitydef_id=VEntityDefId limit 1 );
	end;
	End if;

	VCustomerName:=(Select customername from KBUserCustomerMapping usermap join kbcustomersmst customers on usermap.customerid=customers.customerid	where userid=VCreated_By limit 1);

	VEntdefTablename:=(select '"KB_ENTITY_'||VCustomerName||'_'||VEntityName||'"');

  

VCols_data:=
	(

	select String_Agg(col,' and ')
	from
	(
	Select ilabel ||'= ''' || lvalue || '''' col
	from
	(
		Select screenj->>'Label' ilabel ,screenj->>'InputValue' lvalue,screenj->>'IsSearchable' IsSearchable, screenj->>'Identifier' IsIdentifier
		from
		(
			Select json_array_elements(escreen) as screenj
			from
			(
				select VEDMasterdata escreen
			)a 
		) scr

	)a
	where IsSearchable='1' and IsIdentifier='1'
	) aar
	)
	;

VDataExists=(select 1 from kbentities where entity_name=VEntInstName and entitydef_id=VEntityDefId);

	--Execute(' select 1 from '||VEntdefTablename|| ' where '|| VCols_data ) into VDataExists;

	If coalesce(VDataExists,'0')='0' then
	begin

	
		VInput:=
			(
				Select Row_to_json(outs)
				from
				(
					Select Row_to_json(a) as "ENTITYDETAILS"
					from
					(
					select 'CreateDynamicEntity' as "TRANSTYPE"
					,VCreated_By "LoginId"
					,VEntInstName "EntityName"
					,VEntityName as "EntityDefName"
					,VEntityType "EntityType"
					,Ventityscreen as "EntityScreen"
					,VID "VID"
					,VEntityDefId "EntityDefId"
					,VTypeOfEntity as "TypeOfEntity"
					) a
				) outs
			);

		Return(select usp_kbentity(VInput));
	end;
	else
	begin
			VEntInstId=(select entity_id from kbentities where entity_name=VEntInstName and entitydef_id=VEntityDefId);
		--VDataExists=(select * from kbentities where entity_name=VEntInstName and entitydef_id=VEntityDefId);
		--Execute(' select "ID" from '||VEntdefTablename|| ' where '|| VCols_data )   into VEntInstId;

		VInput:=
			(
				Select Row_to_json(outs)
				from
				(
					Select Row_to_json(a) as "ENTITYDETAILS"
					from
					(
					select 'updatedynamicentity' as "TRANSTYPE"
					,VCreated_By "LoginId"
					,VEntInstName "EntityName"
					,VEntityName as "EntityDefName"
					,VEntityType "EntityType"
					,Ventityscreen as "EntityScreen"
					,VID "VID"
					,VEntInstId	"EntityId"
					,VEntityDefId "EntityDefId"
					,VTypeOfEntity as "TypeOfEntity"
					) a
				) outs
			);

		Return(select usp_kbentity(VInput));
	end;
	End if;
 

End

$function$;

ALTER FUNCTION public.usp_kbgenericentity(json)
    OWNER TO postgres;


