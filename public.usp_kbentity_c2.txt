-- FUNCTION: public.usp_kbentity_c2json

-- DROP FUNCTION public.usp_kbentity_c2json;

CREATE OR REPLACE FUNCTION public.usp_kbentity_c2(
	input json)
RETURNS json
    LANGUAGE 'plpgsql'
    COST 100.0
    VOLATILE 
AS $function$

DECLARE
	VTRAN			VARCHAR(30);
	Ventityscreen		json;
	VEntityDefId		bigint;
	VEntityName		varchar(255);
	VEntityType		smallint;
	VCreated_By		int;
	VCustomerName		varchar(255);
	VID			int;
	VEntdefTablename 	Varchar(255);
	VEDMasterdata		json;
	VEntDeftblcols		text;
	VEntinstcoldata		text;
	VEntInstName		varchar(500);
	VEntInstId		int;
	VPassword		varchar(100);
	VTypeOfEntity		varchar(50);
	VSourceEntityId		int;
	VDestEntityId		int;
	VSourceEntityDefId	int;
	VDestEntityDefId	int;
	VPrimaryEntityType	varchar(50);
	VSecondaryEntityType	varchar(50);
	VEntityRelationId	int;
	VEntityMetricName	varchar(100);
	VResult			Json;
	VEarlyArrivingFacts	Json;
	VMeausres		Json;
	VKPIS			Json;
	VAnalysisupdate		Json;
	VEventsupdate		Json;
	VFactsInfo		Json;
	VFinalResult		Json;
	VIsentityUpdate		bit;
	Voutput			varchar(1000);
	VDevicedata		varchar(200);
	VRelationId		int;
	VSql			text;
	VMergedlist 		varchar(100);
	VEntitygroup		int[];
	VLegacysystemid		int;
	VIterguid		varchar(100);
	VIdentifier		varchar(100);
	Videntifiername		varchar(100);
	Ventityguid		varchar(100);
	VActiondate		timestamp default(current_timestamp at time zone 'utc')	;	
begin

drop table if exists temps;
drop table if exists users;
drop table if exists ScreenConfig;
drop table if exists EntityCreation;
drop table if exists Entity;
drop table if exists Branches;
drop table if exists EntitiesCreation;
drop table if exists Branches;
drop table if exists missingcolumns;

create temp table temps(id serial,ivalue json);
create temp table users (id serial,userid int);
create temp table ScreenConfig (Id Serial,EntityID int,MRowIndex int,MLabel varchar(500),ServiceLabel varchar(500),MDataTypeId varchar(50), MCtrlType varchar(100), IsRequired bit, Identifier bit 
	, IsSearchable bit,IsDisplay bit,DefaultValue varchar(100), CRowIndex int, CValue varchar(100), OType varchar(50),TOrder smallint,groupname varchar(255));

create temp table EntityCreation (id serial, EntityName varchar(100),ColumnName varchar(255),ColumnValue varchar(100),DataType varchar(50));
	
create temp table Entity (ID serial, EntityDefID int, EntityScreenName varchar(100), EntityID int, EntityName varchar(100),HasBranches smallint, Screenxml json);

create temp table EntitiesCreation (id serial,EntityName varchar(100),ColumnName varchar(100),ColumnValue varchar(100),CtrlType varchar(100),DataType varchar(100)
,"Name" varchar(100),"Value" varchar(100),Isidentifier bit, ServiceLabel varchar(100),BranchNumber int, RowIndex int, IsRequired bit, GroupName varchar(100), IsUpdate bit,Issearchable bit,originaldatatype varchar(50));

create temp table missingcolumns (id serial,EntityName varchar(100),ColumnName varchar(100),ColumnValue varchar(100),CtrlType varchar(100),DataType varchar(100)
,"Name" varchar(100),"Value" varchar(100),Isidentifier bit, ServiceLabel varchar(100),BranchNumber int, RowIndex int, IsRequired bit, GroupName varchar(100), IsUpdate bit,Issearchable bit,originaldatatype varchar(50));

create temp table Branches (Id serial,BranchID int ,BranchName varchar(100),BranchNumber smallint);

insert into temps(ivalue)
select input;

VTRAN:= (select ivalue->'ENTITYDETAILS'->> 'TRANSTYPE' from temps limit 1);

VCreated_By:= (select ivalue->'ENTITYDETAILS'->> 'LoginId' from temps limit 1);
VEntityName:= (select ivalue->'ENTITYDETAILS'->> 'EntityName' from temps limit 1);
VEntityType:= (select ivalue->'ENTITYDETAILS'->> 'EntityType' from temps limit 1);
Ventityscreen:= (select ivalue->'ENTITYDETAILS'-> 'EntityScreen' from temps limit 1);
VID:= (select ivalue->'ENTITYDETAILS'->> 'VID' from temps limit 1);
VEDMasterdata:=(select ivalue->'ENTITYDETAILS'-> 'EntityScreen'->'Entity'->'Master' from temps limit 1);
VEntityDefId:= (select ivalue->'ENTITYDETAILS'->> 'EntityDefId' from temps limit 1);

VEntInstId:=(select ivalue->'ENTITYDETAILS'->> 'EntityId' from temps limit 1);
VTypeOfEntity:=(select ivalue->'ENTITYDETAILS'->> 'TypeOfEntity' from temps limit 1);

If lower(VTran)='createdynamicentity' then
begin

VEntInstName:=VEntityName;

end;

end if;

/* Multi tenancy implementaion */

If (VCreated_By=0 or VCreated_By is null) then
Begin

VCreated_By:= (select userid 
		From
		KBUserCustomerMapping users
		Join (select CustomerId from KBLicenseDetails where LicenseKeyId=VID) cust on users.CustomerID=cust.CustomerId
		where userid !=1
		limit 1
		);

End;
End if;

VCustomerName:=(Select customername from KBUserCustomerMapping usermap join kbcustomersmst customers on usermap.customerid=customers.customerid	where userid=VCreated_By limit 1);

insert into users(userid)
select userid
From
KBUserCustomerMapping A
Inner join
(
	Select customerid 
	from KBUserCustomerMapping
	where userid=VCreated_By
) B  on A.customerid=B.customerid

;

If Lower(VTran)='gettooltip' then
Begin

VResult:=(
	select array_to_json(array_agg(row_to_json(ENTITYDEFINITION))) as "ENTITYDEFINITION"
	from
	(
		select array_to_json(array_agg(row_to_json(entity))) as "ENTITYDEFINITION"
		from	
		(
			select entmst.entitydef_id as "EntityDefID", entmst.entity_name as EntityDefName, entmst.entitytype as "EntityType" , entusers.user_name "CreatedBy"
				,(
				select array_to_json(array_agg(row_to_json(entities))) as "ENTITY"
				from
				(

					select a.entity_id as "EntityID", a.entity_name as "EntityName", user_name "CreatedBy"
					from kbentities a
					join kbusermst_c2 users on a.createdby=users.user_id
					where a.entitydef_id=entmst.entitydef_id
				)entities	
				)
			from
			kbentitymst entmst	
			join kbusermst_c2 entusers on entmst.createdby=entusers.user_id	 
			where entmst.entitydef_id!=1
		) entity
	)ENTITYDEFINITION	

);
--where exists(select 1 from users b where a.createdby=b.userid);

return(	VResult	)
;
end;
ElseIf Lower(VTran)='getentitytooltip' then
Begin

VResult:=(
	select array_to_json(array_agg(row_to_json(ENTITYDEFINITION))) as "ENTITYDEFINITION"
	from
	(
		select array_to_json(array_agg(row_to_json(entity))) as "ENTITYDEFINITION"
		from	
		(
			select row_number() over(Order by entitydef_id desc) as "RowNumber"
			, entmst.entitydef_id as "ID", entmst.entitydef_id as "EntityDefID"
			, entmst.entity_name as "EntityDefName", entmst.entity_name as "Name"
			, entmst.entitytype as "Type",entmst.entitytype as "DefinitionType" 
			, entusers.user_name "CreatedBy"
			,(select Count(*) from kbentitymst where entitydef_id!=1) as "TotalRows"
			from
			kbentitymst entmst	
			join kbusermst_c2 entusers on entmst.createdby=entusers.user_id	 
			where entmst.entitydef_id!=1
		) entity
	)ENTITYDEFINITION	

);
--where exists(select 1 from users b where a.createdby=b.userid);

return(VResult)
;
end;
Elseif Lower(Vtran)='getdetails' then
begin

VEntInstId:=(select ivalue->'ENTITYDETAILS'->> 'EntityId' from temps limit 1);

	If (exists(Select 1 from kbentities where entity_id=VEntInstId and isactive='0') or not exists(Select cast('1' as bit) from kbentities where entity_id=VEntInstId)
		OR exists(Select 1 from kbentities ents where entity_id=VEntInstId 
								and Exists(Select 1 from kbentitymst entmst 
									where ents. Entitydef_id=entmst.Entitydef_id and lower(entmst.Entity_name)!=lower(VTypeOfEntity)))
	)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VTypeOfEntity as "message", 404 as "code"
		) output
		);
	end;
	else
	begin

	
	VResult:=(

			select row_to_json(a)
			from
			(
				 select row_to_json(output) as "ENTITYDETAILS"
				 from
				 (
					Select ent.entity_id "EntityId", ent.entity_name as "EntityName",entmst.entitydef_id as "EntityDefId", entmst.entity_name as "EntityDefName",
					entmst.entitytype as "EntityType",users.user_name "CreatedBy",ent.createddate "CreatedDate",modusers.user_name "ModifiedBy",ent.modifieddate "ModifiedDate"
					,ent.screenjson as "ScreenConfig"
					,case when lower(VTypeOfEntity)='target' then
					(
						select array_agg("ID") 
						from  "KB_ENTITY_Circles_Target" 
						where master_entity_id=(select master_entity_id 
									from "KB_ENTITY_Circles_Target" 
									where "ID"=VEntInstId and coalesce(master_entity_id,0)!=0
									) 
						and coalesce(master_entity_id,0)!=0
					)  end "Group"
					from kbentities ent 
					join kbentitymst entmst on ent.entitydef_id=entmst.entitydef_id
					Join kbusermst_c2 users on ent.createdby=users.user_id
					Join kbusermst_c2 modusers on ent.modifiedby=modusers.user_id
					where entity_id=VEntInstId
				)output
			)a
		);

	Return(Vresult)	
	;

	end;
	end if;
end;

ElseIf Lower(VTran)='createentitydefinition' then
begin

VEntdefTablename:=(select '"KB_ENTITY_'||VCustomerName||'_'||VEntityName||'"');

 

INSERT INTO public.kbentitymst(
             entity_name, entitytype,  entitytablename, Screenjson, createdby,  modifiedby, isactive)
 select      VEntityName,   VEntityType,VEntdefTablename,Ventityscreen,   VCreated_By, VCreated_By, '1'  
where not exists (select 1 from kbentitymst where entity_name=VEntityName and isactive='1') ;
 
VEntityDefId:=(select entitydef_id from kbentitymst where entity_name=VEntityName and isactive='1');

Insert into ScreenConfig(EntityID,MRowIndex,MLabel,ServiceLabel, MDataTypeId, MCtrlType, IsRequired, Identifier, IsSearchable,IsDisplay,DefaultValue
	,CRowIndex,CValue, OType,TOrder,groupname)

	select  VEntityDefId as Entitydefid
		,cast(EDScreen->>'RowIndex' as int) as  RowIndex
		,EDScreen->>'Label' as  VLabel
		,EDScreen->>'ServiceLabel' as ServiceLabel
		,EDScreen->>'DataTypeId' as DataTypeId
		,EDScreen->>'CtrlType' as CtrlType

		,cast(EDScreen->>'IsRequired' as bit) as IsRequired
		,cast(EDScreen->>'Identifier' as bit) as Isidentifier
		,cast(EDScreen->>'IsSearchable' as bit) as IsSearchable

		,NULL as IsDisplay
		,EDScreen->>'DefaultValue' as DefaultValue
		,NULL as CRowIndex
		,NULL as CValue
		,'EntityDefinition' as Objecttype
		,NULL as TOrder
		,EDScreen->>'GroupName' as groupname
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select ivalue->'ENTITYDETAILS'-> 'EntityScreen'->'Entity'->'Master' as EDScreen
		from temps limit 1
		)a
	)entityscreen
;

 	Insert into KBEntityScreenConfigurationMst(EntityDefID,ControlTitle,ServiceLabel,ControlDataType,ControlType,ObjectType,IsIndentifier
	,IsSearchable,IsDisplay,IsRequired,CreatedBy,ModifiedBy,RowIndex,DefaultdataValue,GroupName)
	Select EntityID,MLabel,ServiceLabel, MDataTypeId, MCtrlType, OType, Identifier, IsSearchable,IsDisplay , IsRequired,CreatedBy, ModifiedBy
	,RowIndex,DefaultValue,groupname
	From
	(
		Select Id,EntityID,MLabel,ServiceLabel, MDataTypeId, MCtrlType, OType, Identifier, IsSearchable,IsDisplay 
		, IsRequired,VCreated_By CreatedBy, VCreated_By ModifiedBy,TOrder,MRowIndex RowIndex,DefaultValue,groupname
		from ScreenConfig
	) A
	where not exists(select 1 from KBEntityScreenConfigurationMst b where A.EntityID=b.EntityDefID and A.ServiceLabel=B.ServiceLabel and B.objecttype='EntityDefinition')
	Order by ID
	
	
;

VEntDeftblcols:='';

		Insert into EntityCreation(EntityName,ColumnName,DataType)
		select distinct VEntityName,  Case when A.controltype='CheckBox' then B.ControlValues else A.controltitle end ColumnName,
		Case when A.ControlDataType ='DateTime' then 'timestamp' else 'varchar(500)' END as DataType
		from KBEntityScreenConfigurationMst  A
		 LEFT  JOIN  KBEntityScreenConfigurationDetails B on A.ScreenID=B.ScreenID
		 where A.EntityDefId=VEntityDefId and A.ObjectType='EntityDefinition' ;

		Insert into EntityCreation (EntityName,ColumnName,DataType)
		select VEntityName as EntityName,ColumnName||'ID','BIGINT' 
		from EntityCreation 
		where DataType='DateTime' ;
 

		VEntDeftblcols:=(Select string_agg(Ecolumns,',') as cols
		From
		(
			select '"'||ColumnName||'"'||' '||DataType as Ecolumns
			from EntityCreation
			Order by id
		)cols	);

		VEntDeftblcols:=VEntDeftblcols||',"CreatedDate" varchar(100),"ModifiedDate" varchar(100)';			

		execute(' Create Table '||VEntdefTablename || '("ID" int,"LocationDimensionId" bigint,'||VEntDeftblcols||',"VirtusUTCStartTime" timestamp,"VirtusUTCEndTime" timestamp,"ISACTIVE" BIT Default(''1''))');

return(

	select array_to_json(array_agg(row_to_json(a)))   
	from
	(
		select 1 as "Result", 'ok' as "message", 200 as "code", array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
		from
		(
			select VEntityDefId  as "ENTITY"
			
		) output
	)a
	);

end;

Elseif lower(VTran)='createdynamicentity' then
Begin 

VEntityName:= (select ivalue->'ENTITYDETAILS'->> 'EntityDefName' from temps limit 1);

VEntityguid:=(SELECT md5(random()::text || clock_timestamp()::text)::uuid);
 

IF VEntityDefId is NULL or VEntityDefId =0 
then
begin
VEntityDefId:=(select entitydef_id from kbentitymst where entity_name=VEntityName);
end;
End if;

IF VEntityName is NULL or VEntityName ='' 
then
begin
VEntityName:=(select entity_name from kbentitymst where entitydef_id=VEntityDefId);
end;
End if;

VPrimaryEntityType:=VEntityName;
 
VEntityType=(select EntityType from kbentitymst where entitydef_id=VEntityDefId); 
VEntdefTablename:=(select '"KB_ENTITY_'||VCustomerName||'_'||VEntityName||'"');

 	Insert into Entity(EntityDefID,EntityName,HasBranches,SCREENXML)
	select VEntityDefId,ivalue->'ENTITYDETAILS'->> 'EntityName',NULL ,ivalue->'ENTITYDETAILS'-> 'EntityScreen' 
	from temps limit 1;
	
	UPdate Entity 
	set EntityScreenName=Mst.Entity_Name 
	from  
	KBEntityMst Mst 
	where Entity.EntityDefID=Mst.ENTITYDEF_ID ;

	
 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataType'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataType'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select ivalue->'ENTITYDETAILS'-> 'EntityScreen'->'Entity'->'Master' as EDScreen
		from temps limit 1
		)a
	)entityscreen
	;

Update EntitiesCreation set ColumnValue= case when lower(ctrltype)='list' then replace(replace(ColumnValue,'[',''),']','') else ColumnValue end;

 Update EntitiesCreation set Isidentifier='1'
	 From
	 (
		 select ControlTitle ,EntityDefID
		 from KBEntityScreenConfigurationMst 
		 where IsIndentifier='1' and EntityDefID=VEntityDefId
	 ) B where EntitiesCreation.ColumnName=B.ControlTitle  ;

 Update EntitiesCreation set isrequired='1'
	 From
	 (
		 select ControlTitle ,EntityDefID
		 from KBEntityScreenConfigurationMst 
		 where isrequired='1' and EntityDefID=VEntityDefId
	 ) B where EntitiesCreation.ColumnName=B.ControlTitle  ;
	 

 Update EntitiesCreation set Issearchable='1'
  From
  (
   select ControlTitle ,EntityDefID
   from KBEntityScreenConfigurationMst 
   where issearchable='1' and EntityDefID=VEntityDefId
  ) B where EntitiesCreation.ColumnName=B.ControlTitle  ;
  
If VEntInstName is null or VEntInstName='' then
begin

Update EntitiesCreation set EntityName= ColumnValue
where 
Isidentifier='1' and Issearchable='1';

VEntInstName:=(select EntityName from EntitiesCreation where Isidentifier='1' and Issearchable='1');

end;
end if;

	 delete from EntitiesCreation 
	 where ColumnName not in (
				  Select B.ControlTitle
				 from  KBEntityScreenConfigurationMst B where B.EntityDefID=VEntityDefId and ObjectType='EntityDefinition'
				 );

--//04march2016

if exists  (select 1 from EntitiesCreation  
Join KBEntityScreenConfigurationMst B on  
EntitiesCreation.ColumnName=B.ControlTitle 
and B.EntityDefID=VEntityDefId
where (B.defaultdatavalue is not null  and B.defaultdatavalue!='')
and (EntitiesCreation.ColumnValue is null or  EntitiesCreation.ColumnValue='')
)
then 
begin
 Update EntitiesCreation set ColumnValue=defaultdatavalue
	 From
	 (
		 select defaultdatavalue,ControlTitle
		 from KBEntityScreenConfigurationMst 
		 where  EntityDefID=VEntityDefId and defaultdatavalue is not null and defaultdatavalue is not null and defaultdatavalue!=''
	 ) B where EntitiesCreation.ColumnName=B.ControlTitle and (EntitiesCreation.ColumnValue is null or  EntitiesCreation.ColumnValue='') ;
end;
end if;

 --Update EntitiesCreation set DataType='varchar(500)';
--------------------------------
 

-- If Exists  (	
-- 			Select 1 
-- 			from 
-- 				(
-- 					Select Distinct EPhone.ENTITY_ID 
-- 					from KBEntityPhone Ephone 
-- 					Join EntitiesCreation EC on  Ephone.Value=EC.ColumnValue 
-- 					Join KBEntities KE on Ephone.ENTITY_ID =KE.ENTITY_ID and KE.ENTITYDEF_ID=VEntityDefId
-- 					where EC.ColumnValue is not null and EC.ColumnValue!=''
-- 					
-- 				) B 
-- 			
-- 		) Then
-- 	Begin  
-- 		
-- 		VEntInstId:=(Select Distinct EPhone.ENTITY_ID
-- 				from KBEntityPhone Ephone 
-- 				Join EntitiesCreation EC on  Ephone.Value=EC.ColumnValue 
-- 				Join KBEntities KE on Ephone.ENTITY_ID =KE.ENTITY_ID and KE.ENTITYDEF_ID=VEntityDefId
-- 				where EC.ColumnValue is not null and EC.ColumnValue!='');
-- 	End;
-- 	Else
	Begin   
	
		--  If Exists(Select 1 from EntitiesCreation where Issearchable='1') then
-- 		
-- 		Begin
-- 		
-- 			 VEntInstName:=(Select ColumnValue from EntitiesCreation where Issearchable='1');
-- 			
-- 		End;
-- 		Else
-- 		Begin
-- 		
-- 			VEntInstName:=(
-- 						Select B.ColumnValue
-- 						from KBEntityScreenConfigurationMst A
-- 						Join EntitiesCreation B on A.ServiceLabel=B.ServiceLabel
-- 						where A.IsSearchable='1' and EntityDefID=VEntityDefId 
-- 					);
-- 		End ;
-- 		End if;

		If (select count(*) from kbentities where entity_id=VEntInstId)=0 then
		begin 

		
			Insert into kbentities(ENTITYDEF_ID,ENTITY_NAME,HAS_BRANCHES,screenjson,CREATEDDATE,ModifiedDate,CREATEDBY,ModifiedBy,isactive)
 			SELECT   
 			EntityDefID,VEntInstName ENTITYNAME,'1' as HasBranches,screenxml,VActionDate,VActionDate,VCREATED_BY,VCREATED_BY,'1' isactive
 			from Entity;

			VEntInstId:=(SELECT currval(pg_get_serial_sequence('kbentities','entity_id')))  ;
			/*commented on 22-02-2016 by azeem*/
			/*(select entity_id from kbentities where coalesce(ENTITY_NAME,'')=coalesce(VEntInstName,'') and isactive='1' order by entity_id desc limit 1);*/
 
 				-- If VEntityType=1 then
-- 				Begin
-- 				
-- 					VPassword:=ivalue->'ENTITYDETAILS'->>'Password'
-- 					from temps 
-- 					limit 1;
-- 					
-- 					Insert into kbusermst_c2(USER_NAME,PASSWORD,USERTYPE,STATUS,ISACTIVE)
-- 					SELECT   ENTITYNAME,coalesce(VPassword,ENTITYNAME),0 userType,0 Status,'0' IsActive 
-- 					from Entity ;
-- 
-- 				End;
-- 				End if;

			
				Insert into Branches(BranchName,BranchID,BranchNumber)
				SELECT '-100', 0,1;
			
 
				Insert into KBEntityLocations(LOCATION_NAME,ENTITY_ID,CREATEDBY,ISACTIVE,CREATEDDATE,ModifiedDate)
				SELECT '-100' BranchID,VEntInstId,VCREATED_BY,'0',VActiondate,VActiondate
				from Branches;

				
					
				Begin
				 
						Update Branches
							Set BranchID= Locs.LOCATION_ID
						From
						 KBEntityLocations Locs where Cast(Branches.BranchID as varchar(100))=Locs.LOCATION_NAME and ENTITY_ID=VEntInstId;
				
				end;
				

			/* inserting into the dynamic table*/

			VEntDeftblcols:='';
			
			VEntDeftblcols:=(Select string_agg(Ecolumns,',') as cols
			From
			(
				select '"'||ColumnName||'"' as Ecolumns
				from EntitiesCreation
				Order by id
			)cols	);

			VEntDeftblcols:=VEntDeftblcols||',"CreatedDate" ,"ModifiedDate"';

 
			VEntinstcoldata:='';
			VEntinstcoldata:=(Select string_agg(Ecolumns,',') as cols
			From
			(
				select case when lower(datatype) like '%int%' or lower(datatype) like '%decimal%' then case when ColumnValue='' then 'NULL' else ColumnValue end 
				else ''''||ColumnValue||'''' end as Ecolumns
				from EntitiesCreation
				Order by id
			)cols	);

			VEntinstcoldata=VEntinstcoldata||','''||cast(VActionDate as varchar(100))||''''||','||''''||cast(VActionDate as varchar(100))||''''; --GetutcDate()

-- return(
-- 	select array_to_json(array_agg(row_to_json(output))) 
-- 	from
-- 	(
-- 	select VEntdefTablename
-- 	)output
-- 	);

		 	Execute('Insert into '||VEntdefTablename || '("ID",entityguid,'||  VEntDeftblcols ||',"VirtusUTCStartTime","VirtusUTCEndTime","ISACTIVE")Values('||
				cast(VEntInstId as varchar(50))||','''||VEntityguid||''','|| VEntinstcoldata||','''||cast(VActiondate as varchar(50)) ||''',NULL,''1'')');

			/* inserting into entityphone*/

			BEGIN
	  
				Insert into KBEntityPhone(ENTITY_ID, SOURCETYPEID, SOURCENAME, LOCATION_ID, "name","value" ,RowID   ,PHONENO,CREATEDBY,CREATEDDATE,MODIFIEDDATE)
				Select VEntInstId EntityId, b.SOURCETYPEID, NULL,C.LOCATION_ID,b.METRICNAME,A.ColumnValue,row_number() Over(Order by b.sourcetypeid) rowid,A.ColumnValue
				,VCREATED_BY,VActionDate,VActionDate
				From
				EntitiesCreation A
				Join KBSpokeConfigurations b on A.ColumnName=B.EntityAttribute and B.EntitydefID=VEntityDefId
				Join KBEntityLocations C on C.ENTITY_ID=VEntInstId
				where not exists(Select 1 from KBEntityPhone CC where b.SOURCETYPEID=CC.SOURCETYPEID and C.ENTITY_ID=CC.ENTITY_ID);
			
			END;
			
			
		end;
		end if;

Insert into kbentitydata(entitydefid, entityid, metricname, metricvalue,createdby, modifiedby)
select VEntityDefId,VEntInstId, ColumnName, cast(regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') as  varchar(50)),Vcreated_by, Vcreated_by
from entitiescreation
where lower(ctrltype)like 'list%'
;

If lower(VPrimaryEntityType)='target' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Device';

VSourceEntityId:=VEntInstId ;

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'device%')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'device%')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int)
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Site';

VSourceEntityId:=VEntInstId ;

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'sites')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid,cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'sites')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int)
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

 

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Identifier';

VSourceEntityId:=VEntInstId ;

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid,cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

end;
	/* new implementation Identifier to Device start */

Elseif lower(VPrimaryEntityType)='device' then
begin

VPrimaryEntityType:= 'Device';
VSecondaryEntityType:= 'Identifier';

VSourceEntityId:=VEntInstId ;

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid,cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

end;
end if;

--return(VEntInstId);

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VEntityDefId "EntityDefId"
				,VEntInstId "EntityId"
				,VEntityDefId "ENTITYDEFID"
				,VEntInstId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "CreatedDate"
				,VActionDate "ModifiedDate"
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "ModifiedBy"	
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "CreatedBy"	
				,VEntityName "EntityDefName"
				,VID as "VID"
				,case when lower(VTypeOfEntity)='target' then
				(
					select Array_agg(id)
					from
					(
						select legacy_system_id id
						from
						(
							select regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid
							from entitiescreation
							where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
						) inputs
						Join "KB_ENTITY_Circles_Identifier" ide on cast(secondaryentityid as int)=ide."ID"	
						where secondaryentityid is not null and secondaryentityid!=''
					)identi	
				) end "SystemIdentifiers"
				,case when lower(VTypeOfEntity)='target' then
				(
					select legacy_system_id 
					from
					"KB_ENTITY_Circles_Target" ide 
					where ide."ID" = VSourceEntityId
					limit 1
				) end "TargetLegacyId"
				,array_to_json(array_agg(row_to_json(aa)))   "EntityScreen"
				,array_agg(branches) "Branchs"
				from
				(
					select 
					array_to_json(array_agg(row_to_json(a)))   as "Entity"
					from
					(
						select array_to_json(array_agg(row_to_json(output)))  as "Master"
						from
						(
							select 
							RowIndex as "RowIndex"
							,ColumnName "Label",ServiceLabel "ServiceLabel",originalDataType "DataType", CtrlType "ControlType",  IsRequired "IsRequired"
							, isIdentifier "IsIndentifier", '' "DefaultValue", ColumnValue "InputValue", groupname "GroupName ", branchnumber "BranchNumber"
							, issearchable  "IsSearchable"
							from 
							EntitiesCreation
							
						) output
					)a
				) aa
				,(
					Select Array_to_json(Array_Agg(Row_to_json(br))) "Branch"
					from
					(
						select Locs.Location_Name as "Name", Locs.Location_ID as "ID"
						,'Name,ID' "Attribute_list" 
						,
						(
							Select Row_to_json(spks) "SPOKES"
							from
							(
								Select Array_to_json(Array_Agg(Row_to_json(spk))) "SPOKE"
								from
								(
								select SOURCETYPEID as "SpokeID",Spokes.SOURCETYPE_NAME as "SpokeName"
								,'' as "BranchNumber"
								,'SpokeID,SpokeName,BranchNumber' "Attribute_list" 
								,
								(
									Select Array_to_json(Array_Agg(Row_to_json(cust))) as "CUSTOMERIDENTIFIER"
									from
									(
										select RowID as "RowId","value" as "Value",Name as "Name",LOCATION_ID as "BranchId"
										,'RowId,Value,Name,BranchId' "Attribute_list" 
										from KBEntityPhone Phone
										where Mst.SOURCETYPEID=Phone.SOURCETYPEID and Phone.ENTITY_ID=Locs.ENTITY_ID
										--Locs.Location_id
										and isactive='1'
										--for xml raw('CUSTOMERIDENTIFIER')
									) as Cust
								)
								from KBEntityPhone Mst 
								JOIN KbsourcetypeMst Spokes on Mst.SOURCETYPEID=Spokes.SOURCETYPE_ID
								where Mst.ENTITY_ID=Locs.ENTITY_ID--Locs.Location_id
								group by SOURCETYPE_NAME,Mst.SOURCETYPEID
								--for xml raw('SPOKE'),Root('SPOKES')
								)as spk
							)spks	
						)
						from KbEntitylocations Locs
						Left JOIN KBEntityPhone KCP on Locs.Location_id=KCP.LOCATION_ID
						where Locs.ENTITY_ID= VEntInstId
						group by  Locs.Location_Name  ,Locs.Location_ID,Locs.ENTITY_ID
						--for xml raw('Branch'),root('Branchs')
					)as br
				)branches
					
			)output	
		 
	);

 

-- 
-- return(select row_to_json(outs) from (
-- 	Select Array_to_json(Array_Agg(Row_to_json(br))) "Branch"
-- 					from
-- 					(
-- 						select Locs.Location_Name as "Name", Locs.Location_ID as "ID"
-- 						,'Name,ID' "Attribute_list" 
-- 						,
-- 						(
-- 							Select Row_to_json(spks) "SPOKES"
-- 							from
-- 							(
-- 								Select Array_to_json(Array_Agg(Row_to_json(spk))) "SPOKE"
-- 								from
-- 								(
-- 								select SOURCETYPEID as "SpokeID",Spokes.SOURCETYPE_NAME as "SpokeName"
-- 								,'' as "BranchNumber"
-- 								,'SpokeID,SpokeName,BranchNumber' "Attribute_list" 
-- 								,
-- 								(
-- 									Select Array_to_json(Array_Agg(Row_to_json(cust))) as "CUSTOMERIDENTIFIER"
-- 									from
-- 									(
-- 										select RowID as "RowId","value" as "Value",Name as "Name",LOCATION_ID as "BranchId"
-- 										,'RowId,Value,Name,BranchId' "Attribute_list" 
-- 										from KBEntityPhone Phone
-- 										where Mst.SOURCETYPEID=Phone.SOURCETYPEID and Phone.ENTITY_ID=Locs.ENTITY_ID
-- 										--Locs.Location_id
-- 										and isactive='1'
-- 										--for xml raw('CUSTOMERIDENTIFIER')
-- 									) as Cust
-- 								)
-- 								from KBEntityPhone Mst 
-- 								JOIN KbsourcetypeMst Spokes on Mst.SOURCETYPEID=Spokes.SOURCETYPE_ID
-- 								where Mst.ENTITY_ID=Locs.ENTITY_ID--Locs.Location_id
-- 								group by SOURCETYPE_NAME,Mst.SOURCETYPEID
-- 								--for xml raw('SPOKE'),Root('SPOKES')
-- 								)as spk
-- 							)spks	
-- 						)
-- 						from KbEntitylocations Locs
-- 						Left JOIN KBEntityPhone KCP on Locs.Location_id=KCP.LOCATION_ID
-- 						where Locs.ENTITY_ID= VEntInstId
-- 						group by  Locs.Location_Name  ,Locs.Location_ID,Locs.ENTITY_ID
-- 						--for xml raw('Branch'),root('Branchs')
-- 					)as br)outs);
-- 

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

-- 
-- /* 
-- 
-- VAnalysisupdate:=(	Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 			From
-- 			(
-- 
-- 				Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 				From
-- 				(
-- 
-- 					select   'structuralupdate' "type",4 as seq
-- 					,
-- 					(select array_to_json(array_agg(row_to_json(atables))) as "table"
-- 					from
-- 					(
-- 						select   '"RPT_'|| ReportConfigurationName||'"' as "name",'collection' as "type",R.ServiceTime as scheduletime,R.ServiceTimeUOM as uom,
-- 								(Select array_to_json(array_agg(row_to_json(columns)))  as "column"
-- 								from
-- 								(
-- 
-- 									select A.name as name,A.datatype,A.type,A.idcolumn,A.inputtable,A.inputcolumn,A. inputidcolumn ,A."rule" from 
-- 													( 
-- 									  
-- 														select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 														,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 														,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias|'MetricDetails' else '"DIM_Entity_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 														,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 														,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 														,'entityfilters' as "rule"
-- 														,recordid as Torder
-- 														from EntityLocations T
-- 														  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 														  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 														  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 														  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 														  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 														Left JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													   Left JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 														where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and (screen.ObjectType='EntityDefinition' or screen.ObjectType is null)
-- 														 and MetaData.ReportConfigurationID=R.ReportConfigurationID
-- 										
-- 													UNION ALL
-- 													
-- 													select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 													,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 													,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias||'MetricDetails' else '"DIM_EnBranch_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 													,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 													,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 													,'entityfilters' as "rule"
-- 													,recordid as Torder
-- 													from EntityLocations T
-- 													  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 													  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 													  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 													  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 													  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 													  JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													  JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 													where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and screen.ObjectType='Branch'
-- 													and MetaData.ReportConfigurationID=R.ReportConfigurationID
-- 										 
-- 										 
-- 										
-- 											)A order by A.Torder desc
-- 								) as columns
-- 								)
-- 								,
-- 								(
-- 									select 'entityfilters' as "name"
-- 									,
-- 									(select array_to_json(array_agg(row_to_json(b)))  as "filter"
-- 									from
-- 										(	
-- 											select array_to_json(array_agg(row_to_json(a)))  as "and"
-- 											from
-- 											(
-- 											    select A.idcolumn,A.inputidcolumn,A.condition, A.isnull
-- 											    from
-- 											    (
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCStartTime' as inputidcolumn,'<=' condition,'' isnull
-- 												  UNION ALL
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCEndTime' as inputidcolumn,'>=' condition,'true' isnull
-- 											    )A 
-- 											)a
-- 										)b
-- 									)	
-- 								)
-- 
-- 
-- 
-- 								
-- 							
-- 							from KBReportsConfigurationMSt R
-- 							where R.IsActive='1'	
-- 						)atables
-- 						)
-- 						)iprocesstype	
-- 			)processtype	
-- 		)					;
-- 
-- VEventsupdate:=(	Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 			From
-- 			(
-- 
-- 				Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 				From
-- 				(
-- 
-- 					select   'structuralupdate' "type",4 as seq
-- 					,
-- 					(select array_to_json(array_agg(row_to_json(atables))) as "table"
-- 					from
-- 					(
-- 						select   '"DMCOLLECTION_'|| EVENT_SD||'"' as name,'events' as type,R.ServiceTime as scheduletime,R.ServiceTimeUOM as uom,
-- 								(Select array_to_json(array_agg(row_to_json(columns)))  as "column"
-- 								from
-- 								(
-- 
-- 									select A.name as name,A.datatype,A.type,A.idcolumn,A.inputtable,A.inputcolumn,A. inputidcolumn ,A."rule" from 
-- 													(
-- 									  
-- 														select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 														,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 														,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias||'MetricDetails' else '"DIM_Entity_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 														,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 														,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 														,'entityfilters' as "rule"
-- 														,recordid as Torder
-- 														from EntityLocations T
-- 														  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 														  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 														  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 														  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 														  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 														Left JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													   Left JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 														where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and (screen.ObjectType='EntityDefinition' or screen.ObjectType is null)
-- 														 and MetaData.eventid=ISNULL(R.OriginalID,R.Event_ID)
-- 										
-- 													UNION ALL
-- 													
-- 													select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 													,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 													,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias||'MetricDetails' else '"DIM_EnBranch_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 													,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 													,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 													,'entityfilters' as "rule"
-- 													,recordid as Torder
-- 													from EntityLocations T
-- 													  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 													  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 													  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 													  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 													  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 													  JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													  JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 													where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and screen.ObjectType='Branch'
-- 													and MetaData.eventid=ISNULL(R.OriginalID,R.Event_ID)
-- 										 
-- 										 
-- 										
-- 											)A order by A.Torder desc
-- 								) as columns
-- 								)
-- 								,
-- 								(
-- 									select 'entityfilters' as "name"
-- 									,
-- 									(select array_to_json(array_agg(row_to_json(b)))  as "filter"
-- 									from
-- 										(	
-- 											select array_to_json(array_agg(row_to_json(a)))  as "and"
-- 											from
-- 											(
-- 											    select A.idcolumn,A.inputidcolumn,A.condition, A.isnull
-- 											    from
-- 											    (
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCStartTime' as inputidcolumn,'<=' condition,'' isnull
-- 												  UNION ALL
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCEndTime' as inputidcolumn,'>=' condition,'true' isnull
-- 											    )A 
-- 											)a
-- 										)b
-- 									)	
-- 								)
-- 
-- 
-- 
-- 								
-- 							
-- 							from kbeventsMst R
-- 							where R.IsActive=1	
-- 						)atables
-- 						)
-- 						)processtype	
-- 			)processtype
-- 		);
-- 
-- VFactsInfo:=	(	select array_to_json(array_agg(row_to_json(output)))  as "tables"
-- 			from
-- 			(
-- 				select array_to_json(array_agg(row_to_json(FactsInfo)))  as "table"
-- 				from
-- 				(
-- 					select distinct '"Fact_'||Mst.Alias||'MetricDetails"' "name" 
-- 					from EntityLocations EL
-- 					join kbsourcetypeMst Mst on Mst.SOURCETYPE_ID=EL.Sourceid
-- 				)FactsInfo	
-- 			) output
-- 		)	;
-- 
-- 
-- */

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);

-- 
-- exception when others then 
-- 		Return(
-- 
-- 				Select row_to_json(a) 
-- 				from
-- 				(select 500 "code", 'error' "message")a
-- 
-- 		);
		
	End;
	--End if;

end;

ElseIf Lower(Vtran)='updateentitydefinition' then
begin

VEntdefTablename:=(select '"KB_ENTITY_'||VCustomerName||'_'||VEntityName||'"');

VEntityDefId:=(select entitydef_id from kbentitymst where entity_name=VEntityName and isactive='1');

Insert into ScreenConfig(EntityID,MRowIndex,MLabel,ServiceLabel, MDataTypeId, MCtrlType, IsRequired, Identifier, IsSearchable,IsDisplay,DefaultValue
	,CRowIndex,CValue, OType,TOrder,groupname,IsNewlyAdded)

	select  VEntityDefId as Entitydefid
		,cast(EDScreen->>'RowIndex' as int) as  RowIndex
		,EDScreen->>'Label' as  VLabel
		,EDScreen->>'ServiceLabel' as ServiceLabel
		,EDScreen->>'DataTypeId' as DataTypeId
		,EDScreen->>'CtrlType' as CtrlType

		,cast(EDScreen->>'IsRequired' as bit) as IsRequired
		,cast(EDScreen->>'Identifier' as bit) as Isidentifier
		,cast(EDScreen->>'IsSearchable' as bit) as IsSearchable

		,NULL as IsDisplay
		,EDScreen->>'DefaultValue' as DefaultValue
		,NULL as CRowIndex
		,NULL as CValue
		,'EntityDefinition' as Objecttype
		,NULL as TOrder
		,EDScreen->>'GroupName' as groupname
		,cast(EDScreen->>'IsNewlyAdded' as smallint) as IsNewlyAdded
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select ivalue->'ENTITYDETAILS'-> 'EntityScreen'->'Entity'->'Master' as EDScreen
		from temps limit 1
		)a
	)entityscreen
;

 	Insert into KBEntityScreenConfigurationMst(EntityDefID,ControlTitle,ServiceLabel,ControlDataType,ControlType,ObjectType,IsIndentifier
	,IsSearchable,IsDisplay,IsRequired,CreatedBy,ModifiedBy,RowIndex,DefaultdataValue,GroupName)

	Select EntityID,MLabel,ServiceLabel, MDataTypeId, MCtrlType, OType, Identifier, IsSearchable,IsDisplay , IsRequired,CreatedBy, ModifiedBy
	,RowIndex,DefaultValue,groupname
	From
	(
		Select Id,EntityID,MLabel,ServiceLabel, MDataTypeId, MCtrlType, OType, Identifier, IsSearchable,IsDisplay 
		, IsRequired,VCreated_By CreatedBy, VCreated_By ModifiedBy,TOrder,MRowIndex RowIndex,DefaultValue,groupname
		from ScreenConfig
		where IsNewlyAdded=1
	) A
	where not exists(select 1 from KBEntityScreenConfigurationMst b where A.EntityID=b.EntityDefID and A.ServiceLabel=B.ServiceLabel and B.objecttype='EntityDefinition')
	Order by ID
	
	
;

VEntDeftblcols:='';

		Insert into EntityCreation(EntityName,ColumnName,DataType)
		select distinct VEntityName,  Case when A.controltype='CheckBox' then B.ControlValues else A.controltitle end ColumnName,
		Case when A.ControlDataType ='DateTime' then 'timestamp' else 'varchar(500)' END as DataType
		from KBEntityScreenConfigurationMst  A
		 LEFT  JOIN  KBEntityScreenConfigurationDetails B on A.ScreenID=B.ScreenID
		 where A.EntityDefId=VEntityDefId and A.ObjectType='EntityDefinition' 
		 and exists(select 1 from ScreenConfig SC where IsNewlyAdded=1 and SC.EntityID=A.EntityDefID and SC.MLabel=A.ControlTitle and A.objecttype='EntityDefinition');

		Insert into EntityCreation (EntityName,ColumnName,DataType)
		select VEntityName as EntityName,ColumnName||'ID','BIGINT' 
		from EntityCreation 
		where DataType='DateTime' ;
 

		VEntDeftblcols:=(Select string_agg(Ecolumns,',') as cols
		From
		(
			select '"'||ColumnName||'"'||' '||DataType as Ecolumns
			from EntityCreation
			Order by id
		)cols	);

		VEntDeftblcols:=' add column '||VEntDeftblcols;
		VEntDeftblcols:= Replace(VEntDeftblcols,',',', add column ');

		execute(' Alter Table '||VEntdefTablename || VEntDeftblcols||'');
return(

	select array_to_json(array_agg(row_to_json(a)))   
	from
	(
		select 1 as "Result", 'ok' as "message", 200 as "code", array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
		from
		(
			select VEntityDefId  as "ENTITY"
			
		) output
	)a
	);

end;
Elseif Lower(Vtran)='partialupdate' then
begin

VEntityName:=(select ivalue->'ENTITYDETAILS'->> 'EntityDefName' from temps limit 1);
VEntityType=(select EntityType from kbentitymst where entitydef_id=VEntityDefId); 

VEntInstId:=(select ivalue->'ENTITYDETAILS'->> 'EntityId' from temps limit 1);
VEntInstname:=(select entity_name from kbentities where entity_id=VEntInstId and isactive=cast('1' as bit) limit 1);

VEntityDefId:=(select entitydef_id from kbentitymst where entity_name=VEntityName);

VEntdefTablename:=(select '"KB_ENTITY_'||VCustomerName||'_'||VEntityName||'"');

VPrimaryEntityType:=VEntityName;

	If (exists(Select 1 from kbentities where entity_id=VEntInstId and isactive='0') or not exists(Select cast('1' as bit) from kbentities where entity_id=VEntInstId)
		OR exists(Select 1 from kbentities ents where entity_id=VEntInstId 
								and Exists(Select 1 from kbentitymst entmst 
									where ents. Entitydef_id=entmst.Entitydef_id and lower(entmst.Entity_name)!=lower(VTypeOfEntity))) 
	)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VTypeOfEntity as "message", 404 as "code"
		) output
		);
	end;
	End if;
	

 	Insert into Entity(EntityDefID,EntityName,HasBranches,SCREENXML)
	select VEntityDefId,VEntInstname,NULL ,ivalue->'ENTITYDETAILS'-> 'EntityScreen' 
	from temps limit 1;
	
	UPdate Entity 
	set EntityScreenName=Mst.Entity_Name 
	from  
	KBEntityMst Mst 
	where Entity.EntityDefID=Mst.ENTITYDEF_ID ;

	
 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataType'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataType'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select ivalue->'ENTITYDETAILS'-> 'EntityScreen'->'Entity'->'Master' as EDScreen
		from temps limit 1
		)a
	)entityscreen
	;

-- Return(
-- 	select array_to_json(array_agg(row_to_json(output))) 
-- 	from
-- 	(
-- 	select * from EntitiesCreation
-- 	) output
-- );

 Update EntitiesCreation set Isidentifier='1'
	 From
	 (
		 select ControlTitle ,EntityDefID
		 from KBEntityScreenConfigurationMst 
		 where IsIndentifier='1' and EntityDefID=VEntityDefId
	 ) B where EntitiesCreation.ColumnName=B.ControlTitle  ;

	 delete from EntitiesCreation 
	 where ColumnName not in (
				  Select B.ControlTitle
				 from  KBEntityScreenConfigurationMst B where B.EntityDefID=VEntityDefId and ObjectType='EntityDefinition'
				 );
 

 --Update EntitiesCreation set DataType='varchar(500)';
--------------------------------
 
/* retreiving the coulmns missing in the input */
 
Insert into missingcolumns(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

select VEntinstname entityname, controltitle,NULL datas, controltype CtrlType,'varchar(500)' DataType,NULL,NULL,Isindentifier
			, ServiceLabel,1 BranchNumber, RowIndex, IsRequired, GroupName,'1' IsUpdate,Issearchable, controldatatype originaldatatype 
from kbentityscreenconfigurationmst screens
where entitydefid=VEntityDefId and not exists (select * from EntitiesCreation a where screens.controltitle=a.ColumnName)
and objecttype='EntityDefinition'
;
-- Return(
-- 	select array_to_json(array_agg(row_to_json(output))) 
-- 	from
-- 	(
-- 	select * from missingcolumns
-- 	) output
-- );
	Begin   
	 

		--If (select count(*) from kbentities where entity_id=VEntInstId)>0 then
		begin

			 	Insert into Branches(BranchName,BranchID,BranchNumber)
				SELECT '-100', 0,1;
			
 
				Begin
				 
						Update Branches
							Set BranchID= Locs.LOCATION_ID
						From
						 KBEntityLocations Locs where Cast(Branches.BranchID as varchar(100))=Locs.LOCATION_NAME and ENTITY_ID=VEntInstId;
				
				end;
				

			/* inserting into the dynamic table*/

			VEntDeftblcols:='';
			
			VEntDeftblcols:=(Select string_agg(Ecolumns,'||') as cols
			From
			(
				select 'coalesce(cast("'||ColumnName||'" as varchar(500)),'''')||''#sep0#''||'''||ColumnName ||'''||''#sep1#''' as Ecolumns
				from missingcolumns
				Order by id
			)cols	); 

--Voutput:=('select ' || VEntDeftblcols||' from '||VEntdefTablename||' where "ID"='|| Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''');

			If VEntDeftblcols is not null then
			begin
			Execute( 'select ' || VEntDeftblcols||' from '||VEntdefTablename||' where "ID"='|| Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''') into Voutput;
			end;
			end if;
			

-- 
-- Return(
-- 	select array_to_json(array_agg(row_to_json(output))) 
-- 	from
-- 	(
-- 	 select Voutput
-- 	) output
-- );
			
			Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
			, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)
			select distinct VEntinstname entityname, labels, datas, controltype CtrlType,controldatatype DataType,NULL,NULL,Isindentifier
			, ServiceLabel,1 BranchNumber, RowIndex, IsRequired, GroupName,cast('1' as bit) IsUpdate,Issearchable, controldatatype originaldatatype
			from
			(
				select VEntityDefId Entitydefid,substring(outputdata,position('#sep0#' in outputdata)+6, char_length( outputdata)) as labels
				, substring(outputdata,0,position('#sep0#' in outputdata)) as datas
				from
				(
					select regexp_split_to_table(Voutput,'#sep1#') as outputdata
				) a
			 ) tabdata
			 join kbentityscreenconfigurationmst b on tabdata.Entitydefid=b.entitydefid and objecttype='EntityDefinition' and lower(b.controltitle)=lower(tabdata.labels)
; 
			update EntitiesCreation set columnvalue=(case when lower(CtrlType)='list' then '['||columnvalue||']' else columnvalue end);

			VEntDeftblcols:='';
			
			VEntDeftblcols:=(Select string_agg(Ecolumns,',') as cols
			From
			(
				select '"'||ColumnName||'"' as Ecolumns
				from EntitiesCreation
				Order by id
			)cols	); 

			
			--//04march2016

			if exists  (select 1 from EntitiesCreation  
			Join KBEntityScreenConfigurationMst B on  
			EntitiesCreation.ColumnName=B.ControlTitle 
			and B.EntityDefID=VEntityDefId
			where (B.defaultdatavalue is not null  and B.defaultdatavalue!='')
			and (EntitiesCreation.ColumnValue is null or  EntitiesCreation.ColumnValue='')
			)
			then 
			begin
			 Update EntitiesCreation set ColumnValue=defaultdatavalue
				 From
				 (
					 select defaultdatavalue,ControlTitle
					 from KBEntityScreenConfigurationMst 
					 where  EntityDefID=VEntityDefId and defaultdatavalue is not null and defaultdatavalue is not null and defaultdatavalue!=''
				 ) B where EntitiesCreation.ColumnName=B.ControlTitle and (EntitiesCreation.ColumnValue is null or  EntitiesCreation.ColumnValue='') ;
			end;
			end if;

-- return(
-- 
-- 	Select array_to_json(array_agg(row_to_json(output))) 
-- 	from
-- 	(
-- 	
-- 	select * from EntitiesCreation
-- 	) output
-- );

			
			VEntDeftblcols:=VEntDeftblcols||',"CreatedDate" ,"ModifiedDate"';

			VEntinstcoldata:='';
			VEntinstcoldata:=(Select string_agg(Ecolumns,',') as cols
			From
			(
				select case when lower(datatype) like '%int%' or lower(datatype) like '%decimal%' then case when ColumnValue='' then 'NULL' else ColumnValue end 
				else ''''||ColumnValue||'''' end as Ecolumns
				from EntitiesCreation
				Order by id
			)cols	);

			VEntinstcoldata=VEntinstcoldata||','''||cast(VActionDate as varchar(100))||''''||','||''''||cast(VActionDate as varchar(100))||''''; --GetutcDate()

-- 
-- return(
-- 
-- 	Select array_to_json(array_agg(row_to_json(output))) 
-- 	from
-- 	(
-- 	
-- 	select VEntinstcoldata
-- 	) output
-- );

						
			VIsentityUpdate:= (select cast(ivalue->'ENTITYDETAILS'->> 'IsUpdate' as bit) from temps limit 1);

 
			--If VIsentityUpdate='1' then
			Begin
					Execute(' select entityguid from  '||VEntdefTablename || ' where  "ID"=' || Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''') into Ventityguid;

					 Execute(' update '||VEntdefTablename || ' set "VirtusUTCEndTime"='''||Cast(VActiondate as varchar(50))||''',"ISACTIVE"=''0'' where "ID"='
					 || Cast(VEntinstId as varchar(50))||' and "ISACTIVE"=''1''');

					Execute('Insert into '||VEntdefTablename || '("ID",'||  VEntDeftblcols ||',"VirtusUTCStartTime","VirtusUTCEndTime","ISACTIVE",entityguid)Values('||
					cast(VEntInstId as varchar(50))||','||VEntinstcoldata||','''||cast(VActiondate as varchar(50)) ||''',NULL,''1'','''||coalesce(Ventityguid,'') || ''' )');
			End;
			--End if;

/* updating the entityscreen in the entities table */

				Ventityscreen:=(
						Select row_to_json(aa)   as "Entity"
						from
						(
							Select row_to_json(a)   as "Entity"
							from
							(
								select 1 as "IsUpdate", array_to_json(array_agg(row_to_json(output)))  as "Master"
								from
								(
									select 
									RowIndex as "RowIndex"
									,ColumnName "Label",ServiceLabel "ServiceLabel",originalDataType "DataType", CtrlType "CtrlType"
									,  IsRequired "IsRequired", isIdentifier "IsIndentifier"
									, '' "DefaultValue"
									,ColumnValue "InputValue"
									, groupname "GroupName ", branchnumber "BranchNumber"
									from 
									EntitiesCreation A
									
								) output
							)a
						) aa
						);

-- Return(select array_to_json(array_agg(row_to_json(output))) 
-- from
-- (
-- 	select 111,* from EntitiesCreation
-- )output
-- )
-- ;
--return(Ventityscreen);

			update kbentities set screenjson=Ventityscreen, modifieddate=Vactiondate, modifiedby=VCreated_By where entity_id=Ventinstid and isactive='1';

			/* inserting into entityphone*/

			BEGIN

			Update KBEntityPhone set isactive='0' where entity_id=VEntinstid and isactive='1';
	  
				Insert into KBEntityPhone(ENTITY_ID, SOURCETYPEID, SOURCENAME, LOCATION_ID, "name","value" ,RowID   ,PHONENO,CREATEDBY,CREATEDDATE,MODIFIEDDATE)
				Select VEntInstId EntityId, b.SOURCETYPEID, NULL,C.LOCATION_ID,b.METRICNAME,A.ColumnValue,row_number() Over(Order by b.sourcetypeid) rowid,A.ColumnValue
				,VCREATED_BY,VActionDate,VActionDate
				From
				EntitiesCreation A
				Join KBSpokeConfigurations b on A.ColumnName=B.EntityAttribute and B.EntitydefID=VEntityDefId
				Join KBEntityLocations C on C.ENTITY_ID=VEntInstId
				where not exists(Select 1 from KBEntityPhone CC where b.SOURCETYPEID=CC.SOURCETYPEID and C.ENTITY_ID=CC.ENTITY_ID and CC.isactive='1')
				;
			
			END;
			
			
		end;
		--end if;
 

Update kbentitydata set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by
from
(
	select VEntityDefId entitydefid,VEntInstId entityid, ColumnName, cast(columnvalue as varchar(1000)) Metricvalue,Vcreated_by created_by
	from entitiescreation
	where lower(ctrltype)like 'list%'
)A
where kbentitydata.entitydefid= A.entitydefid and kbentitydata.entityid=A.entityid and kbentitydata.metricname=A.ColumnName and kbentitydata.Metricvalue not in
(
select cast(regexp_split_to_table(Replace(Replace(A.Metricvalue,'[',''),']',''),',') as  varchar(50)) Metricvalue
);

Insert into kbentitydata(entitydefid, entityid, metricname, metricvalue,createdby, modifiedby)
select entitydefid,entityid, ColumnName, Metricvalue,created_by, created_by
From
(
	select VEntityDefId entitydefid,VEntInstId entityid, ColumnName, cast(regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') as  varchar(50)) Metricvalue,Vcreated_by created_by
	from entitiescreation
	where lower(ctrltype)like 'list%'
)A
where not exists (select 1 from kbentitydata b where A.entitydefid=b.entitydefid and A.entityid=b.entityid and A.ColumnName=b.metricname and A.Metricvalue=b.Metricvalue)
;

/* updating the isactive as 0 the old values for the entity instance updated*/

update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by where primaryentityid=VEntInstId;
update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by where secondaryentityid=VEntInstId;

If lower(VPrimaryEntityType)='target' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Device';

VSourceEntityId:=VEntInstId ;

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

 
 
Update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by
from
(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,cast(columnvalue as varchar(1000))  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'device%')
)A
where kbentityrelationdetails.primaryentitydefinitionid= A.primaryentitydefinitionid and kbentityrelationdetails.primaryentityid=A.primaryentityid 
	and kbentityrelationdetails.secondaryentitydefinitionid=A.secondaryentitydefinitionid 
and kbentityrelationdetails.secondaryentityid not in
(
	Select cast(Metricvalue as  int) Metricvalue
	from
	(
	select regexp_split_to_table(Replace(Replace(A.secondaryentityid,'[',''),']',''),',') Metricvalue
	)A
	where Metricvalue is not null and Metricvalue!=''
	
);

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'device%')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'device%')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Site';

VSourceEntityId:=VEntInstId ;

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where  lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where  lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	Update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,cast(columnvalue as varchar(1000))  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'sites')
	)A
	where kbentityrelationdetails.primaryentitydefinitionid= A.primaryentitydefinitionid and kbentityrelationdetails.primaryentityid=A.primaryentityid 
	and kbentityrelationdetails.secondaryentitydefinitionid=A.secondaryentitydefinitionid 
	and kbentityrelationdetails.secondaryentityid not in
	(
	Select cast(Metricvalue as  int) Metricvalue
	from
	(
	select regexp_split_to_table(Replace(Replace(A.secondaryentityid,'[',''),']',''),',') Metricvalue
	)A
	where Metricvalue is not null and Metricvalue!=''
	);

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'sites')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid,cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'sites')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

 

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Identifier';

VSourceEntityId:=VEntInstId ;

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where  lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where  lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	Update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,cast(columnvalue as varchar(1000))  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifiers')
	)A
	where kbentityrelationdetails.primaryentitydefinitionid= A.primaryentitydefinitionid and kbentityrelationdetails.primaryentityid=A.primaryentityid 
	and kbentityrelationdetails.secondaryentitydefinitionid=A.secondaryentitydefinitionid 
	and kbentityrelationdetails.secondaryentityid not in
	(
	Select cast(Metricvalue as  int) Metricvalue
	from
	(
	select regexp_split_to_table(Replace(Replace(A.secondaryentityid,'[',''),']',''),',') Metricvalue
	)A
	where Metricvalue is not null and Metricvalue!=''
	);

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifiers')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid,cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifiers%')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

End;
ElseIf lower(VPrimaryEntityType)='device' then
begin

	/* new implementation Identifier to Device start */

	VPrimaryEntityType:= 'Device';
	VSecondaryEntityType:= 'Identifier';

	VSourceEntityId:=VEntInstId ;

	select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
	into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
	from kbentityrelationsmst A
	Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
	where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid,cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

end;
end if;

end;

---

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VEntityDefId "EntityDefId"
				,VEntInstId "EntityId"
				,VEntityDefId "ENTITYDEFID"
				,VEntInstId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "ModifiedDate"
				,(select user_name from kbentities a join kbusermst_c2 users on a.createdby=users.user_id where a.entity_id=VEntinstid) as "CreatedBy"
				,(select createddate from kbentities a  where a.entity_id=VEntinstid) as "CreatedDate"
				,(select user_name from kbusermst_c2 users where users.user_id=VCreated_by) as "ModifiedBy"
				,VEntityName "EntityDefName"
				,VID as "VID"
				,case when lower(VTypeOfEntity)='target' then
				(
					select Array_agg(id)
					from
					(
						select legacy_system_id id
						from
						(
							select regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid
							from entitiescreation
							where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
						) inputs
						Join "KB_ENTITY_Circles_Identifier" ide on cast(secondaryentityid as int)=ide."ID"	
						where secondaryentityid is not null and secondaryentityid!=''
					)identi	
				) end "SystemIdentifiers"
				,case when lower(VTypeOfEntity)='target' then
				(
					select legacy_system_id 
					from
					"KB_ENTITY_Circles_Target" ide 
					where ide."ID" = VSourceEntityId
					limit 1
				) end "TargetLegacyId"
				,array_to_json(array_agg(row_to_json(aa)))   "EntityScreen"
				,array_agg(branches) "Branchs"
				from
				(
					select 
					array_to_json(array_agg(row_to_json(a)))   as "Entity"
					from
					(
						select array_to_json(array_agg(row_to_json(output)))  as "Master"
						from
						(
							select 
							RowIndex as "RowIndex"
							,ColumnName "Label",ServiceLabel "ServiceLabel",originalDataType "DataType", CtrlType "CtrlType",  IsRequired "IsRequired", isIdentifier "IsIndentifier"
							, '' "DefaultValue", ColumnValue "InputValue", groupname "GroupName ", branchnumber "BranchNumber"
							from 
							EntitiesCreation
							
						) output
					)a
				) aa
				,(
					Select Array_to_json(Array_Agg(Row_to_json(br))) "Branch"
					from
					(
						select Locs.Location_Name as "Name", Locs.Location_ID as "ID"
						,'Name,ID' "Attribute_list" 
						,
						(
							Select Row_to_json(spks) "SPOKES"
							from
							(
								Select Array_to_json(Array_Agg(Row_to_json(spk))) "SPOKE"
								from
								(
								select SOURCETYPEID as "SpokeID",Spokes.SOURCETYPE_NAME as "SpokeName"
								,'' as "BranchNumber"
								,'SpokeID,SpokeName,BranchNumber' "Attribute_list" 
								,
								(
									Select Array_to_json(Array_Agg(Row_to_json(cust))) as "CUSTOMERIDENTIFIER"
									from
									(
										select RowID as "RowId","value" as "Value",Name as "Name",LOCATION_ID as "BranchId"
										,'RowId,Value,Name,BranchId' "Attribute_list" 
										from KBEntityPhone Phone
										where Mst.SOURCETYPEID=Phone.SOURCETYPEID and Phone.ENTITY_ID=Locs.ENTITY_ID
										--Locs.Location_id
										and isactive='1'
										--for xml raw('CUSTOMERIDENTIFIER')
									) as Cust
								)
								from KBEntityPhone Mst 
								JOIN KbsourcetypeMst Spokes on Mst.SOURCETYPEID=Spokes.SOURCETYPE_ID
								where Mst.ENTITY_ID=Locs.ENTITY_ID--Locs.Location_id
								group by SOURCETYPE_NAME,Mst.SOURCETYPEID
								--for xml raw('SPOKE'),Root('SPOKES')
								)as spk
							)spks	
						)
						from KbEntitylocations Locs
						Left JOIN KBEntityPhone KCP on Locs.Location_id=KCP.LOCATION_ID
						where Locs.ENTITY_ID= VEntInstId
						group by  Locs.Location_Name  ,Locs.Location_ID,Locs.ENTITY_ID
						--for xml raw('Branch'),root('Branchs')
					)as br
				)branches
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

-- 
-- /* 
-- 
-- VAnalysisupdate:=(	Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 			From
-- 			(
-- 
-- 				Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 				From
-- 				(
-- 
-- 					select   'structuralupdate' "type",4 as seq
-- 					,
-- 					(select array_to_json(array_agg(row_to_json(atables))) as "table"
-- 					from
-- 					(
-- 						select   '"RPT_'|| ReportConfigurationName||'"' as "name",'collection' as "type",R.ServiceTime as scheduletime,R.ServiceTimeUOM as uom,
-- 								(Select array_to_json(array_agg(row_to_json(columns)))  as "column"
-- 								from
-- 								(
-- 
-- 									select A.name as name,A.datatype,A.type,A.idcolumn,A.inputtable,A.inputcolumn,A. inputidcolumn ,A."rule" from 
-- 													( 
-- 									  
-- 														select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 														,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 														,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias|'MetricDetails' else '"DIM_Entity_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 														,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 														,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 														,'entityfilters' as "rule"
-- 														,recordid as Torder
-- 														from EntityLocations T
-- 														  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 														  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 														  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 														  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 														  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 														Left JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													   Left JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 														where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and (screen.ObjectType='EntityDefinition' or screen.ObjectType is null)
-- 														 and MetaData.ReportConfigurationID=R.ReportConfigurationID
-- 										
-- 													UNION ALL
-- 													
-- 													select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 													,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 													,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias||'MetricDetails' else '"DIM_EnBranch_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 													,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 													,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 													,'entityfilters' as "rule"
-- 													,recordid as Torder
-- 													from EntityLocations T
-- 													  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 													  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 													  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 													  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 													  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 													  JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													  JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 													where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and screen.ObjectType='Branch'
-- 													and MetaData.ReportConfigurationID=R.ReportConfigurationID
-- 										 
-- 										 
-- 										
-- 											)A order by A.Torder desc
-- 								) as columns
-- 								)
-- 								,
-- 								(
-- 									select 'entityfilters' as "name"
-- 									,
-- 									(select array_to_json(array_agg(row_to_json(b)))  as "filter"
-- 									from
-- 										(	
-- 											select array_to_json(array_agg(row_to_json(a)))  as "and"
-- 											from
-- 											(
-- 											    select A.idcolumn,A.inputidcolumn,A.condition, A.isnull
-- 											    from
-- 											    (
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCStartTime' as inputidcolumn,'<=' condition,'' isnull
-- 												  UNION ALL
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCEndTime' as inputidcolumn,'>=' condition,'true' isnull
-- 											    )A 
-- 											)a
-- 										)b
-- 									)	
-- 								)
-- 
-- 
-- 
-- 								
-- 							
-- 							from KBReportsConfigurationMSt R
-- 							where R.IsActive='1'	
-- 						)atables
-- 						)
-- 						)iprocesstype	
-- 			)processtype	
-- 		)					;
-- 
-- VEventsupdate:=(	Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 			From
-- 			(
-- 
-- 				Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 				From
-- 				(
-- 
-- 					select   'structuralupdate' "type",4 as seq
-- 					,
-- 					(select array_to_json(array_agg(row_to_json(atables))) as "table"
-- 					from
-- 					(
-- 						select   '"DMCOLLECTION_'|| EVENT_SD||'"' as name,'events' as type,R.ServiceTime as scheduletime,R.ServiceTimeUOM as uom,
-- 								(Select array_to_json(array_agg(row_to_json(columns)))  as "column"
-- 								from
-- 								(
-- 
-- 									select A.name as name,A.datatype,A.type,A.idcolumn,A.inputtable,A.inputcolumn,A. inputidcolumn ,A."rule" from 
-- 													(
-- 									  
-- 														select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 														,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 														,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias||'MetricDetails' else '"DIM_Entity_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 														,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 														,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 														,'entityfilters' as "rule"
-- 														,recordid as Torder
-- 														from EntityLocations T
-- 														  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 														  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 														  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 														  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 														  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 														Left JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													   Left JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 														where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and (screen.ObjectType='EntityDefinition' or screen.ObjectType is null)
-- 														 and MetaData.eventid=ISNULL(R.OriginalID,R.Event_ID)
-- 										
-- 													UNION ALL
-- 													
-- 													select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 													,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 													,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias||'MetricDetails' else '"DIM_EnBranch_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 													,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 													,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 													,'entityfilters' as "rule"
-- 													,recordid as Torder
-- 													from EntityLocations T
-- 													  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 													  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 													  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 													  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 													  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 													  JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													  JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 													where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and screen.ObjectType='Branch'
-- 													and MetaData.eventid=ISNULL(R.OriginalID,R.Event_ID)
-- 										 
-- 										 
-- 										
-- 											)A order by A.Torder desc
-- 								) as columns
-- 								)
-- 								,
-- 								(
-- 									select 'entityfilters' as "name"
-- 									,
-- 									(select array_to_json(array_agg(row_to_json(b)))  as "filter"
-- 									from
-- 										(	
-- 											select array_to_json(array_agg(row_to_json(a)))  as "and"
-- 											from
-- 											(
-- 											    select A.idcolumn,A.inputidcolumn,A.condition, A.isnull
-- 											    from
-- 											    (
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCStartTime' as inputidcolumn,'<=' condition,'' isnull
-- 												  UNION ALL
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCEndTime' as inputidcolumn,'>=' condition,'true' isnull
-- 											    )A 
-- 											)a
-- 										)b
-- 									)	
-- 								)
-- 
-- 
-- 
-- 								
-- 							
-- 							from kbeventsMst R
-- 							where R.IsActive=1	
-- 						)atables
-- 						)
-- 						)processtype	
-- 			)processtype
-- 		);
-- 
-- VFactsInfo:=	(	select array_to_json(array_agg(row_to_json(output)))  as "tables"
-- 			from
-- 			(
-- 				select array_to_json(array_agg(row_to_json(FactsInfo)))  as "table"
-- 				from
-- 				(
-- 					select distinct '"Fact_'||Mst.Alias||'MetricDetails"' "name" 
-- 					from EntityLocations EL
-- 					join kbsourcetypeMst Mst on Mst.SOURCETYPE_ID=EL.Sourceid
-- 				)FactsInfo	
-- 			) output
-- 		)	;
-- 
-- 
-- */

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);
 
		
	

end;

Elseif Lower(Vtran)='delete' then
begin

	Viterguid:= (select ivalue->'ENTITYDETAILS'->> 'guid' from temps limit 1);

	If Viterguid is not null and viterguid!='' then
	begin

		select ivalue->'ENTITYDETAILS'->> 'identifier',ivalue->'ENTITYDETAILS'->> 'identifiername'  into Videntifier,Videntifiername
		from temps limit 1;

		select entity_name,createdby,entitytablename into VEntityName,Vcreated_by,VEntdefTablename 
		from kbentitymst 
		where lower(entity_name)= lower(vtypeofentity) and isactive='1';

		VCustomerName:=(
					Select customername from KBUserCustomerMapping usermap join kbcustomersmst customers on usermap.customerid=customers.customerid	
					where userid=VCreated_By limit 1
				);

		Execute('select "ID" from '||VEntdefTablename || ' where "'|| Videntifiername || '" = '''|| Videntifier || ''' and "ISACTIVE"=''1''') into VEntInstId ;
  
		Insert into kbentitypullhistory(entityid,pull_guid,actiontype,createddate,modifieddate)
		select VEntInstId,Viterguid, 'delete',Vactiondate ,Vactiondate;

	end;
	Else
	Begin

		VEntityName:=(select a.entity_name from kbentitymst a join kbentities b on a.entitydef_id=b.entitydef_id and b.entity_id=VEntInstId where b.isactive='1');

		VEntdefTablename:=(select '"KB_ENTITY_'||VCustomerName||'_'||VEntityName||'"');

	End;
	end if;

	If (exists(Select 1 from kbentities where entity_id=VEntInstId and isactive='0') or not exists(Select cast('1' as bit) from kbentities where entity_id=VEntInstId)
		OR exists(Select 1 from kbentities ents where entity_id=VEntInstId 
								and Exists(Select 1 from kbentitymst entmst 
								where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) !=Lower(VTypeOfEntity))) 
	)
	then
	begin

	
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VTypeOfEntity as "message", 404 as "code"
		) output
		);
	end;
	end if;

Update kbentitydata set isactive='0', modifieddate= current_timestamp at time zone 'utc', modifiedby=VCreated_by
where entityid=VEntInstId;

 
Update kbentityrelationdetails set isactive='0' where primaryentityid=VEntInstId;
Update kbentityrelationdetails set isactive='0' where secondaryentityid=VEntInstId;

Update kbentities set Isactive='0', modifieddate= current_timestamp at time zone 'utc', modifiedby=VCreated_by
where entity_id=VEntInstId;

If lower(VTypeOfEntity) ='target' then
begin
	 Execute(' update '||VEntdefTablename || ' set "VirtusUTCEndTime"='''||Cast(VActiondate as varchar(50))||''',"ISACTIVE"=''0'',master_entity_id=NULL where "ID"='
					 || Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''');

end;
else
begin

	 Execute(' update '||VEntdefTablename || ' set "VirtusUTCEndTime"='''||Cast(VActiondate as varchar(50))||''',"ISACTIVE"=''0'' where "ID"='
					 || Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''');
end;
end if;

 

If lower(VTypeOfEntity) ='target' or Lower(VTypeOfEntity)='identifier' or lower(VTypeofEntity)='security_tag' then
begin

Execute(' select legacy_system_id from  '||VEntdefTablename || ' where  "ID"=' || Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''') into VLegacysystemid;

end;
Else
end if;

return(

	Select row_to_json(output)
	from
	(
	
	Select 1 as "Result",VLegacysystemid "LegacySystemid", 'ok' as "message", 200 as "code"
	) output
);

end;
Elseif Lower(Vtran)='connecttocase' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Case';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid!=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Target already linked to another case '  as "message", 500 as "code"
		/*||cast(VSourceEntityId as varchar) ||', secondary entity id:'||cast(VDestEntityId as varchar)*/
		) output
		);
	End;
	ElseIf Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already exists: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	INSERT INTO public.kbentityrelationdetails(
	relationid, primaryentitydefinitionid, primaryentityid, 
	primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid, VDestEntityId secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');

	/*reverse relation insertion*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,VDestEntityId primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	,VCreated_By createdby
	,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');			
	

return(

	Select (row_to_json(output))
	from
	(
	
	Select 1 as "Result", 'ok' as "message", 200 as "code"
	) output
);

 

end;
Elseif Lower(Vtran)='removefromcase' or Lower(Vtran)='disconnectfromcase' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Case';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If not Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Cannot delete as Relation does not exist: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (
			Select isactive 
			from 
			kbentityrelationdetails A
			where relationdetailid=
			(
				select max(B.relationdetailid)
				from kbentityrelationdetails B
				where B.primaryentitydefinitionid=VSourceEntityDefId and B.secondaryentitydefinitionid=VDestEntityDefId
				and B.primaryentityid=VSourceEntityId and B.secondaryentityid=VDestEntityId 
			) 
		)='0' then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already deleted: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	Update kbentityrelationdetails Set  IsActive='0', Modifiedby=VCreated_by,modifieddate=VActiondate
			where primaryentitydefinitionid= VSourceEntityDefId and primaryentityid=VSourceEntityId
			and  secondaryentitydefinitionid=VDestEntityDefId and  secondaryentityid=VDestEntityId and IsActive='1';
	
return(

	Select (row_to_json(output))
	from
	(
	
	Select 1 as "Result", 'ok' as "message", 200 as "code"
	) output
);

end;
Elseif Lower(Vtran)='adddevice' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Device';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);
VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	IF Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already exists: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id 
									and lower(entmst.Entity_name)!=lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id 
									and lower(entmst.Entity_name)!=Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	INSERT INTO public.kbentityrelationdetails(
	relationid, primaryentitydefinitionid, primaryentityid, 
	primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid, VDestEntityId secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');

	/*reverse relation insertion*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,VDestEntityId primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	,VCreated_By createdby
	,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');			
	
	
	Insert into kbentitydata(Entitydefid, entityid, metricname, metricvalue,createdby,modifiedby)
	select 	VSourceEntityDefId, VSourceEntityId, VEntityMetricName, VDestEntityId, VCreated_by,VCreated_by
	where not exists(select 1 from kbentitydata where Entitydefid=VSourceEntityDefId and entityid=VSourceEntityId and metricname=VEntityMetricName and metricvalue=cast(VDestEntityId as varchar(50)) and isactive='1');

/* Updating the dynamic table*/

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=VSourceEntityDefId);

VDevicedata:=	(
			select string_agg(Ecolumns,',')
			from
			(
				select cast(secondaryentityid as varchar(100)) as Ecolumns
				from kbentityrelationdetails 
				where primaryentityid=VSourceEntityId and isactive='1' 
				and lower(primaryentitytype)=lower(VPrimaryEntityType) and lower(secondaryentitytype)=lower(Vsecondaryentitytype)
			)a
		)
;

If VDevicedata is not null then
begin

 Execute(' update '||VEntdefTablename || ' set "devices"='''||VDevicedata||''' where "ID"='|| Cast(VSourceEntityId as varchar(50))||' and "ISACTIVE"=''1''');

 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataType'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataType'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select screenjson->'Entity'-> 'Master' as EDScreen
		from kbentities
		where entity_id=VSourceEntityId and isactive='1'
		)a
	)entityscreen
	;
	
VDevicedata:='['||VDevicedata||']';

Update EntitiesCreation set columnvalue=VDevicedata
where lower(ColumnName)='devices'
;

Ventityscreen:=(			
		select row_to_json(aa)  "ScreenConfig"
		from
		(
			select 
			row_to_json(a)   as "Entity"
			from
			(
				select NULL "IsUpdate", array_to_json(array_agg(row_to_json(output)))  as "Master"
				from
				(
					select 
					RowIndex as "RowIndex"
					,ColumnName "Label"
					,ServiceLabel "ServiceLabel"
					,originaldatatype "DataType"
					,CtrlType "ControlType"
					,IsRequired "IsRequired"
					,Isidentifier "IsIndentifier"
					,Issearchable "IsSearchable"
					,NULL as "IsDisplay"
					,NULL "DefaultValue", GroupName "GroupName"
					,ColumnValue as "InputValue"
					from 
					EntitiesCreation
					
				) output
			)a
		) aa
			)		

;

Update kbentities set screenjson =Ventityscreen where entity_id=VSourceEntityId and isactive='1';

/* output simialr to entitycreation*/
select entity_name,EntityType into VEntityName, VEntityType from kbentitymst where entitydef_id=VSourceEntityDefId;
VEntInstName:=(select entity_name from kbentities where entity_id=VSourceEntityId);

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VSourceEntityDefId "EntityDefId"
				,VSourceEntityId "EntityId"
				,VSourceEntityDefId "ENTITYDEFID"
				,VSourceEntityId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "CreatedDate"
				,VActionDate "ModifiedDate"
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "ModifiedBy"	
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "CreatedBy"	
				,VEntityName "EntityDefName"
				,VID as "VID"
				,Ventityscreen   "EntityScreen"
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);

end;
else
begin
		
return(

	Select (row_to_json(output))
	from
	(
	
	Select -1 as "Result", 'Invalid json message received' as "message", 404 as "code"
	) output
);

end;
end if;
		
end;
Elseif Lower(Vtran)='removedevice' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Device';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);
VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If not Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Cannot delete as Relation does not exist: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (
			Select isactive 
			from 
			kbentityrelationdetails A
			where relationdetailid=
			(
				select max(B.relationdetailid)
				from kbentityrelationdetails B
				where B.primaryentitydefinitionid=VSourceEntityDefId and B.secondaryentitydefinitionid=VDestEntityDefId
				and B.primaryentityid=VSourceEntityId and B.secondaryentityid=VDestEntityId 
			) 
		)='0' then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already deleted: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf  (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id 
									and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst 
										where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	Update kbentityrelationdetails Set IsActive='0', Modifiedby=VCreated_by, modifieddate=Vactiondate
			where primaryentitydefinitionid= VSourceEntityDefId and primaryentityid=VSourceEntityId
			and  secondaryentitydefinitionid=VDestEntityDefId and  secondaryentityid=VDestEntityId and IsActive='1';
	

	Update kbentitydata set  IsActive='0', Modifiedby=VCreated_by
	where Entitydefid=VSourceEntityDefId and entityid=VSourceEntityId and metricname=VEntityMetricName and metricvalue=cast(VDestEntityId as varchar(50)) and isactive='1';

/* Updating the dynamic table*/

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=VSourceEntityDefId);

VDevicedata:=	(
			select string_agg(Ecolumns,',')
			from
			(
				select cast(secondaryentityid as varchar(100)) as Ecolumns
				from kbentityrelationdetails 
				where primaryentityid=VSourceEntityId and isactive='1' 
				and lower(primaryentitytype)=lower(VPrimaryEntityType) and lower(secondaryentitytype)=lower(Vsecondaryentitytype)
			)a
		)
;

Execute(' update '||VEntdefTablename || ' set "devices"='''||coalesce(VDevicedata,'')||''' where "ID"='|| Cast(VSourceEntityId as varchar(50))||' and "ISACTIVE"=''1''');

 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataTypeId'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataTypeId'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select screenjson->'Entity'-> 'Master' as EDScreen
		from kbentities
		where entity_id=VSourceEntityId and isactive='1'
		)a
	)entityscreen
	;

VDevicedata:='['||VDevicedata||']';

Update EntitiesCreation set columnvalue=VDevicedata
where lower(ColumnName)='devices'
;

Ventityscreen:=(			select row_to_json(aa)  "ScreenConfig"
					from
					(
						select 
						row_to_json(a)   as "Entity"
						from
						(
							select NULL "IsUpdate", array_to_json(array_agg(row_to_json(output)))  as "Master"
							from
							(
								select 
								RowIndex as "RowIndex"
								,ColumnName "Label"
								,ServiceLabel "ServiceLabel"
								,originaldatatype "DataType"
								,CtrlType "ControlType"
								,IsRequired "IsRequired"
								,Isidentifier "IsIndentifier"
								,Issearchable "IsSearchable"
								,NULL as "IsDisplay"
								,NULL "DefaultValue", GroupName "GroupName"
								,ColumnValue as "InputValue"
								from 
								EntitiesCreation
								
							) output
						)a
					) aa
			)		

;

Update kbentities set screenjson =Ventityscreen where entity_id=VSourceEntityId and isactive='1';

/* output simialr to entitycreation*/
select entity_name,EntityType into VEntityName, VEntityType from kbentitymst where entitydef_id=VSourceEntityDefId;
VEntInstName:=(select entity_name from kbentities where entity_id=VSourceEntityId);

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VSourceEntityDefId "EntityDefId"
				,VSourceEntityId "EntityId"
				,VSourceEntityDefId "ENTITYDEFID"
				,VSourceEntityId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "CreatedDate"
				,VActionDate "ModifiedDate"
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "ModifiedBy"	
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "CreatedBy"	
				,VEntityName "EntityDefName"
				,VID as "VID"
				,Ventityscreen   "EntityScreen"
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);

end;
Elseif Lower(Vtran)='addidentifier' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Identifier';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);
VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already exists: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	INSERT INTO public.kbentityrelationdetails(
	relationid, primaryentitydefinitionid, primaryentityid, 
	primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid, VDestEntityId secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VdestEntityId and isactive='1');
	

		/*reverse relation insertion*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,VDestEntityId primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	,VCreated_By createdby
	,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');			
	

	Insert into kbentitydata(Entitydefid, entityid, metricname, metricvalue,createdby,modifiedby)
	select 	VSourceEntityDefId, VSourceEntityId, VEntityMetricName, VDestEntityId, VCreated_by,VCreated_by
	where not exists(select 1 from kbentitydata where Entitydefid=VSourceEntityDefId and entityid=VSourceEntityId and metricname=VEntityMetricName and metricvalue=cast(VDestEntityId as varchar(50)) and isactive='1');
		

/* Updating the dynamic table*/

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=VSourceEntityDefId);

VDevicedata:=	(
			select string_agg(Ecolumns,',')
			from
			(
				select cast(secondaryentityid as varchar(100)) as Ecolumns
				from kbentityrelationdetails 
				where primaryentityid=VSourceEntityId and isactive='1' 
				and lower(primaryentitytype)=lower(VPrimaryEntityType) and lower(secondaryentitytype)=lower(Vsecondaryentitytype)
			)a
		)
;

If VDevicedata is not null then
begin

 Execute(' update '||VEntdefTablename || ' set "identifiers"='''||VDevicedata||''' where "ID"='|| Cast(VSourceEntityId as varchar(50))||' and "ISACTIVE"=''1''');

 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataType'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataType'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select screenjson->'Entity'-> 'Master' as EDScreen
		from kbentities
		where entity_id=VSourceEntityId and isactive='1'
		)a
	)entityscreen
	;
VDevicedata:='['||VDevicedata||']';

Update EntitiesCreation set columnvalue=VDevicedata
where lower(ColumnName)='identifiers'
;

Ventityscreen:=(			select row_to_json(aa)  "ScreenConfig"
					from
					(
						select 
						row_to_json(a)   as "Entity"
						from
						(
							select NULL "IsUpdate", array_to_json(array_agg(row_to_json(output)))  as "Master"
							from
							(
								select 
								RowIndex as "RowIndex"
								,ColumnName "Label"
								,ServiceLabel "ServiceLabel"
								,originaldatatype "DataType"
								,CtrlType "ControlType"
								,IsRequired "IsRequired"
								,Isidentifier "IsIndentifier"
								,Issearchable "IsSearchable"
								,NULL as "IsDisplay"
								,NULL "DefaultValue"
								, GroupName "GroupName"
								,ColumnValue as "InputValue"
								from 
								EntitiesCreation
								
							) output
						)a
					) aa
			)		

;

-- 
-- return(		
-- 	select array_to_json(array_agg(row_to_json(output)))
-- 	from
-- 	(
-- 		select Ventityscreen
-- 	)output
-- 	);

Update kbentities set screenjson =Ventityscreen where entity_id=VSourceEntityId and isactive='1';

/* output simialr to entitycreation*/
select entity_name,EntityType into VEntityName, VEntityType from kbentitymst where entitydef_id=VSourceEntityDefId;
VEntInstName:=(select entity_name from kbentities where entity_id=VSourceEntityId);

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VSourceEntityDefId "EntityDefId"
				,VSourceEntityId "EntityId"
				,VSourceEntityDefId "ENTITYDEFID"
				,VSourceEntityId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "CreatedDate"
				,VActionDate "ModifiedDate"
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "ModifiedBy"	
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "CreatedBy"	
				,VEntityName "EntityDefName"
				,VID as "VID"
				,Ventityscreen   "EntityScreen"
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);

end;
else
begin
		
return(

	Select (row_to_json(output))
	from
	(
	
	Select -1 as "Result", 'Invalid json message received' as "message", 404 as "code"
	) output
);

end;
end if;
		

end;
Elseif Lower(Vtran)='removeidentifier' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Identifier';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);
VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If not Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Cannot delete as Relation does not exist: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (
			Select isactive 
			from 
			kbentityrelationdetails A
			where relationdetailid=
			(
				select max(B.relationdetailid)
				from kbentityrelationdetails B
				where B.primaryentitydefinitionid=VSourceEntityDefId and B.secondaryentitydefinitionid=VDestEntityDefId
				and B.primaryentityid=VSourceEntityId and B.secondaryentityid=VDestEntityId 
			) 
		)='0' then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already deleted: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	Update kbentityrelationdetails Set IsActive='0', Modifiedby=VCreated_by, modifieddate=VActiondate
			where primaryentitydefinitionid= VSourceEntityDefId and primaryentityid=VSourceEntityId 
			and  secondaryentitydefinitionid=VDestEntityDefId and  secondaryentityid=VDestEntityId and IsActive='1';
	
	
	Update kbentityrelationdetails Set IsActive='0', Modifiedby=VCreated_by, modifieddate=VActiondate
			where primaryentitydefinitionid=VDestEntityDefId  and primaryentityid= VDestEntityId
			and  secondaryentitydefinitionid=VSourceEntityDefId and  secondaryentityid=VSourceEntityId and IsActive='1';
	

	Update kbentitydata set  IsActive='0', Modifiedby=VCreated_by
	where Entitydefid=VSourceEntityDefId and entityid=VSourceEntityId and metricname=VEntityMetricName and metricvalue=cast(VDestEntityId as varchar(50)) and isactive='1';

/* Updating the dynamic table*/

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=VSourceEntityDefId);

VDevicedata:=	(
			select string_agg(Ecolumns,',')
			from
			(
				select cast(secondaryentityid as varchar(100)) as Ecolumns
				from kbentityrelationdetails 
				where primaryentityid=VSourceEntityId and isactive='1' 
				and lower(primaryentitytype)=lower(VPrimaryEntityType) and lower(secondaryentitytype)=lower(Vsecondaryentitytype)
			)a
		)
;

begin

 Execute(' update '||VEntdefTablename || ' set "identifiers"='''||coalesce(VDevicedata,'')||''' where "ID"='|| Cast(VSourceEntityId as varchar(50))||' and "ISACTIVE"=''1''');

Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataTypeId'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataTypeId'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select screenjson->'Entity'-> 'Master' as EDScreen
		from kbentities
		where entity_id=VSourceEntityId and isactive='1'
		)a
	)entityscreen
	;

VDevicedata:='['||VDevicedata||']';

Update EntitiesCreation set columnvalue=VDevicedata
where lower(ColumnName)='identifiers'
;

Ventityscreen:=(			select row_to_json(aa)  "ScreenConfig"
					from
					(
						select 
						row_to_json(a)   as "Entity"
						from
						(
							select NULL "IsUpdate", array_to_json(array_agg(row_to_json(output)))  as "Master"
							from
							(
								select 
								RowIndex as "RowIndex"
								,ColumnName "Label"
								,ServiceLabel "ServiceLabel"
								,originaldatatype "DataType"
								,CtrlType "ControlType"
								,IsRequired "IsRequired"
								,Isidentifier "IsIndentifier"
								,Issearchable "IsSearchable"
								,NULL as "IsDisplay"
								,NULL "DefaultValue", GroupName "GroupName"
								,ColumnValue as "InputValue"
								from 
								EntitiesCreation
								
							) output
						)a
					) aa
			)		

;

Update kbentities set screenjson =Ventityscreen where entity_id=VSourceEntityId and isactive='1';

end;

/* output simialr to entitycreation*/
select entity_name,EntityType into VEntityName, VEntityType from kbentitymst where entitydef_id=VSourceEntityDefId;
VEntInstName:=(select entity_name from kbentities where entity_id=VSourceEntityId);

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VSourceEntityDefId "EntityDefId"
				,VSourceEntityId "EntityId"
				,VSourceEntityDefId "ENTITYDEFID"
				,VSourceEntityId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "CreatedDate"
				,VActionDate "ModifiedDate"
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "ModifiedBy"	
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "CreatedBy"	
				,VEntityName "EntityDefName"
				,VID as "VID"
				,Ventityscreen   "EntityScreen"
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);

end;
Elseif Lower(Vtran)='addsite' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Site';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);
VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already exists: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	INSERT INTO public.kbentityrelationdetails(
	relationid, primaryentitydefinitionid, primaryentityid, 
	primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid, VDestEntityId secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');

		/*reverse relation insertion*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,VDestEntityId primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	,VCreated_By createdby
	,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');			
	
	

	Insert into kbentitydata(Entitydefid, entityid, metricname, metricvalue,createdby,modifiedby)
	select 	VSourceEntityDefId, VSourceEntityId, VEntityMetricName, VDestEntityId, VCreated_by,VCreated_by
	where not exists(select 1 from kbentitydata where Entitydefid=VSourceEntityDefId and entityid=VSourceEntityId and metricname=VEntityMetricName 
	and metricvalue=cast(VDestEntityId as varchar(50)) and isactive='1');
		
/* Updating the dynamic table*/

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=VSourceEntityDefId);

VDevicedata:=	(
			select string_agg(Ecolumns,',')
			from
			(
				select cast(secondaryentityid as varchar(100)) as Ecolumns
				from kbentityrelationdetails 
				where primaryentityid=VSourceEntityId and isactive='1' 
				and lower(primaryentitytype)=lower(VPrimaryEntityType) and lower(secondaryentitytype)=lower(Vsecondaryentitytype)
			)a
		)
;

If VDevicedata is not null then
begin

 Execute(' update '||VEntdefTablename || ' set "sites"='''||VDevicedata||''' where "ID"='|| Cast(VSourceEntityId as varchar(50))||' and "ISACTIVE"=''1''');

 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataTypeId'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataTypeId'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select screenjson->'Entity'-> 'Master' as EDScreen
		from kbentities
		where entity_id=VSourceEntityId and isactive='1'
		)a
	)entityscreen
	;

VDevicedata:='['||VDevicedata||']';
Update EntitiesCreation set columnvalue=VDevicedata
where lower(ColumnName)='sites'
;

Ventityscreen:=(			select row_to_json(aa)  "ScreenConfig"
					from
					(
						select 
						row_to_json(a)   as "Entity"
						from
						(
							select NULL "IsUpdate", array_to_json(array_agg(row_to_json(output)))  as "Master"
							from
							(
								select 
								RowIndex as "RowIndex"
								,ColumnName "Label"
								,ServiceLabel "ServiceLabel"
								,originaldatatype "DataType"
								,CtrlType "ControlType"
								,IsRequired "IsRequired"
								,Isidentifier "IsIndentifier"
								,Issearchable "IsSearchable"
								,NULL as "IsDisplay"
								,NULL "DefaultValue", GroupName "GroupName"
								,ColumnValue as "InputValue"
								from 
								EntitiesCreation
								
							) output
						)a
					) aa
			)		

;

Update kbentities set screenjson =Ventityscreen where entity_id=VSourceEntityId and isactive='1';

/* output simialr to entitycreation*/
select entity_name,EntityType into VEntityName, VEntityType from kbentitymst where entitydef_id=VSourceEntityDefId;
VEntInstName:=(select entity_name from kbentities where entity_id=VSourceEntityId);

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VSourceEntityDefId "EntityDefId"
				,VSourceEntityId "EntityId"
				,VSourceEntityDefId "ENTITYDEFID"
				,VSourceEntityId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "CreatedDate"
				,VActionDate "ModifiedDate"
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "ModifiedBy"	
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "CreatedBy"	
				,VEntityName "EntityDefName"
				,VID as "VID"
				,Ventityscreen   "EntityScreen"
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);

end;
else
begin
		
return(

	Select (row_to_json(output))
	from
	(
	
	Select -1 as "Result", 'Invalid json message received' as "message", 404 as "code"
	) output
);

end;
end if;
		
end;
Elseif Lower(Vtran)='removesite' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Site';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);
VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If not Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Cannot delete as Relation does not exist: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;  
	ElseIf (
			Select isactive 
			from 
			kbentityrelationdetails A
			where relationdetailid=
			(
				select max(B.relationdetailid)
				from kbentityrelationdetails B
				where B.primaryentitydefinitionid=VSourceEntityDefId and B.secondaryentitydefinitionid=VDestEntityDefId
				and B.primaryentityid=VSourceEntityId and B.secondaryentityid=VDestEntityId 
			) 
		)='0' then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already deleted: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	Update kbentityrelationdetails Set IsActive='0', Modifiedby=VCreated_by, modifieddate=VActiondate
			where primaryentitydefinitionid= VSourceEntityDefId and primaryentityid=VSourceEntityId 
			and  secondaryentitydefinitionid=VDestEntityDefId and  secondaryentityid=VDestEntityId  and IsActive='1';
	

	Update kbentitydata set  IsActive='0', Modifiedby=VCreated_by
	where Entitydefid=VSourceEntityDefId and entityid=VSourceEntityId and metricname=VEntityMetricName and metricvalue=cast(VDestEntityId as varchar(50)) and isactive='1';

/* Updating the dynamic table*/

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=VSourceEntityDefId);

VDevicedata:=	(
			select string_agg(Ecolumns,',')
			from
			(
				select cast(secondaryentityid as varchar(100)) as Ecolumns
				from kbentityrelationdetails 
				where primaryentityid=VSourceEntityId and isactive='1' 
				and lower(primaryentitytype)=lower(VPrimaryEntityType) and lower(secondaryentitytype)=lower(Vsecondaryentitytype)
			)a
		)
;

--If VDevicedata is not null then
begin

 Execute(' update '||VEntdefTablename || ' set "sites"='''||coalesce(VDevicedata,'')||''' where "ID"='|| Cast(VSourceEntityId as varchar(50))||' and "ISACTIVE"=''1''');

 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataTypeId'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataTypeId'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select screenjson->'Entity'-> 'Master' as EDScreen
		from kbentities
		where entity_id=VSourceEntityId and isactive='1'
		)a
	)entityscreen
	;
VDevicedata:='['||VDevicedata||']';

Update EntitiesCreation set columnvalue=VDevicedata
where lower(ColumnName)='sites'
;

Ventityscreen:=(			select row_to_json(aa)  "ScreenConfig"
					from
					(
						select 
						row_to_json(a)   as "Entity"
						from
						(
							select NULL "IsUpdate", array_to_json(array_agg(row_to_json(output)))  as "Master"
							from
							(
								select 
								RowIndex as "RowIndex"
								,ColumnName "Label"
								,ServiceLabel "ServiceLabel"
								,originaldatatype "DataType"
								,CtrlType "ControlType"
								,IsRequired "IsRequired"
								,Isidentifier "IsIndentifier"
								,Issearchable "IsSearchable"
								,NULL as "IsDisplay"
								,NULL "DefaultValue", GroupName "GroupName"
								,ColumnValue as "InputValue"
								from 
								EntitiesCreation
								
							) output
						)a
					) aa
			)		

;

Update kbentities set screenjson =Ventityscreen where entity_id=VSourceEntityId and isactive='1';

end;
/* output simialr to entitycreation*/
select entity_name,EntityType into VEntityName, VEntityType from kbentitymst where entitydef_id=VSourceEntityDefId;
VEntInstName:=(select entity_name from kbentities where entity_id=VSourceEntityId);

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VSourceEntityDefId "EntityDefId"
				,VSourceEntityId "EntityId"
				,VSourceEntityDefId "ENTITYDEFID"
				,VSourceEntityId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "CreatedDate"
				,VActionDate "ModifiedDate"
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "ModifiedBy"	
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "CreatedBy"	
				,VEntityName "EntityDefName"
				,VID as "VID"
				,Ventityscreen   "EntityScreen"
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);
 
end;
Elseif Lower(Vtran)='markasnontarget' then
begin

VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=(select entitydef_id from kbentities where entity_id=Ventinstid limit 1));

Execute('Update '||VEntdefTablename||' set "'||VEntityMetricName||'" =''0'' where "ID"='||cast(Ventinstid as varchar(50))||'');

return(

	Select (row_to_json(output))
	from
	(
	
	Select 1 as "Result", 'ok' as "message", 200 as "code"
	) output
);

end;
Elseif Lower(Vtran)='markastarget' then
begin

VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=(select entitydef_id from kbentities where entity_id=Ventinstid limit 1));

Execute('Update '||VEntdefTablename||' set "'||VEntityMetricName||'" =''1'' where "ID"='||cast(Ventinstid as varchar(50))||'');

return(

	Select (row_to_json(output))
	from
	(
	
	Select 1 as "Result", 'ok' as "message", 200 as "code"
	) output
);

end;
Elseif Lower(Vtran)='activate' then
begin

VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=(select entitydef_id from kbentities where entity_id=Ventinstid limit 1));

Execute('Update '||VEntdefTablename||' set "'||VEntityMetricName||'" =''1'' where "ID"='||cast(Ventinstid as varchar(50))||'');

return(

	Select (row_to_json(output))
	from
	(
	
	Select 1 as "Result", 'ok' as "message", 200 as "code"
	) output
);
end;
Elseif Lower(Vtran)='deactivate' then
begin

VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=(select entitydef_id from kbentities where entity_id=Ventinstid limit 1));

Execute('Update '||VEntdefTablename||' set "'||VEntityMetricName||'" =''0'' where "ID"='||cast(Ventinstid as varchar(50))||'');

return(

	Select (row_to_json(output))
	from
	(
	
	Select 1 as "Result", 'ok' as "message", 200 as "code"
	) output
);
end;
Elseif Lower(Vtran)='restricted' then
begin

VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=(select entitydef_id from kbentities where entity_id=Ventinstid limit 1));

Execute('Update '||VEntdefTablename||' set "'||VEntityMetricName||'" =''1'' where "ID"='||cast(Ventinstid as varchar(50))||'');

return(

	Select (row_to_json(output))
	from
	(
	
	Select 1 as "Result", 'ok' as "message", 200 as "code"
	) output
);
end;
Elseif Lower(Vtran)='unrestricted' then
begin

VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=(select entitydef_id from kbentities where entity_id=Ventinstid limit 1));

Execute('Update '||VEntdefTablename||' set "'||VEntityMetricName||'" =''0'' where "ID"='||cast(Ventinstid as varchar(50))||'');

return(

	Select (row_to_json(output))
	from
	(
	
	Select 1 as "Result", 'ok' as "message", 200 as "code"
	) output
);
end;
Elseif Lower(Vtran)='close' then
begin

VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=(select entitydef_id from kbentities where entity_id=Ventinstid limit 1));

Execute('Update '||VEntdefTablename||' set "'||VEntityMetricName||'" =''0'' where "ID"='||cast(Ventinstid as varchar(50))||'');

return(

	Select (row_to_json(output))
	from
	(
	
	Select 1 as "Result", 'ok' as "message", 200 as "code"
	) output
);
end;
Elseif lower(VTran)='updatedynamicentity' then
Begin 

VEntityName:=(select ivalue->'ENTITYDETAILS'->> 'EntityDefName' from temps limit 1);

VEntityDefId:=(select entitydef_id from kbentitymst where entity_name=VEntityName);

VEntityType=(select EntityType from kbentitymst where entitydef_id=VEntityDefId); 

VEntInstId:=(select ivalue->'ENTITYDETAILS'->> 'EntityId' from temps limit 1);

VEntdefTablename:=(select '"KB_ENTITY_'||VCustomerName||'_'||VEntityName||'"');

VPrimaryEntityType:=VEntityName;

	If (exists(Select 1 from kbentities where entity_id=VEntInstId and isactive='0') or not exists(Select cast('1' as bit) from kbentities where entity_id=VEntInstId)
		OR exists(Select 1 from kbentities ents where entity_id=VEntInstId 
								and Exists(Select 1 from kbentitymst entmst 
								where ents. Entitydef_id=entmst.Entitydef_id and lower(entmst.Entity_name)!=lower(VTypeOfEntity))) 
	)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VTypeOfEntity as "message", 404 as "code"
		) output
		);
	end;
	End if;

 	Insert into Entity(EntityDefID,EntityName,HasBranches,SCREENXML)
	select VEntityDefId,ivalue->'ENTITYDETAILS'->> 'EntityName',NULL ,ivalue->'ENTITYDETAILS'-> 'EntityScreen' 
	from temps limit 1;
	
	UPdate Entity 
	set EntityScreenName=Mst.Entity_Name 
	from  
	KBEntityMst Mst 
	where Entity.EntityDefID=Mst.ENTITYDEF_ID ;

	
 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataType'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataType'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select ivalue->'ENTITYDETAILS'-> 'EntityScreen'->'Entity'->'Master' as EDScreen
		from temps limit 1
		)a
	)entityscreen
	;

 Update EntitiesCreation set Isidentifier='1'
	 From
	 (
		 select ControlTitle ,EntityDefID
		 from KBEntityScreenConfigurationMst 
		 where IsIndentifier='1' and EntityDefID=VEntityDefId
	 ) B where EntitiesCreation.ColumnName=B.ControlTitle  ;

Update EntitiesCreation set columnvalue=(case when lower(CtrlType)='list' then Replace(Replace(columnvalue,'[',''),']','') else columnvalue end);

-- 
-- 	 delete from EntitiesCreation 
-- 	 where ColumnName not in (
-- 				  Select B.ControlTitle
-- 				 from  KBEntityScreenConfigurationMst B where B.EntityDefID=VEntityDefId and ObjectType='EntityDefinition'
-- 				 );

 --Update EntitiesCreation set DataType='varchar(500)';
--------------------------------
 
--//04march2016

if exists  (select 1 from EntitiesCreation  
Join KBEntityScreenConfigurationMst B on  
EntitiesCreation.ColumnName=B.ControlTitle 
and B.EntityDefID=VEntityDefId
where (B.defaultdatavalue is not null  and B.defaultdatavalue!='')
and (EntitiesCreation.ColumnValue is null or  EntitiesCreation.ColumnValue='')
)
then 
begin
 Update EntitiesCreation set ColumnValue=defaultdatavalue
	 From
	 (
		 select defaultdatavalue,ControlTitle
		 from KBEntityScreenConfigurationMst 
		 where  EntityDefID=VEntityDefId and defaultdatavalue is not null and defaultdatavalue is not null and defaultdatavalue!=''
	 ) B where EntitiesCreation.ColumnName=B.ControlTitle and (EntitiesCreation.ColumnValue is null or  EntitiesCreation.ColumnValue='') ;
end;
end if;
 
	Begin   
	 

		--If (select count(*) from kbentities where entity_id=VEntInstId)>0 then
		begin

			-- VEntInstId:=(select entity_id from kbentities where ENTITY_NAME=VEntInstName and isactive='1' limit 1);
-- 
-- 			
 			 VEntityDefId:=(Select ENTITYDEF_ID from KBEntities where ENTITY_ID=VEntInstId limit 1);
	
			update KBEntities 
			set screenjson=Ventityscreen, modifieddate=Vactiondate, modifiedby=Vcreated_by
			where Entity_id=VEntInstId;
		
		 	
				Insert into Branches(BranchName,BranchID,BranchNumber)
				SELECT '-100', 0,1;
			
 
				Begin
				 
						Update Branches
							Set BranchID= Locs.LOCATION_ID
						From
						 KBEntityLocations Locs where Cast(Branches.BranchID as varchar(100))=Locs.LOCATION_NAME and ENTITY_ID=VEntInstId;
				
				end;
				

			/* inserting into the dynamic table*/

			VEntDeftblcols:='';
			
			VEntDeftblcols:=(Select string_agg(Ecolumns,',') as cols
			From
			(
				select '"'||ColumnName||'"' as Ecolumns
				from EntitiesCreation
				Order by id
			)cols	);

			VEntDeftblcols:=VEntDeftblcols||',"CreatedDate" ,"ModifiedDate"';

			VEntinstcoldata:='';
			VEntinstcoldata:=(Select string_agg(Ecolumns,',') as cols
			From
			(
				select  case when lower(datatype) like '%int%' or lower(datatype) like '%decimal%' then case when ColumnValue='' then 'NULL' else ColumnValue end 
				else ''''||ColumnValue||'''' end as Ecolumns
				from EntitiesCreation
				Order by id
			)cols	);

			VEntinstcoldata=VEntinstcoldata||','''||cast(VActionDate as varchar(100))||''''||','||''''||cast(VActionDate as varchar(100))||''''; --GetutcDate()

						
			VIsentityUpdate:= (select cast(ivalue->'ENTITYDETAILS'->> 'IsUpdate' as bit) from temps limit 1);

			-- If @IsUploadentity=1
-- 			set @IsentityUpdate=1
			 
			--If VIsentityUpdate='1' then
			Begin

					Execute(' select entityguid from  '||VEntdefTablename || ' where  "ID"=' || Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''') into Ventityguid;

					If lower(VPrimaryEntityType)='target' or lower(VPrimaryEntityType)='identifier' or lower(VPrimaryEntityType)='security_tag' then
					begin	
						Execute(' select legacy_system_id from  '||VEntdefTablename || ' where  "ID"=' || Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''') into VLegacysystemid;
					end;
					end if;

					 Execute(' update '||VEntdefTablename || ' set "VirtusUTCEndTime"='''||Cast(VActiondate as varchar(50))||''',"ISACTIVE"=''0'' where "ID"='
					 || Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''');

					Execute('Insert into '||VEntdefTablename || '("ID",'||  VEntDeftblcols ||',"VirtusUTCStartTime","VirtusUTCEndTime","ISACTIVE",entityguid)Values('||
					cast(VEntInstId as varchar(50))||','||VEntinstcoldata||','''||cast(VActiondate as varchar(50)) ||''',NULL,''1'','''||coalesce(Ventityguid,'') ||''')');

					If lower(VPrimaryEntityType)='target' or lower(VPrimaryEntityType)='identifier' or lower(VPrimaryEntityType)='security_tag' then
					begin	

					Execute(' update '||VEntdefTablename || ' set legacy_system_id='''||Cast(VLegacysystemid as varchar(50))||''' where "ID"='
					 || Cast(VEntInstId as varchar(50))||' and "ISACTIVE"=''1''');

					end;
					end if; 
			End;
			--End if;

			
			

			/* inserting into entityphone*/

			BEGIN

			Update KBEntityPhone set isactive='0' where entity_id=VEntInstId and isactive='1';
	  
				Insert into KBEntityPhone(ENTITY_ID, SOURCETYPEID, SOURCENAME, LOCATION_ID, "name","value" ,RowID   ,PHONENO,CREATEDBY,CREATEDDATE,MODIFIEDDATE)
				Select VEntInstId EntityId, b.SOURCETYPEID, NULL,C.LOCATION_ID,b.METRICNAME,A.ColumnValue,row_number() Over(Order by b.sourcetypeid) rowid,A.ColumnValue
				,VCREATED_BY,VActionDate,VActionDate
				From
				EntitiesCreation A
				Join KBSpokeConfigurations b on A.ColumnName=B.EntityAttribute and B.EntitydefID=VEntityDefId
				Join KBEntityLocations C on C.ENTITY_ID=VEntInstId
				where not exists(Select 1 from KBEntityPhone CC where b.SOURCETYPEID=CC.SOURCETYPEID and C.ENTITY_ID=CC.ENTITY_ID  and CC.isactive='1')
				;
			
			END;
			
			
		end;
		--end if;

/* updating the isactive as 0 the old values for the entity instance updated*/

update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by where primaryentityid=VEntInstId;
update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by where secondaryentityid=VEntInstId;

Update kbentitydata set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by
from
(
	select VEntityDefId entitydefid,VEntInstId entityid, ColumnName, cast(columnvalue as varchar(1000)) Metricvalue,Vcreated_by created_by
	from entitiescreation
	where lower(ctrltype)like 'list%'
)A
where kbentitydata.entitydefid= A.entitydefid and kbentitydata.entityid=A.entityid and kbentitydata.metricname=A.ColumnName and kbentitydata.Metricvalue not in
(
select cast(regexp_split_to_table(Replace(Replace(A.Metricvalue,'[',''),']',''),',') as  varchar(50)) Metricvalue
);

Insert into kbentitydata(entitydefid, entityid, metricname, metricvalue,createdby, modifiedby)
select entitydefid,entityid, ColumnName, Metricvalue,created_by, created_by
From
(
	select VEntityDefId entitydefid,VEntInstId entityid, ColumnName, cast(regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') as  varchar(50)) Metricvalue,Vcreated_by created_by
	from entitiescreation
	where lower(ctrltype)like 'list%'
)A
where not exists (select 1 from kbentitydata b where A.entitydefid=b.entitydefid and A.entityid=b.entityid and A.ColumnName=b.metricname and A.Metricvalue=b.Metricvalue)

;

If lower(VPrimaryEntityType)='target' then
begin

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Device';

VSourceEntityId:=VEntInstId ;

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	Update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,cast(columnvalue as varchar(1000))  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'device%')
	)A
	where kbentityrelationdetails.primaryentitydefinitionid= A.primaryentitydefinitionid and kbentityrelationdetails.primaryentityid=A.primaryentityid 
	and kbentityrelationdetails.secondaryentitydefinitionid=A.secondaryentitydefinitionid 
	and kbentityrelationdetails.secondaryentityid not in
	(
	Select cast(Metricvalue as  int) Metricvalue
	from
	(
	select regexp_split_to_table(Replace(Replace(A.secondaryentityid,'[',''),']',''),',') Metricvalue
	)A
	where Metricvalue is not null and Metricvalue!=''
	);

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'device%')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid,cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'device%')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Site';

VSourceEntityId:=VEntInstId ;

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where  lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where  lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	Update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,cast(columnvalue as varchar(1000))  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'sites')
	)A
	where kbentityrelationdetails.primaryentitydefinitionid= A.primaryentitydefinitionid and kbentityrelationdetails.primaryentityid=A.primaryentityid 
	and kbentityrelationdetails.secondaryentitydefinitionid=A.secondaryentitydefinitionid 
	and kbentityrelationdetails.secondaryentityid not in
	(
	Select cast(Metricvalue as  int) Metricvalue
	from
	(
	select regexp_split_to_table(Replace(Replace(A.secondaryentityid,'[',''),']',''),',') Metricvalue
	)A
	where Metricvalue is not null and Metricvalue!=''
	);

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'sites')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'sites')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

 

VPrimaryEntityType:= 'Target';
VSecondaryEntityType:= 'Identifier';

VSourceEntityId:=VEntInstId ;

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where  lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where  lower(PrimaryEntityType)=lower(VPrimaryEntityType) and lower(SecondaryEntityType)=lower(VSecondaryEntityType)  and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	Update kbentityrelationdetails set isactive=cast('0' as bit), Modifieddate=VActiondate, ModifiedBy=VCreated_by
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,cast(columnvalue as varchar(1000))  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifiers')
	)A
	where kbentityrelationdetails.primaryentitydefinitionid= A.primaryentitydefinitionid and kbentityrelationdetails.primaryentityid=A.primaryentityid 
	and kbentityrelationdetails.secondaryentitydefinitionid=A.secondaryentitydefinitionid 
	and kbentityrelationdetails.secondaryentityid not in
	(
	Select cast(Metricvalue as  int) Metricvalue
	from
	(
	select regexp_split_to_table(Replace(Replace(A.secondaryentityid,'[',''),']',''),',') Metricvalue
	)A
	where Metricvalue is not null and Metricvalue!=''
	);

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifiers')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid,cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifiers%')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

end;
elseIf lower(VPrimaryEntityType)='device' then
begin

	/* new implementation Identifier to Device start */

VPrimaryEntityType:= 'Device';
VSecondaryEntityType:= 'Identifier';

VSourceEntityId:=VEntInstId ;

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid, primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
	)Aa
	where secondaryentityid is not null and secondaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=AA.primaryentityid 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');

	/* storing the reverse relation below*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select relationid,primaryentitydefinitionid,cast(primaryentityid as int) primaryentityid,primaryentitytype,secondaryentitydefinitionid,cast(secondaryentityid as int) secondaryentityid, 
	secondaryentitytype,createdby,modifiedby
	from
	(
	select 
	VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',') primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId  secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	, VCreated_By createdby
	,VCreated_By modifiedby
	from entitiescreation
	where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
	)Aa
	where primaryentityid is not null and primaryentityid!='' and 
	not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= AA.primaryentitydefinitionid and A.primaryentityid=cast(AA.primaryentityid as int) 
 				and  A.secondaryentitydefinitionid=AA.secondaryentitydefinitionid and  A.secondaryentityid=cast(AA.secondaryentityid as int)  and isactive='1');			

end;
end if;

 
VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VEntityDefId "EntityDefId"
				,VEntInstId "EntityId"
				,VEntityDefId "ENTITYDEFID"
				,VEntInstId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "ModifiedDate"
				,(select user_name from kbentities a join kbusermst_c2 users on a.createdby=users.user_id where a.entity_id=VEntinstid) as "CreatedBy"
				,(select createddate from kbentities a  where a.entity_id=VEntinstid) as "CreatedDate"
				,(select user_name from kbusermst_c2 users where users.user_id=VCreated_by) as "ModifiedBy"
				,VEntityName "EntityDefName"
				,VID as "VID"
				,case when lower(VTypeOfEntity)='target' then
				(
					select Array_agg(id)
					from
					(
						select legacy_system_id id
						from
						(
							select regexp_split_to_table(Replace(Replace(columnvalue,'[',''),']',''),',')  secondaryentityid
							from entitiescreation
							where lower(ctrltype)like 'list%' and (lower(columnname) like 'identifier%')	
						) inputs
						Join "KB_ENTITY_Circles_Identifier" ide on cast(secondaryentityid as int)=ide."ID"	
						where secondaryentityid is not null and secondaryentityid!=''
					)identi	
				) end "SystemIdentifiers"
				,case when lower(VTypeOfEntity)='target' then
				(
					select legacy_system_id 
					from
					"KB_ENTITY_Circles_Target" ide 
					where ide."ID" = VSourceEntityId
					limit 1
				) end "TargetLegacyId"
				,array_to_json(array_agg(row_to_json(aa)))   "EntityScreen"
				,array_agg(branches) "Branchs"
				from
				(
					select 
					array_to_json(array_agg(row_to_json(a)))   as "Entity"
					from
					(
						select array_to_json(array_agg(row_to_json(output)))  as "Master"
						from
						(
							select 
							RowIndex as "RowIndex"
							,ColumnName "Label",ServiceLabel "ServiceLabel",originalDataType "DataType", CtrlType "ControlType",  IsRequired "IsRequired", isIdentifier "IsIndentifier"
							, '' "DefaultValue", ColumnValue "InputValue", groupname "GroupName", branchnumber "BranchNumber"
							from 
							EntitiesCreation
							
						) output
					)a
				) aa
				,(
					Select Array_to_json(Array_Agg(Row_to_json(br))) "Branch"
					from
					(
						select Locs.Location_Name as "Name", Locs.Location_ID as "ID"
						,'Name,ID' "Attribute_list" 
						,
						(
							Select Row_to_json(spks) "SPOKES"
							from
							(
								Select Array_to_json(Array_Agg(Row_to_json(spk))) "SPOKE"
								from
								(
								select SOURCETYPEID as "SpokeID",Spokes.SOURCETYPE_NAME as "SpokeName"
								,'' as "BranchNumber"
								,'SpokeID,SpokeName,BranchNumber' "Attribute_list" 
								,
								(
									Select Array_to_json(Array_Agg(Row_to_json(cust))) as "CUSTOMERIDENTIFIER"
									from
									(
										select RowID as "RowId","value" as "Value",Name as "Name",LOCATION_ID as "BranchId"
										,'RowId,Value,Name,BranchId' "Attribute_list" 
										from KBEntityPhone Phone
										where Mst.SOURCETYPEID=Phone.SOURCETYPEID and Phone.ENTITY_ID=Locs.ENTITY_ID
										--Locs.Location_id
										and isactive='1'
										--for xml raw('CUSTOMERIDENTIFIER')
									) as Cust
								)
								from KBEntityPhone Mst 
								JOIN KbsourcetypeMst Spokes on Mst.SOURCETYPEID=Spokes.SOURCETYPE_ID
								where Mst.ENTITY_ID=Locs.ENTITY_ID--Locs.Location_id
								group by SOURCETYPE_NAME,Mst.SOURCETYPEID
								--for xml raw('SPOKE'),Root('SPOKES')
								)as spk
							)spks	
						)
						from KbEntitylocations Locs
						Left JOIN KBEntityPhone KCP on Locs.Location_id=KCP.LOCATION_ID
						where Locs.ENTITY_ID= VEntInstId
						group by  Locs.Location_Name  ,Locs.Location_ID,Locs.ENTITY_ID
						--for xml raw('Branch'),root('Branchs')
					)as br
				)branches
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

-- 
-- /* 
-- 
-- VAnalysisupdate:=(	Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 			From
-- 			(
-- 
-- 				Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 				From
-- 				(
-- 
-- 					select   'structuralupdate' "type",4 as seq
-- 					,
-- 					(select array_to_json(array_agg(row_to_json(atables))) as "table"
-- 					from
-- 					(
-- 						select   '"RPT_'|| ReportConfigurationName||'"' as "name",'collection' as "type",R.ServiceTime as scheduletime,R.ServiceTimeUOM as uom,
-- 								(Select array_to_json(array_agg(row_to_json(columns)))  as "column"
-- 								from
-- 								(
-- 
-- 									select A.name as name,A.datatype,A.type,A.idcolumn,A.inputtable,A.inputcolumn,A. inputidcolumn ,A."rule" from 
-- 													( 
-- 									  
-- 														select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 														,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 														,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias|'MetricDetails' else '"DIM_Entity_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 														,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 														,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 														,'entityfilters' as "rule"
-- 														,recordid as Torder
-- 														from EntityLocations T
-- 														  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 														  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 														  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 														  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 														  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 														Left JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													   Left JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 														where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and (screen.ObjectType='EntityDefinition' or screen.ObjectType is null)
-- 														 and MetaData.ReportConfigurationID=R.ReportConfigurationID
-- 										
-- 													UNION ALL
-- 													
-- 													select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 													,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 													,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias||'MetricDetails' else '"DIM_EnBranch_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 													,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 													,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 													,'entityfilters' as "rule"
-- 													,recordid as Torder
-- 													from EntityLocations T
-- 													  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 													  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 													  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 													  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 													  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 													  JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													  JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 													where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and screen.ObjectType='Branch'
-- 													and MetaData.ReportConfigurationID=R.ReportConfigurationID
-- 										 
-- 										 
-- 										
-- 											)A order by A.Torder desc
-- 								) as columns
-- 								)
-- 								,
-- 								(
-- 									select 'entityfilters' as "name"
-- 									,
-- 									(select array_to_json(array_agg(row_to_json(b)))  as "filter"
-- 									from
-- 										(	
-- 											select array_to_json(array_agg(row_to_json(a)))  as "and"
-- 											from
-- 											(
-- 											    select A.idcolumn,A.inputidcolumn,A.condition, A.isnull
-- 											    from
-- 											    (
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCStartTime' as inputidcolumn,'<=' condition,'' isnull
-- 												  UNION ALL
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCEndTime' as inputidcolumn,'>=' condition,'true' isnull
-- 											    )A 
-- 											)a
-- 										)b
-- 									)	
-- 								)
-- 
-- 
-- 
-- 								
-- 							
-- 							from KBReportsConfigurationMSt R
-- 							where R.IsActive='1'	
-- 						)atables
-- 						)
-- 						)iprocesstype	
-- 			)processtype	
-- 		)					;
-- 
-- VEventsupdate:=(	Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 			From
-- 			(
-- 
-- 				Select array_to_json(array_agg(row_to_json(processtype)))  as processtype
-- 				From
-- 				(
-- 
-- 					select   'structuralupdate' "type",4 as seq
-- 					,
-- 					(select array_to_json(array_agg(row_to_json(atables))) as "table"
-- 					from
-- 					(
-- 						select   '"DMCOLLECTION_'|| EVENT_SD||'"' as name,'events' as type,R.ServiceTime as scheduletime,R.ServiceTimeUOM as uom,
-- 								(Select array_to_json(array_agg(row_to_json(columns)))  as "column"
-- 								from
-- 								(
-- 
-- 									select A.name as name,A.datatype,A.type,A.idcolumn,A.inputtable,A.inputcolumn,A. inputidcolumn ,A."rule" from 
-- 													(
-- 									  
-- 														select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 														,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 														,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias||'MetricDetails' else '"DIM_Entity_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 														,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 														,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 														,'entityfilters' as "rule"
-- 														,recordid as Torder
-- 														from EntityLocations T
-- 														  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 														  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 														  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 														  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 														  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 														Left JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													   Left JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 														where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and (screen.ObjectType='EntityDefinition' or screen.ObjectType is null)
-- 														 and MetaData.eventid=ISNULL(R.OriginalID,R.Event_ID)
-- 										
-- 													UNION ALL
-- 													
-- 													select distinct  MetaData.TABLECOL  as name,MetaData.METRICDATATYPE as datatype,MetaData.ObjectType   as type
-- 													,case when MetaData.MetricName like '%EntityID_%' then Src.SOURCETYPE_NAME||'_seq' else EntitiyMst.ENTITY_NAME||'_ID' end idcolumn
-- 													,case when MetaData.MetricName like '%EntityID_%' then 'Fact_'||Src.Alias||'MetricDetails' else '"DIM_EnBranch_'||EntitiyMst.ENTITY_NAME||'"' end inputtable
-- 													,case when MetaData.MetricName like '%entity_%' then 'SEQ' else screen.ControlTitle /*MetaData.MetricName*/ end inputcolumn
-- 													,case when MetaData.MetricName like '%entity_%' then 'EntityId' else 'ID' end inputidcolumn
-- 													,'entityfilters' as "rule"
-- 													,recordid as Torder
-- 													from EntityLocations T
-- 													  join kbentityphone phone on T.Sourceid=phone.Sourcetypeid
-- 													  join kbsourcetypeMst src on Src.SOURCETYPE_ID=T.Sourceid
-- 													  join kbentities e on e.ENTITY_ID=phone.Entity_id
-- 													  join kbentityMst EntitiyMst on EntitiyMst.ENTITYDEF_ID=e.ENTITYDEF_ID
-- 													  JOIN kbReportsmetaData MetaData on MetaData.ENTITYDEFID=EntitiyMst.ENTITYDEF_ID
-- 													  JOIN kbreportsConfigurationdetails Det on Det.ReportConfigDetailID=MetaData.ReportConfigDetailID
-- 													  JOIN kbentityscreenconfigurationMst screen on screen.EntityDefID=MetaData.ENTITYDEFID and MetaData.MetricName=screen.ServiceLabel
-- 													where   MetaData.ObjectType = 'Entity'  and phone.Isactive=1 and screen.ObjectType='Branch'
-- 													and MetaData.eventid=ISNULL(R.OriginalID,R.Event_ID)
-- 										 
-- 										 
-- 										
-- 											)A order by A.Torder desc
-- 								) as columns
-- 								)
-- 								,
-- 								(
-- 									select 'entityfilters' as "name"
-- 									,
-- 									(select array_to_json(array_agg(row_to_json(b)))  as "filter"
-- 									from
-- 										(	
-- 											select array_to_json(array_agg(row_to_json(a)))  as "and"
-- 											from
-- 											(
-- 											    select A.idcolumn,A.inputidcolumn,A.condition, A.isnull
-- 											    from
-- 											    (
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCStartTime' as inputidcolumn,'<=' condition,'' isnull
-- 												  UNION ALL
-- 												  select 'RECORDDATEUTC' as idcolumn,'VirtusUTCEndTime' as inputidcolumn,'>=' condition,'true' isnull
-- 											    )A 
-- 											)a
-- 										)b
-- 									)	
-- 								)
-- 
-- 
-- 
-- 								
-- 							
-- 							from kbeventsMst R
-- 							where R.IsActive=1	
-- 						)atables
-- 						)
-- 						)processtype	
-- 			)processtype
-- 		);
-- 
-- VFactsInfo:=	(	select array_to_json(array_agg(row_to_json(output)))  as "tables"
-- 			from
-- 			(
-- 				select array_to_json(array_agg(row_to_json(FactsInfo)))  as "table"
-- 				from
-- 				(
-- 					select distinct '"Fact_'||Mst.Alias||'MetricDetails"' "name" 
-- 					from EntityLocations EL
-- 					join kbsourcetypeMst Mst on Mst.SOURCETYPE_ID=EL.Sourceid
-- 				)FactsInfo	
-- 			) output
-- 		)	;
-- 
-- 
-- */

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);
		
	End;
	

end;
Elseif Lower(VTran)='getentityrelationtooltip' Then
begin

Return(select row_to_json(aa)
from
(
select row_to_json(output) as "ENTITYDETAILS"
from
(
	select array_to_json(array_agg(row_to_json(a)))  as "Relation"
	from
	(
	select rels.relationid "RelationID",  Relationname as "RelationName", PrimaryEntityDefinitionid as "PrimaryEntityDefinitionID"
	, PrimaryentityType as "PrimaryEntityType",SecondaryEntityDefinitionid as "SecondaryEntityDefinitionID",SecondaryentityType as "SecondaryEntityType"
	,Rels.Isactive as "IsActive",users.user_name as "CreatedBy", Rels.CreatedDate as "CreatedDate",musers.user_name  as "ModifiedBy", Rels.ModifiedDate "ModifiedDate"
	from kbentityrelationsmst Rels
	Join kbentityrelationentitydefinitiondetails B on rels.relationid=B.relationid
	join kbusermst_c2 users on Rels.createdby=users.user_id
	Left join kbusermst_c2 musers on Rels.modifiedby=musers.user_id
	where Rels.isactive='1'
	)a
)output
)aa
)
;
end;
Elseif Lower(VTran)='getrelationdetails' Then
Begin

VRelationId:=(select ivalue->'ENTITYDETAILS'->> 'EntityrelationId' from temps limit 1);

Return(select row_to_json(aa)
from
(
select row_to_json(output) as "ENTITYDETAILS"
from
(
	select array_to_json(array_agg(row_to_json(a)))  as "Relation"
	from
	(
	select rels.relationid "RelationID",  Relationname as "RelationName", PrimaryEntityDefinitionid as "PrimaryEntityDefinitionID"
	, PrimaryentityType as "PrimaryEntityType",SecondaryEntityDefinitionid as "SecondaryEntityDefinitionID",SecondaryentityType as "SecondaryEntityType"
	,Rels.Isactive as "IsActive",users.user_name as "CreatedBy", Rels.CreatedDate as "CreatedDate",musers.user_name  as "ModifiedBy", Rels.ModifiedDate "ModifiedDate"
	from kbentityrelationsmst Rels
	Join kbentityrelationentitydefinitiondetails B on Rels.relationid=B.relationid
	join kbusermst_c2 users on Rels.createdby=users.user_id
	Left join kbusermst_c2 musers on Rels.modifiedby=musers.user_id
	where Rels.isactive='1' and Rels.relationid=VRelationId
	)a
)output
)aa
)
;

End;
Elseif Lower(VTran)='addcasetomission' Then
Begin

VPrimaryEntityType:= 'Security_tag';
VSecondaryEntityType:= 'Case';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already exists: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	INSERT INTO public.kbentityrelationdetails(
	relationid, primaryentitydefinitionid, primaryentityid, 
	primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid, VDestEntityId secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');

		/*reverse relation insertion*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,VDestEntityId primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	,VCreated_By createdby
	,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');			
	

return(

	Select (row_to_json(output))
	from
	(
	
	Select 'ok' as "message", 200 as "code"
	) output
);

 

End;
Elseif Lower(VTran)='disconnectcasefrommission' Then
Begin

VPrimaryEntityType:= 'Security_tag';
VSecondaryEntityType:= 'Case';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);

-- select RelationId into VEntityRelationId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select primaryentitydefinitionid into VSourceEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';
-- 
-- select secondaryentitydefinitionid into VDestEntityDefId
-- from kbentityrelationsmst where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and IsActive='1';

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If not Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Cannot delete as Relation does not exist: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (
			Select isactive 
			from 
			kbentityrelationdetails A
			where relationdetailid=
			(
				select max(B.relationdetailid)
				from kbentityrelationdetails B
				where B.primaryentitydefinitionid=VSourceEntityDefId and B.secondaryentitydefinitionid=VDestEntityDefId
				and B.primaryentityid=VSourceEntityId and B.secondaryentityid=VDestEntityId 
			) 
		)='0' then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already deleted: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	Update kbentityrelationdetails Set  IsActive='0', Modifiedby=VCreated_by,modifieddate=VActiondate
			where primaryentitydefinitionid= VSourceEntityDefId and primaryentityid=VSourceEntityId
			and  secondaryentitydefinitionid=VDestEntityDefId and  secondaryentityid=VDestEntityId and IsActive='1';
	
return(

	Select (row_to_json(output))
	from
	(
	
	Select  'ok' as "message", 200 as "code"
	) output
);

end;
Elseif Lower(VTran)='getallentities' Then
Begin
 
	if(Lower(VTypeOfEntity)='target') then 
	begin
	Return(
		Select Row_to_json(ent) 
		from
		(
		Select Array_agg(ent) "ENTITYDETAILS"
		from
		(
		Select distinct Entity_id ent
		From kbentities ents 
		join kbentitymst entmst on ents.entitydef_id=entmst.entitydef_id
		join "KB_ENTITY_Circles_Target" tar on ents.entity_id=tar."ID"
		where Lower(entmst.entity_name)=Lower(VTypeOfEntity) and ents.isactive='1' and tar."ISACTIVE"='1'
		and (is_target='1' )
		)outp
		)ent

	);
	end;
	
	Elseif Lower(VTypeOfEntity)='nontarget' Then
	Begin
	Return(
		Select Row_to_json(ent) 
		from
		(
		Select Array_agg(ent) "ENTITYDETAILS"
		from
		(
		Select distinct Entity_id ent
		From kbentities ents 
		join kbentitymst entmst on ents.entitydef_id=entmst.entitydef_id
		join "KB_ENTITY_Circles_Target" tar on ents.entity_id=tar."ID"
		where Lower(entmst.entity_name)='target' and ents.isactive='1' and tar."ISACTIVE"='1' and (coalesce(is_target,'0')='0')
		)outp
		)ent

	);
	end;
		Else
		Begin
		Return(
			Select Row_to_json(ent) 
			from
			(
			Select Array_agg(ent) "ENTITYDETAILS"
			from
			(
			Select distinct Entity_id ent
			From kbentities ents 
			join kbentitymst entmst on ents.entitydef_id=entmst.entitydef_id
			where Lower(entmst.entity_name)=Lower(VTypeOfEntity) and ents.isactive='1'
			)outp
			)ent

		);
		end;
		End if;

-- Return(
-- 	Select Row_to_json(ent) 
-- 	from
-- 	(
-- 	Select Array_agg(ent) "ENTITYDETAILS"
-- 	from
-- 	(
-- 	Select Entity_id ent
-- 	From kbentities ents 
-- 	join kbentitymst entmst on ents.entitydef_id=entmst.entitydef_id
-- 	where entmst.entity_name=VTypeOfEntity
-- 	)outp
-- 	)ent
-- 
-- );

End;
Elseif Lower(VTran)='mergetarget' Then
begin

	select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' 
	,ivalue->'ENTITYDETAILS'->> 'DestinationEntityId'
	,ivalue->'ENTITYDETAILS'->> 'MetricName'
	,ivalue->'ENTITYDETAILS'->> 'TypeOfEntity'
	into VSourceEntityId,VDestEntityId,VEntityMetricName,VTypeOfEntity
	from temps 
	limit 1;

	VPrimaryEntityType:=VTypeOfEntity;
 
	 If ((exists (Select 1 from kbentities ents where entity_id=VSourceEntityId and isactive='1'
			and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) =Lower(VPrimaryEntityType)))) 
		and (exists(Select 1 from kbentities ents where entity_id=VDestEntityId and isactive='1'
			and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) =Lower(VPrimaryEntityType))))									
	) Then
	Begin

		VEntInstId:=VSourceEntityId;
		IF exists(select 1 from "KB_ENTITY_Circles_Target" where Coalesce(master_entity_id,0)!=0 and "ID"=VSourceEntityId ) Then
		Begin
			
			select master_entity_id into VSourceEntityId  
			from "KB_ENTITY_Circles_Target" 
			where "ID"=VSourceEntityId 
			;
	
		End;
		Else
		begin
			 
			update "KB_ENTITY_Circles_Target" set master_entity_id = VSourceEntityId where "ID"=VEntInstId;	
		end;
		End if;

			update "KB_ENTITY_Circles_Target" set master_entity_id = VSourceEntityId where "ID"=VDestEntityId;

			 
		Return(
			select row_to_json(outs)
			from
			(
					 
				Select Array_agg(Child_id) "ENTITYDETAILS"
				from 
				( 
					select VSourceEntityId as Child_Id 
					Union 
					select "ID" Child_Id 
					from "KB_ENTITY_Circles_Target" childs 
					where childs.master_entity_id=VSourceEntityId
				)A 
			
			) outs	
			);
	End;
	Else
	Begin

		Return(
			Select (row_to_json(output))
			from
			(
				Select -1 as "Result", 'Invalid entity ids' as "message", 404 as "code"
			) output
			);

	end;
	End if;
end;
Elseif Lower(VTran)='deletetargetlinks' Then
begin

	select ivalue->'ENTITYDETAILS'->> 'EntityId'
	,ivalue->'ENTITYDETAILS'->> 'MetricName'
	,ivalue->'ENTITYDETAILS'->> 'TypeOfEntity'
	into VSourceEntityId,VEntityMetricName,VTypeOfEntity
	from temps 
	limit 1;

	VPrimaryEntityType:=VTypeOfEntity;

	 If ((exists(Select 1 from kbentities ents where entity_id=VSourceEntityId and isactive='1'
			and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name) =Lower(VPrimaryEntityType))))									
	) Then
	Begin

		update "KB_ENTITY_Circles_Target" set master_entity_id = NULL where "ID"=VSourceEntityId;

		update "KB_ENTITY_Circles_Target" set master_entity_id = (select  "ID" from "KB_ENTITY_Circles_Target" where master_entity_id=VSourceEntityId limit 1)
		where master_entity_id=VSourceEntityId;
		
		Return(
			Select (row_to_json(output))
			from
			(
				Select 1 as "Result", 'Target unlinked' as "message", 200 as "code"
			) output
			);
	End;
	Else
	Begin

		Return(
			Select (row_to_json(output))
			from
			(
				Select -1 as "Result", 'Invalid entity ids' as "message", 404 as "code"
			) output
			);

	end;
	End if;
end;
Elseif Lower(VTran)='getmergedtargets' then
begin

	
	If VEntInstId= 0 then
	VEntInstId:=NULL;
	end if;

	
	return(Select Row_to_json(outp)
	from
	(
		Select Row_to_json(outs) "ENTITYDETAILS"
		from 
		( 
			Select Array_to_json(Array_Agg(Row_to_json(par))) "Parent_Ids"
			from 
			( 
				Select master_entity_id "Parent_Id"
				,
				(
					Select Array_agg(Child_id) 
					from 
					(
						select childs."ID" Child_Id 
						from "KB_ENTITY_Circles_Target" childs 
						where parents.master_entity_id=childs.master_entity_id  and childs."ISACTIVE"='1'
						--coalesce(case when childs.master_entity_id=0 then NULL else childs.master_entity_id end ,childs."ID")  
					)A	
				) "Child_Ids" 
				from 
				( 
					select distinct master_entity_id
					from
					"KB_ENTITY_Circles_Target" parents 
					where coalesce(master_entity_id,0)!=0 and "ISACTIVE"='1'
					and coalesce(master_entity_id,0) in (select coalesce(master_entity_id,0) from "KB_ENTITY_Circles_Target" where "ID"= coalesce(VEntInstId,"ID"))
				) parents
				group by master_entity_id
			) par 
		)outs 
	) outp)
		;
	

end;
Elseif lower(Vtran)='addidentifiertodevice' then
begin

VPrimaryEntityType:= 'Device';
VSecondaryEntityType:= 'Identifier';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);
VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=VSourceEntityDefId);

	IF Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already exists: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id 
									and lower(entmst.Entity_name)!=lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id 
									and lower(entmst.Entity_name)!=Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	INSERT INTO public.kbentityrelationdetails(
	relationid, primaryentitydefinitionid, primaryentityid, 
	primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid,VSourceEntityDefId primaryentitydefinitionid, VSourceEntityId primaryentityid, 
	VPrimaryEntityType primaryentitytype,VDestEntityDefId secondaryentitydefinitionid, VDestEntityId secondaryentityid, 
	VSecondaryEntityType secondaryentitytype, VCreated_By createdby,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');

	/*reverse relation insertion*/

 	INSERT INTO public.kbentityrelationdetails(relationid, primaryentitydefinitionid, primaryentityid,primaryentitytype, secondaryentitydefinitionid, secondaryentityid, 
	secondaryentitytype, createdby, modifiedby)
	select VEntityRelationId relationid
	,VDestEntityDefId primaryentitydefinitionid
	,VDestEntityId primaryentityid
	,VSecondaryEntityType primaryentitytype
	,VSourceEntityDefId secondaryentitydefinitionid
	,VSourceEntityId secondaryentityid
	,VPrimaryEntityType secondaryentitytype
	,VCreated_By createdby
	,VCreated_By modifiedby
	 where not exists (select 1 from kbentityrelationdetails A
 				where A.primaryentitydefinitionid= VSourceEntityDefId and A.primaryentityid=VSourceEntityId 
 				and  A.secondaryentitydefinitionid=VDestEntityDefId and  A.secondaryentityid=VDestEntityId and isactive='1');			
	
	
	Insert into kbentitydata(Entitydefid, entityid, metricname, metricvalue,createdby,modifiedby)
	select 	VSourceEntityDefId, VSourceEntityId, VEntityMetricName, VDestEntityId, VCreated_by,VCreated_by
	where not exists(select 1 from kbentitydata where Entitydefid=VSourceEntityDefId and entityid=VSourceEntityId and metricname=VEntityMetricName and metricvalue=cast(VDestEntityId as varchar(50)) and isactive='1');

/* Updating the dynamic table*/

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=VSourceEntityDefId);

VDevicedata:=	(
			select string_agg(Ecolumns,',')
			from
			(
				select cast(secondaryentityid as varchar(100)) as Ecolumns
				from kbentityrelationdetails 
				where primaryentityid=VSourceEntityId and isactive='1' 
				and lower(primaryentitytype)=lower(VPrimaryEntityType) and lower(secondaryentitytype)=lower(Vsecondaryentitytype)
			)a
		)
;

If VDevicedata is not null then
begin

 Execute(' update '||VEntdefTablename || ' set "identifier"='''||VDevicedata||''' where "ID"='|| Cast(VSourceEntityId as varchar(50))||' and "ISACTIVE"=''1''');

 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataType'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataType'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select screenjson->'Entity'-> 'Master' as EDScreen
		from kbentities
		where entity_id=VSourceEntityId and isactive='1'
		)a
	)entityscreen
	;
	
VDevicedata:='['||VDevicedata||']';

Update EntitiesCreation set columnvalue=VDevicedata
where lower(ColumnName)='identifier'
;

Ventityscreen:=(			
		select row_to_json(aa)  "ScreenConfig"
		from
		(
			select 
			row_to_json(a)   as "Entity"
			from
			(
				select NULL "IsUpdate", array_to_json(array_agg(row_to_json(output)))  as "Master"
				from
				(
					select 
					RowIndex as "RowIndex"
					,ColumnName "Label"
					,ServiceLabel "ServiceLabel"
					,originaldatatype "DataType"
					,CtrlType "ControlType"
					,IsRequired "IsRequired"
					,Isidentifier "IsIndentifier"
					,Issearchable "IsSearchable"
					,NULL as "IsDisplay"
					,NULL "DefaultValue", GroupName "GroupName"
					,ColumnValue as "InputValue"
					from 
					EntitiesCreation
					
				) output
			)a
		) aa
			)		

;

Update kbentities set screenjson =Ventityscreen where entity_id=VSourceEntityId and isactive='1';

/* output simialr to entitycreation*/
select entity_name,EntityType into VEntityName, VEntityType from kbentitymst where entitydef_id=VSourceEntityDefId;
VEntInstName:=(select entity_name from kbentities where entity_id=VSourceEntityId);

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VSourceEntityDefId "EntityDefId"
				,VSourceEntityId "EntityId"
				,VSourceEntityDefId "ENTITYDEFID"
				,VSourceEntityId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "CreatedDate"
				,VActionDate "ModifiedDate"
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "ModifiedBy"	
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "CreatedBy"	
				,VEntityName "EntityDefName"
				,VID as "VID"
				,Ventityscreen   "EntityScreen"
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);

end;
else
begin
		
return(

	Select (row_to_json(output))
	from
	(
	
	Select -1 as "Result", 'Invalid json message received' as "message", 404 as "code"
	) output
);

end;
end if;
		
end;
Elseif Lower(Vtran)='removeidentifierfromdevice' then
begin

VPrimaryEntityType:= 'Device';
VSecondaryEntityType:= 'Identifier';

VSourceEntityId:=(select ivalue->'ENTITYDETAILS'->> 'SourceEntityId' from temps limit 1);
VDestEntityId:=(select ivalue->'ENTITYDETAILS'->> 'DestinationEntityId' from temps limit 1);
VEntityMetricName:=(select ivalue->'ENTITYDETAILS'->> 'MetricName' from temps limit 1);

select A.RelationId,primaryentitydefinitionid,secondaryentitydefinitionid 
into VEntityRelationId,VSourceEntityDefId,VDestEntityDefId
from kbentityrelationsmst A
Join kbentityrelationentitydefinitiondetails B on A.relationid=B.relationid
where Lower(PrimaryEntityType)=Lower(VPrimaryEntityType) and Lower(SecondaryEntityType)=Lower(VSecondaryEntityType) and A.IsActive='1';

	If not Exists(select 1 from kbentityrelationdetails where primaryentitydefinitionid=VSourceEntityDefId and secondaryentitydefinitionid=VDestEntityDefId
			and primaryentityid=VSourceEntityId and secondaryentityid=VDestEntityId and isactive='1'
	) then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Cannot delete as Relation does not exist: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf (
			Select isactive 
			from 
			kbentityrelationdetails A
			where relationdetailid=
			(
				select max(B.relationdetailid)
				from kbentityrelationdetails B
				where B.primaryentitydefinitionid=VSourceEntityDefId and B.secondaryentitydefinitionid=VDestEntityDefId
				and B.primaryentityid=VSourceEntityId and B.secondaryentityid=VDestEntityId 
			) 
		)='0' then
	Begin
		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'Relation already deleted: primary enitity id:'||cast(VSourceEntityId as varchar) 
		||', secondary entity id:'||cast(VDestEntityId as varchar)  as "message", 500 as "code"
		) output
		);
	End;
	ElseIf  (exists(Select 1 from kbentities where entity_id=VSourceEntityId and isactive='0') 
		OR not exists(Select cast('1' as bit) from kbentities where entity_id=VSourceEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VSourceEntityId 
								and Exists(Select 1 from kbentitymst entmst where ents. Entitydef_id=entmst.Entitydef_id 
									and Lower(entmst.Entity_name) !=Lower(VPrimaryEntityType))) 
		)
	then
	begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VPrimaryEntityType as "message", 404 as "code"
		) output
		);
	end;
	Elseif (exists(Select 1 from kbentities where entity_id=VDestEntityId and isactive='0') 
			or not exists(Select cast('1' as bit) from kbentities where entity_id=VDestEntityId)
			OR exists(Select 1 from kbentities ents where entity_id=VDestEntityId 
								and Exists(Select 1 from kbentitymst entmst 
										where ents. Entitydef_id=entmst.Entitydef_id and Lower(entmst.Entity_name)!= Lower(VSecondaryEntityType))) 
		) Then
	Begin

		Return(
		Select (row_to_json(output))
		from
		(
		Select -1 as "Result", 'invalid entity id:'||VSecondaryEntityType as "message", 404 as "code"
		) output
		);

	end;
	End if;

	Update kbentityrelationdetails Set IsActive='0', Modifiedby=VCreated_by, modifieddate=Vactiondate
			where primaryentitydefinitionid= VSourceEntityDefId and primaryentityid=VSourceEntityId
			and  secondaryentitydefinitionid=VDestEntityDefId and  secondaryentityid=VDestEntityId and IsActive='1';
	

	Update kbentitydata set  IsActive='0', Modifiedby=VCreated_by
	where Entitydefid=VSourceEntityDefId and entityid=VSourceEntityId and metricname=VEntityMetricName and metricvalue=cast(VDestEntityId as varchar(50)) and isactive='1';

/* Updating the dynamic table*/

VEntdefTablename:= (Select entitytablename from kbentitymst where entitydef_id=VSourceEntityDefId);

VDevicedata:=	(
			select string_agg(Ecolumns,',')
			from
			(
				select cast(secondaryentityid as varchar(100)) as Ecolumns
				from kbentityrelationdetails 
				where primaryentityid=VSourceEntityId and isactive='1' 
				and lower(primaryentitytype)=lower(VPrimaryEntityType) and lower(secondaryentitytype)=lower(Vsecondaryentitytype)
			)a
		)
;

Execute(' update '||VEntdefTablename || ' set "identifier"='''||coalesce(VDevicedata,'')||''' where "ID"='|| Cast(VSourceEntityId as varchar(50))||' and "ISACTIVE"=''1''');

 	Insert into EntitiesCreation(EntityName,ColumnName,ColumnValue,CtrlType,DataType,"Name","Value",Isidentifier
	, ServiceLabel,BranchNumber, RowIndex, IsRequired, GroupName, IsUpdate,Issearchable,originaldatatype)

	select  VEntInstName
	,EDScreen->>'Label'
	,EDScreen->>'InputValue'
	,EDScreen->>'CtrlType'
	,EDScreen->>'DataTypeId'
	,NULL "Name"
	,NULL "Value"
	,cast(EDScreen->>'Identifier' as bit)
	,EDScreen->>'ServiceLabel'
	,1 as BranchNumber
	,cast(EDScreen->>'RowIndex' as int) RowIndex
	,cast(EDScreen->>'IsRequired' as bit)IsRequired
	,EDScreen->>'GroupName'	
	,NULL isupdate
	, cast(EDScreen->>'IsSearchable' as bit)
	,EDScreen->>'DataTypeId'
	from
	(
		Select json_array_elements(EDScreen) as EDScreen
		From
		(
		select screenjson->'Entity'-> 'Master' as EDScreen
		from kbentities
		where entity_id=VSourceEntityId and isactive='1'
		)a
	)entityscreen
	;

VDevicedata:='['||VDevicedata||']';

Update EntitiesCreation set columnvalue=VDevicedata
where lower(ColumnName)='identifier'
;

Ventityscreen:=(			select row_to_json(aa)  "ScreenConfig"
					from
					(
						select 
						row_to_json(a)   as "Entity"
						from
						(
							select NULL "IsUpdate", array_to_json(array_agg(row_to_json(output)))  as "Master"
							from
							(
								select 
								RowIndex as "RowIndex"
								,ColumnName "Label"
								,ServiceLabel "ServiceLabel"
								,originaldatatype "DataType"
								,CtrlType "ControlType"
								,IsRequired "IsRequired"
								,Isidentifier "IsIndentifier"
								,Issearchable "IsSearchable"
								,NULL as "IsDisplay"
								,NULL "DefaultValue", GroupName "GroupName"
								,ColumnValue as "InputValue"
								from 
								EntitiesCreation
								
							) output
						)a
					) aa
			)		

;

Update kbentities set screenjson =Ventityscreen where entity_id=VSourceEntityId and isactive='1';

/* output simialr to entitycreation*/
select entity_name,EntityType into VEntityName, VEntityType from kbentitymst where entitydef_id=VSourceEntityDefId;
VEntInstName:=(select entity_name from kbentities where entity_id=VSourceEntityId);

VResult:=	(
		 	select array_to_json(array_agg(row_to_json(output)))  as "ENTITYDETAILS"
			From
			(  
				select 
				1 as "Result"
				, 'ok' as "message"
				, 200 as "code"
				,VTran "TRANSTYPE"
				,VCreated_by  "LoginId"
				,VActiondate "VirtusUtcDate"
				,VEntInstName "EntityScreenName"
				,VSourceEntityDefId "EntityDefId"
				,VSourceEntityId "EntityId"
				,VSourceEntityDefId "ENTITYDEFID"
				,VSourceEntityId "ENTITYID"
				,VEntInstName "EntityName"
				,Case When VEntityType=0 Then 'Device' When VEntityType=1 Then 'Human' when VEntityType=2 then 'Thing' End "EntityType"
				,VActionDate "CreatedDate"
				,VActionDate "ModifiedDate"
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "ModifiedBy"	
				,(select user_name from kbusermst_c2 where user_id=VCreated_by) as "CreatedBy"	
				,VEntityName "EntityDefName"
				,VID as "VID"
				,Ventityscreen   "EntityScreen"
			)output	
		 
	);

VEarlyArrivingFacts:=(	Select array_to_json(array_agg(row_to_json(oprocesstype)))  as "processtype"
			From
			(
				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as "processtype"
				From
				(
					select   'earlyarrivingfacts' "type",1 as seq,
					(

						Select array_to_json(array_agg(row_to_json(query)))  as "query"
						from
						(	

							select  'update' as type,'Fact_'||SourceMst.Alias||'MetricDetails' "table",'attributevalue' as messagetype
							,	
								(
									select array_to_json(array_agg(row_to_json(filters)))   as "filters"
									from
									(
										select array_to_json(array_agg(row_to_json(filters)))   as "filter"
										from
										(
											select 'where' "type",

												(
													select array_to_json(array_agg(row_to_json(a)))   as "column"
													from
													(
														Select 'entityid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select 'entitylocationid' "name",'int' datatype,cast(1 as varchar) as value
														UNION ALL
														select distinct "name" "name",'varchar(500)' datatype,Value as value
														from kbentityphone phone
														where phone.ENTITY_ID=PH.ENTITY_ID and phone.SOURCETYPEID=PH.SOURCETYPEID and ISACTIVE='1' 

													)a
												)aa
										)"filters"
									) "filters"
								)	
							
							,					
							(
									select array_to_json(array_agg(row_to_json(aa)))   as "row"
									from
									(
										select array_to_json(array_agg(row_to_json(a)))   as "column"
										from
										(				
											select distinct 'entityid' as "name",'bigint'as datatype,ENTITY_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
											UNION ALL
											select distinct 'entitylocationid' as "name",'BIGINT'as datatype,LOCATION_ID as value
											from kbentityphone EP where EP.ENTITY_ID=PH.ENTITY_ID
										)a
									)aa
							)
							
							from kbentityphone PH
							JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
							where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	 
							Group by SourceMst.Alias,PH.ENTITY_ID,PH.SOURCETYPEID
						) as query
					)
				)iprocesstype			
			)oprocesstype
		   )	
;

VMeausres:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",2 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFactDetails_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VKPIS:=(		Select array_to_json(array_agg(row_to_json(oprocesstype)))  as processtype
			From
			(

				Select array_to_json(array_agg(row_to_json(iprocesstype)))  as processtype
				From
				(
					select   'structuralupdate' "type",3 as seq
					,
						(
							
							Select array_to_json(array_agg(row_to_json("table")))  as "table"
							From
							(
								Select 'DBKPIFact_'||SourceMst.Alias "name",'meausres' as "type",'' as scheduletime,'' as uom
								,
								(
									select array_to_json(array_agg(row_to_json("A")))  as "column"
									from 
									(
									
									select distinct 'EntityID' as "name",'bigint' as datatype,'meausres'	as "type",'seq' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityID' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'	
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									
									
									UNION ALL
									
									
									select distinct 'EntityLocationId' as "name",'bigint' as datatype,'meausres'	as type,'"seq"' as idcolumn
									,'Fact_'||SourceMst.Alias||'MetricDetails' as inputtable
									,'EntityLocationId' as inputcolumn,'seq' as inputidcolumn
									from kbentityphone PH
									JOIN KbSourcetypeMst SourceMst on PH.SOURCETYPEID=SourceMst.SOURCETYPE_ID
									where PH.ENTITY_ID=VEntInstId and PH.ISactive='1'
									and PH.ENTITY_ID=PH1.ENTITY_ID and PH.SOURCETYPEID=PH1.SOURCETYPEID
									)"A"

								)

								from   kbentityphone PH1
								JOIN KbSourcetypeMst SourceMst on PH1.SOURCETYPEID=SourceMst.SOURCETYPE_ID
								where PH1.ENTITY_ID=VEntInstId and PH1.ISactive='1'
								group by SourceMst.Alias ,PH1.SOURCETYPEID, 	PH1.ENTITY_ID
							)"table"	

						)

				)iprocesstype	
			)oprocesstype	
	);

VEarlyArrivingFacts:=	(select array_to_json(array_agg(row_to_json(Earlyarrivingfacts)))  as root
			from
				(
					select   '' delaytime,'' uom,VEarlyArrivingFacts,VMeausres,VKPIS,VAnalysisupdate,VEventsupdate
				) as Earlyarrivingfacts
			);

			

VFinalResult:=(	select array_to_json(array_agg(row_to_json(ENTITYDETAILS)))  as "ENTITYDETAILS"
		from
		(	
			select array_to_json(array_agg(row_to_json(a)))  as "ENTITYDETAILS"
			from
			(
			select  VResult as "Entity",VEarlyArrivingFacts as "EarlyArrivingFacts",VFactsInfo "FactsInfo"
			) a
		)ENTITYDETAILS
		)

		;

Return(VFinalResult);

end;

end if; 

exception when others then 
		Return(

				Select row_to_json(a) 
				from
				(select 500 "code", 'error' "message")a

		);
		
	 
 
End

$function$;

ALTER FUNCTION public.usp_kbentity_c2(json)
    OWNER TO postgres;



